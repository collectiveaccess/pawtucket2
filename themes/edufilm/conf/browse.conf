cache_timeout = 0

#
# 
#
browseTypes = {

	people = {
		displayName = _(People),
		labelSingular = _("person"),
 		labelPlural = _("people"),
		table = ca_entities,
		restrictToTypes = ["person"],
		showLetterBarFrom = ca_entities.vhh_PersonName.PN_FamilyName,
		showLetterBarSorts = [ca_entities.vhh_PersonName.PN_FamilyName],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			images = {
				result_caption = 
					"
						<small><l>^ca_entities.idno</l></small>
						<br/>
						<l>^ca_entities.preferred_labels</l>

						<ifdef code='ca_entities.vhh_Date'><br/>
						<unit relativeTo='ca_entities.vhh_Date' delimiter='<br/>'>^ca_entities.vhh_Date.date_Date <ifdef code='ca_entities.vhh_Date.date_Type'>(^ca_entities.vhh_Date.date_Type)</ifdef>
						</unit></ifdef>

						<ifdef code='ca_entities.vhh_TypeOfActivity2'>
						<br/><t>Type of Activity</t>: <unit relativeTo='ca_entities.vhh_TypeOfActivity2' delimiter='<br/>'>
							^ActivityList <ifdef code='ca_entities.vhh_TypeOfActivity2.TOA_TempScope'>(^TOA_TempScope)</ifdef>
						</unit></ifdef>

						<br/>
						<ifcount code='ca_entities.vhh_Note' min='1'><t>Has Note: yes</t> <br/></ifcount>
						<ifcount code='ca_entities.vhh_Note' max='0'><t>Has Note: no</t> <br/></ifcount>
						
						<t>Related objects</t>: ^ca_objects.related%returnAsCount=1&restrictToTypes=av_creation,nonav_manifestation
					",
			}, 
			list = {
				result_caption = "
					<div class='row'><div class='col-md-2'><b><t>Identifier</t></b><br/><l>^ca_entities.idno</l></div>
					<div class='col-md-2'><b><t>Name</t></b><br/><l>^ca_entities.preferred_labels</l></div>
					<div class='col-md-3'><b><t>Date</t></b><br/><unit relativeTo='ca_entities.vhh_Date' delimiter='<br/>'>^ca_entities.vhh_Date.date_Date <ifdef code='ca_entities.vhh_Date.date_Type'>(^ca_entities.vhh_Date.date_Type)</ifdef></unit></div>
					<div class='col-md-3'><b><t>Type of Activity</t></b><br/><unit relativeTo='ca_entities.vhh_TypeOfActivity2' delimiter='<br/>'>^ActivityList <ifdef code='ca_entities.vhh_TypeOfActivity2.TOA_TempScope'>(^TOA_TempScope)</ifdef></unit></div>
					<div class='col-md-2'><ifcount code='ca_entities.vhh_Note' min='1'><t>Has Note: yes</t> <br/></ifcount><ifcount code='ca_entities.vhh_Note' max='0'><t>Has Note: no</t> <br/></ifcount><t>Related objects</t>: ^ca_objects.related%returnAsCount=1&restrictToTypes=av_creation,nonav_manifestation</div>
					</div>
				",
			}
		},
		
		sortBy = {
			_("Last Name") = ca_entities.vhh_PersonName.PN_FamilyName,
			_("First Name") = ca_entities.vhh_PersonName.PN_Forename,
			_("Birth Date") = ca_entities.vhh_Date.date_Date|date_Type=birth,
			# DateType = ca_entities.vhh_Date.date_Type,
			#need dob and dod 
			_("Has Note") = ca_entities.vhh_Note.vhh_NoteText,
			CollectionSort = "ca_entities_x_collections.rank"
			
		},

		# --- default sort direction for the sortBy options
		sortDirection = {
			_("Last Name") = asc,
			_("First Name") = asc,
			_("Birth Date") = asc,
			_("Has Note") = asc,
			CollectionSort = asc
		},

		# --- sortControlType = dropdown or list
		sortControlType = list,

#		options = {
#			selectMediaUsingRelationshipTypes = [relationshipType],
#			selectMediaUsingTypes = [objectType]
#		},
		facetGroup = people
	},

	organization = {
		displayName = _(Organizations),
		labelSingular = _("organization"),
 		labelPlural = _("organizations"),
		table = ca_entities,
		restrictToTypes = ["organization"],
		
		showLetterBarFrom = ca_entities.preferred_labels,
		showLetterBarSorts = [ca_entities.preferred_labels],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			images = {
				result_caption = "
					<small><l>^ca_entities.idno</l></small>
					<br/>
					<l>^ca_entities.preferred_labels</l>

					
					<ifdef code='ca_entities.vhh_GroupName'><br/><t>Name</t>: <unit relativeTo='ca_entities.vhh_GroupName' delimiter='<br/>'>^GN_Name <ifdef code='ca_entities.vhh_GroupName.GN_Type'>(^GN_Type)</ifdef><ifdef code='ca_entities.vhh_GroupName.GN_TempScope'>(^GN_TempScope)</ifdef></unit></ifdef>

					<ifdef code='ca_entities.vhh_Date'><br/><t>Date</t>: <unit relativeTo='ca_entities.vhh_Date' delimiter='<br/>'>^date_Date <ifdef code='ca_entities.vhh_Date.date_Type'>(^date_Type)</ifdef></unit></ifdef>
									
					<def code='ca_entities.vhh_TypeOfActivity2'><br/><t>Type of Activity</t>: <unit relativeTo='ca_entities.vhh_TypeOfActivity2' delimiter='<br/>'>^ActivityList <ifdef code='ca_entities.vhh_TypeOfActivity2.TOA_TempScope'>(^TOA_TempScope)</ifdef></unit></ifdef>

					<br/>
					<ifcount code='ca_entities.vhh_Note' min='1'><t>Has Note: yes</t> <br/></ifcount>
					<ifcount code='ca_entities.vhh_Note' max='0'><t>Has Note: no</t> <br/></ifcount>

					<t>Related objects</t>: ^ca_objects.related%returnAsCount=1&restrictToTypes=av_creation,nonav_manifestation<br/>
				",
			}, 
			list = {
				result_caption = "
					<div class='row'><div class='col-md-2'><b><t>Identifier</t></b><br/><l>^ca_entities.idno</l></div>
					<div class='col-md-2'><b><t>Name</t></b><br/><l>^ca_entities.preferred_labels</l></div>
					<div class='col-md-2'><b><t>Group Name</t></b><br/><unit relativeTo='ca_entities.vhh_GroupName' delimiter='<br/>'>^GN_Name <ifdef code='ca_entities.vhh_GroupName.GN_Type'>(^GN_Type)</ifdef><ifdef code='ca_entities.vhh_GroupName.GN_TempScope'>(^GN_TempScope)</ifdef></unit></div>
					<div class='col-md-2'><b><t>Date</t></b><br/><unit relativeTo='ca_entities.vhh_Date' delimiter='<br/>'>^date_Date <ifdef code='ca_entities.vhh_Date.date_Type'>(^date_Type)</ifdef></unit></div>
					<div class='col-md-2'><b><t>Type of Activity</t></b><br/><unit relativeTo='ca_entities.vhh_TypeOfActivity2' delimiter='<br/>'>^ActivityList <ifdef code='ca_entities.vhh_TypeOfActivity2.TOA_TempScope'>(^TOA_TempScope)</ifdef></unit></div>
					<div class='col-md-2'><ifcount code='ca_entities.vhh_Note' min='1'><t>Has Note: yes</t> <br/></ifcount><ifcount code='ca_entities.vhh_Note' max='0'><t>Has Note: no</t> <br/></ifcount><t>Related objects</t>: ^ca_objects.related%returnAsCount=1&restrictToTypes=av_creation,nonav_manifestation</div>
					</div>
				",
			}
		},
		
		sortBy = {
			_("Name") = ca_entities.preferred_labels,
			_("Date Founded") = ca_entities.vhh_Date.date_Date|date_Type=founded,
			#need date of foundation
			_("Has Note") = ca_entities.vhh_Note.vhh_NoteText,
			CollectionSort = ca_entities_x_collections.rank
		},

		# --- default sort direction for the sortBy options
		sortDirection = {
			_("Name") = asc,
			_("Date Founded") = asc,
			_("Has Note") = asc,
			CollectionSort = asc
		},

		# --- sortControlType = dropdown or list
		sortControlType = list,
		facetGroup = org
	},


	occurrences = {
		displayName = _("Events"),
		labelSingular = _("Event"),
 		labelPlural = _("Events"),
		table = ca_occurrences,
		restrictToTypes = [],
		showLetterBarFrom = ca_occurrence_labels.name,
		showLetterBarSorts = [ca_occurrence_labels.name],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			list = {
				result_caption = "
					<div class='row'><div class='col-md-3'><b><t>Identifier</t></b><br/><l>^ca_occurrences.idno</l></div>
					<div class='col-md-3'><b><t>Title</t></b><br/><l>^ca_occurrences.preferred_labels</l></div>
					<div class='col-md-3'><b><t>Event Name</t></b><br/><ifdef code='ca_occurrences.vhh_EventName'><unit relativeTo='ca_occurrences.vhh_EventName' delimiter='<br/>'>^TitleTextE</unit></ifdef></div>
					<div class='col-md-3'><b><t>Event Date</t></b><br/><ifdef code='ca_occurrences.vhh_DateEvent'><unit relativeTo='ca_occurrences.vhh_DateEvent' delimiter='<br/>'>^ca_occurrences.vhh_DateEvent</unit></ifdef></div>
					</div>
				",
			}
		},
		
		sortBy = {
			_("Name") = ca_occurrences.preferred_labels,
			_("Event Date") = ca_occurrences.vhh_DateEvent,
			CollectionSort = ca_occurrences_x_collections.rank
		},

		# --- default sort direction for the sortBy options
		sortDirection = {
			_("Name") = asc,
			_("Event Date") = asc,
			CollectionSort = asc
		},

		# --- sortControlType = dropdown or list
		sortControlType = list,
	}

	places = {
		displayName = _("Locations"),
		labelSingular = _("location"),
 		labelPlural = _("Locations"),
		table = ca_places,
		restrictToTypes = ["location"],
		#showLetterBarFrom = ca_place_labels.name,
		#showLetterBarSorts = [ca_place_labels.name],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			map = {
				data = ca_places.georeference,
				width = 100%,
				height = 600px,
				minZoomLevel = 2,
				maxZoomLevel = 18,
				display = {
					labelTemplate = <l>^ca_places.preferred_labels</l> (^ca_places.idno),
					contentTemplate = <div style='float:left; margin:0px 10px 10px 0px;'>^ca_object_representations.media.icon</div><p>^ca_places.vhh_Description</p>
				}
			},
			list = {
				result_caption = "
					<div class='row'><div class='col-md-2'><b><t>Identifier</t></b><br/><l>^ca_places.idno</l></div>
					<div class='col-md-2'><b><t>Title</t></b><br/><l>^ca_places.preferred_labels</l></div>
					<div class='col-md-2'><b><t>Location Name</t></b><br/><ifdef code='ca_places.vhh_TitlePlace.TP_Name'><unit relativeTo='ca_places.vhh_TitlePlace' delimiter='<br/>'>^ca_places.vhh_TitlePlace.TP_Name</unit></ifdef></div>
					<div class='col-md-2'><b><t>Date</t></b><br/><unit relativeTo='ca_places.vhh_Date' delimiter='<br/>'><if rule='^ca_places.vhh_Date.date_Type =~ /date of foundation/'>^date_Date <ifdef code='ca_places.vhh_Date.date_Type'>(^date_Type)</ifdef></if></unit></div>
					<div class='col-md-2'><b><t>Use Of Space</t></b><br/><ifdef code='ca_places.vhh_UseOfSpace'><unit relativeTo='ca_places.vhh_UseOfSpace' delimiter='<br/>'>^UOS_TypeList</unit></ifdef></div>
					<div class='col-md-2'><b><t>Province/State</t></b><br/><unit relativeTo='ca_places.hierarchy' delimiter='<br/>' ><if rule='^ca_places.type_id =~ /state/'>^ca_places.preferred_labels</if><if rule='^ca_places.type_id =~ /Bundesland/'>^ca_places.preferred_labels</if></unit></div>
					</div>
				",
			},
			
		},
		
		sortBy = {
			_("Title") = ca_places.preferred_labels,
			_("Date Founded") = "ca_places.vhh_Date.date_Date|date_Type=founded_place,founded",
			#need date of foundation
			_("Use Of Space") = ca_places.vhh_UseOfSpace.UOS_TypeList,
			CollectionSort = ca_places_x_collections.rank
		},

		# --- default sort direction for the sortBy options
		sortDirection = {
			_("Title") = asc,
			_("Date Founded") = asc,
			_("Use Of Space") = asc,
			CollectionSort = asc
		},

		# --- sortControlType = dropdown or list
		sortControlType = list,
	},

	objects = {
		displayName = _(Related Films, Texts and Images),
		labelSingular = _("Related Films, Texts and Images"),
 		labelPlural = _("Related Films, Texts and Images"),
		table = ca_objects,
		
		restrictToTypes = ["av_creation", "nonav_manifestation"],
		#dontExpandTypesHierarchically = true,
		availableFacets = [],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			images = {
				result_caption = "<small><l>^ca_objects.idno</l></small><br/><l>^ca_objects.preferred_labels</l>",
			},
			list = {
				result_caption = "<small><l>^ca_objects.idno</l></small><br/><l>^ca_objects.preferred_labels</l>",
			},
		},

		sortBy = {
			_("Title") = ca_objects.preferred_labels,
			_("Publication Date") = "ca_objects.vhh_Date.date_Date|date_Type=published,published_first",
			CollectionSort = "ca_objects_x_collections.rank"
		
		},

		# --- default sort direction for the sortBy options
		sortDirection = {
			_("Title") = asc,
			_("Publication Date") = desc,
			CollectionSort = asc
		},

		# --- sortControlType = dropdown or list
		sortControlType = list,

		dontShowInBrowseMenu = 1
	},

	films = {
		displayName = _("Films"),
		labelSingular = _("film"),
 		labelPlural = _("films"),
		table = ca_objects,
		
		restrictToTypes = ["av_creation"],
		#dontExpandTypesHierarchically = true,
		availableFacets = [],
		
		showLetterBarFrom = ca_objects.preferred_labels.name_sort,
		showLetterBarSorts = [ca_objects.preferred_labels.name_sort],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			images = {
				result_caption = "
					<small><l>^ca_objects.idno</l></small>
					<br/><l>^ca_objects.preferred_labels</l>
					<ifdef code='ca_objects.vhh_Date'><br/><t>Date</t>: <unit relativeTo='ca_objects.vhh_Date' delimiter='<br/>'>^date_Date (^date_Type)</unit></ifdef>
					<ifdef code='ca_objects.vhh_Identifier'><br/><t>External Identifier</t>: <unit relativeTo='ca_objects.vhh_Identifier' delimiter='<br/>'><ifdef code='ca_objects.vhh_Identifier.IdentifierScheme'>^IdentifierScheme</ifdef><if rule='^ca_objects.vhh_Identifier.IdentifierValue !~ /\\?/'> (^ca_objects.vhh_Identifier.IdentifierValue)</if></unit></ifdef>
					<ifdef code='ca_objects.vhh_CountryOfReference'><br/><t>Country of Production</t>: <unit relativeTo='ca_objects.vhh_CountryOfReference' delimiter='<br/>'>^CountryPlace (^Reference)</unit></ifdef>
				",
			},
			list = {
				result_caption = "
					<div class='row'><div class='col-md-2'><b><t>Identifier</t></b><br/><l>^ca_objects.idno</l></div>
					<div class='col-md-4'><b><t>Title</t></b><br/><l>^ca_objects.preferred_labels</l></div>
					<div class='col-md-2'><b><t>Date</t></b><br/><ifdef code='ca_objects.vhh_Date'><unit relativeTo='ca_objects.vhh_Date' delimiter='<br/>'>^date_Date (^date_Type)</unit></ifdef></div>
					<div class='col-md-2'><b><t>External Identifier</t></b><br/><ifdef code='ca_objects.vhh_Identifier'><unit relativeTo='ca_objects.vhh_Identifier' delimiter='<br/>'><ifdef code='ca_objects.vhh_Identifier.IdentifierScheme'>^IdentifierScheme</ifdef><if rule='^ca_objects.vhh_Identifier.IdentifierValue !~ /\\?/'> (^ca_objects.vhh_Identifier.IdentifierValue)</if></unit></ifdef></div>
					<div class='col-md-2'><b><t>Country of Production</t></b><br/><ifdef code='ca_objects.vhh_CountryOfReference'><unit relativeTo='ca_objects.vhh_CountryOfReference' delimiter='<br/>'>^CountryPlace (^Reference)</unit></ifdef></div>
					</div>
				",
			},
		},

		sortBy = {
			_("Title") = ca_objects.preferred_labels.name_sort,
			_("Publication Date") = "ca_objects.vhh_Date.date_Date|date_Type=published,published_first",
			_("Media Available") = ca_object_representations.access,
			_("Country Of Production") = ca_objects.vhh_CountryOfReference.CountryPlace,
			CollectionSort = "ca_objects_x_collections.rank"
		},

		# --- default sort direction for the sortBy options
		sortDirection = {
			_("Title") = asc,
			_("Publication Date") = asc,
			_("Media Available") = desc,
			_("Country Of Production") = asc,
			CollectionSort = asc
		},

		# --- sortControlType = dropdown or list
		sortControlType = list,
	},

	images = {
		displayName = _(Images),
		labelSingular = _("image"),
 		labelPlural = _("images"),
		table = ca_objects,
		
		restrictToTypes = ["nonav_manifestation"],
		#dontExpandTypesHierarchically = true,
		availableFacets = [],

		baseCriteria = {
			media_type = [still_image_photo, still_image_other]
		},
		showBaseCriteria = 0,
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			images = {
				result_caption = "
					<small><l>^ca_objects.idno</l></small>
					<br/>
					<l>^ca_objects.preferred_labels</l>

					
					<ifdef code='ca_objects.vhh_Date'><br/><t>Date</t>: <unit relativeTo='ca_objects.vhh_Date' delimiter='<br/>'>^date_Date (^date_Type)</unit></ifdef>

					
					<ifdef code='ca_objects.vhh_GenreNonAV'><br/><t>Genre (Non-AV)</t>: <unit relativeTo='ca_objects.vhh_GenreNonAV' delimiter='<br/>'>^GenreNonAV_List</unit></ifdef>

					
					<ifcount code='ca_entities.related' min='1'><br/><t>Related People/Organizations</t>: <unit relativeTo='ca_entities.related' delimiter='<br/>' restrictToTypes=''><l>^ca_entities.preferred_labels.displayname</l> (^relationship_typename)</unit></ifcount>
				",
			},
			list = {
				result_caption = "
					<div class='row'><div class='col-md-2'><b><t>Identifier</t></b><br/><l>^ca_objects.idno</l></div>
					<div class='col-md-4'><b><t>Title</t></b><br/><l>^ca_objects.preferred_labels</l></div>
					<div class='col-md-2'><b><t>Date</t></b><br/><ifdef code='ca_objects.vhh_Date'><unit relativeTo='ca_objects.vhh_Date' delimiter='<br/>'>^date_Date (^date_Type)</unit></ifdef></div>
					<div class='col-md-2'><b><t>Genre (Non-AV)</t></b><br/><unit relativeTo='ca_objects.vhh_GenreNonAV' delimiter='<br/>'>^GenreNonAV_List</unit></div>
					<div class='col-md-2'><b><t>Related People/Organizations</t></b><br/><unit relativeTo='ca_entities.related' delimiter='<br/>' restrictToTypes=''><l>^ca_entities.preferred_labels.displayname</l> (^relationship_typename)</unit></div>
					</div>
				",
			},
		},
		sortBy = {
			_("Title") = ca_objects.preferred_labels,
			_("Publication Date") = "ca_objects.vhh_Date.date_Date|date_Type=published,published_first",
			CollectionSort = "ca_objects_x_collections.rank"
		},

		# --- default sort direction for the sortBy options
		sortDirection = {
			_("Title") = asc,
			_("Publication Date") = asc,
			CollectionSort = asc
		},

		# --- sortControlType = dropdown or list
		sortControlType = list,
	},

	texts = {
		displayName = _(Texts),
		labelSingular = _("text"),
 		labelPlural = _("texts"),
		table = ca_objects,
		
		restrictToTypes = ["nonav_manifestation"],
		#dontExpandTypesHierarchically = true,
		availableFacets = [],
		
		baseCriteria = {
			media_type = [text_media,imagetext]
			
		},
		showBaseCriteria = 0,
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			images = {
				result_caption = "
					<small><l>^ca_objects.idno</l></small>
					<br/>
					<l>^ca_objects.preferred_labels</l>

					
					<ifdef code='ca_objects.vhh_Date'><br/><t>Date</t>: <unit relativeTo='ca_objects.vhh_Date' delimiter='<br/>'>^date_Date (^date_Type)</unit></ifdef>

					
					<ifdef code='ca_objects.vhh_GenreNonAV'><br/><t>Genre (Non-AV)</t>: <unit relativeTo='ca_objects.vhh_GenreNonAV' delimiter='<br/>'>^GenreNonAV_List</unit></ifdef>

					
					<ifcount code='ca_entities.related' min='1'><br/><t>Related People/Organizations</t>: <unit relativeTo='ca_entities.related' delimiter='<br/>' restrictToTypes=''><l>^ca_entities.preferred_labels.displayname</l> (^relationship_typename)</unit></ifcount>
				",
			},
			list = {
				result_caption = "
					<div class='row'><div class='col-md-2'><b><t>Identifier</t></b><br/><l>^ca_objects.idno</l></div>
					<div class='col-md-4'><b><t>Title</t></b><br/><l>^ca_objects.preferred_labels</l></div>
					<div class='col-md-2'><b><t>Date</t></b><br/><ifdef code='ca_objects.vhh_Date'><unit relativeTo='ca_objects.vhh_Date' delimiter='<br/>'>^date_Date (^date_Type)</unit></ifdef></div>
					<div class='col-md-2'><b><t>Genre (Non-AV)</t></b><br/><unit relativeTo='ca_objects.vhh_GenreNonAV' delimiter='<br/>'>^GenreNonAV_List</unit></div>
					<div class='col-md-2'><b><t>Related People/Organizations</t></b><br/><unit relativeTo='ca_entities.related' delimiter='<br/>' restrictToTypes=''><l>^ca_entities.preferred_labels.displayname</l> (^relationship_typename)</unit></div>
					</div>",
			},
		},
		sortBy = {
			_("Title") = ca_objects.preferred_labels,
			_("Publication Date") = "ca_objects.vhh_Date.date_Date|date_Type=published,published_first",
			CollectionSort = "ca_objects_x_collections.rank"
		},

		# --- default sort direction for the sortBy options
		sortDirection = {
			_("Title") = asc,
			_("Publication Date") = asc,
			CollectionSort = asc
		},

		# --- sortControlType = dropdown or list
		sortControlType = list,
	},

	case-studies = {
		displayName = _(Case Studies),
		labelSingular = _("case studies"),
 		labelPlural = _("case studies"),
		table = ca_collections,
		restrictToTypes = [],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = { 
			images = {
				result_caption = "<small><l>^ca_collections.idno</l></small><br/><l>^ca_collections.preferred_labels</l>",
			}, 
			list = {
				result_caption = "<div class='row'><div class='col-md-6'><b><t>Identifier</t></b><br/><l>^ca_collections.idno</l></div>
									<div class='col-md-6'><b><t>Title</t></b><br/><l>^ca_collections.preferred_labels</l></div>
								</div>",
			}
		},
		
		sortBy = {
			_("Name") = ca_collection_labels.name_sort
		},

		# --- sortControlType = dropdown or list
		sortControlType = list,
		
		dontShowInBrowseMenu = 1
	},


}

views = {
	images = {
		icon = glyphicon-th
	},
	list = {
		icon = glyphicon-list
	},
	timeline = {
		icon = glyphicon-time
	},
	map = {
		icon = glyphicon-globe
	}
}

# --- text for Browse menu item, default is "Browse" 
browse_menu_button_text = 

# --- default number of results per page/ajax load
defaultHitsPerBlock = 36

# --- set to list to show dropdown with links to each configured browse or a single Browse nav link when one browse is configured
browseMenuFormat = list

# --- set if you don't want the browse menu to be preloaded with facets for the first browse type on open
dontPreloadBrowseMenu = 1

# --- refine_col_class -> boostrap col class to assign to refine col - defaults to: col-sm-8 col-md-8 col-lg-8
result_col_class =

# --- refine_col_class -> boostrap col class to assign to refine col - defaults to: col-sm-4 col-md-3 col-md-offset-1 col-lg-3 col-lg-offset-1
refine_col_class =


# --------------------------------------------------------------------
# Configuration for objects browse
ca_objects = {
	name = _("Objects"),
	facets = {

		# type_facet = {
		# 	type = fieldList,
		# 	field = type_id,
			
		# 	group_mode = none,
		# 	multiple = 1,

		# 	label_singular = _("object type"),
		# 	label_plural = _("object types"),
		# 	description = _("Find objects according to the Types defined in your collection profile."),
		# },
		
		entity_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_entities,
			relationship_table = ca_objects_x_entities,
			restrict_to_types = [],
			
			individual_group_display = 1,
			multiple = 1,
			
			groupings = {
				label = _("Name"), 
				relationship_types = _("Role"),
				type = _("Type")
			},
			group_mode = alphabetical,
			order_by_label_fields = [surname, forename, middlename],
			
			natural_sort = 0,
			indefinite_article = an,
			label_singular = _("People/Organizations"),
			label_plural = _("People/Organizations"),
			description = _("Find objects according to the People/Organizations associated with your records.  You can browse by name&#44; role&#44; or entity type according to your configuration."),
		},
						
		collection_facet = {
			type = authority,
			table = ca_collections,
			relationship_table = ca_objects_x_collections,
			restrict_to_types = [],
			multiple = 1,

			natural_sort = 0,
			group_mode = none,
			order_by_label_fields = [name_sort],

			label_singular = _("Case studies"),
			label_plural = _("Case Studies"),
			description = _("Find objects according to the Collections they belong to."),
		},
		archive_facet = {
			type = attribute,
			element_code = ca_objects.vhh_Identifier.IdentifierScheme,
			group_mode = none,
			multiple = 1,
			label_singular = _("Archive"),
			label_plural = _("Archives")
		},
		country_facet = {
			type = attribute,
			element_code = ca_objects.vhh_CountryOfReference.CountryPlace,
			group_mode = none,
			multiple = 1,
			label_singular = _("Country"),
			label_plural = _("Countries")
		},
		has_media_facet = {
			type = has,
			
			table = ca_object_representations,
			relationship_table = ca_objects_x_object_representations,
			restrict_to_types = [],
			restrict_to_relationship_types = [],
			
			label_yes = _("has image"),
			label_no = _("does not have image"),
			
			single_value = 1,
			
			label_singular = _("has image"),
			label_plural = _("has image"),
			description = _("Find objects that have associated media.")
		},
		media_class = {
			type = field,
			field = media_class,
			
			group_mode = none,
			relative_to = ca_object_representations,
			label_singular = _("Has Video or Image"),
			label_plural = _("Has Video or Image")
		},
		media_type = {
			type = attribute,
			element_code = ca_objects.vhh_MediaType.MT_List,
			group_mode = none,
			multiple = 1,
			requires = x,
			label_singular = _("Media Type"),
			label_plural = _("Media Types")
		},
		has_sound = {
			type = attribute,
			element_code = ca_objects.vhh_Sound.snd_HasSound,
			group_mode = none,
			relative_to = ca_objects,

			label_singular = _("Sound"),
			label_plural = _("Sound")
		},
		has_color = {
			type = attribute,
			element_code = ca_objects.vhh_ColorAV.colAV_HasColor,
			group_mode = none,
			relative_to = ca_objects,

			label_singular = _("Color"),
			label_plural = _("Color")
		},
		publication_date_facet = {
			type = normalizedDates,
			element_code = ca_objects.vhh_Date.date_Date,
			normalization = decades,
			
			filter_by = ca_objects.vhh_Date.date_Type,
			filter_values = [published, published_first],
			
			minimum_date = 1700,
			# maximum_date = 2050,

			multiple = 1,

			group_mode = none,
			
			description = _("Find object by decade of publication."),
			
			label_singular = _("Date of Publication"),
			label_plural = _("Date of Publication")
		},

		# is_online_facet = {

		# }

		rights_facet = {
			type = attribute,
			element_code = ca_objects.vhh_RightsStatus2.vhh_RightsStatusList,
			
			multiple = 1,
			
			label_singular = _("Rights"),
			label_plural = _("Rights"),
		},

		genre_av_media_facet = {
			type = attribute,
			element_code = ca_objects.vhh_GenreAV.GenreAV_List,
			multiple = 1,
			order_by_label_fields = [name],
			group_mode = alphabetical,
			
			
			label_singular = _("Genre of AV Media"),
			label_plural = _("Genre of AV Media"),
		},

		genre_non_av_media_facet = {
			type = attribute,
			element_code = ca_objects.vhh_GenreNonAV.GenreNonAV_List,
			
			multiple = 1,
			
			label_singular = _("Genre of Non AV Media"),
			label_plural = _("Genre of Non AV Media"),
		},

		country_of_production = {
			type = attribute,
			element_code = ca_objects.vhh_CountryOfReference.CountryPlace,
			multiple = 1,
			
			label_singular = _("country of production"),
			label_plural = _("countries of production"),
		},
		field_of_knowledge = {
			type = attribute,
			element_code = ca_objects.edu_KnowledgeField.edu_KnowlegdeFieldType,
			multiple = 1,
			label_singular = _("Field of Knowledge"),
			label_plural = _("Field of Knowledge"),
		}
		education_type = {
			type = attribute,
			element_code = ca_objects.edu_EducationType.edu_EducationTypeType,
			multiple = 1,
			label_singular = _("Education Type"),
			label_plural = _("Education Type"),
			description = _("Find films by Education Type."),
		},
		devices = {
			type = attribute,
			element_code = ca_objects.edu_FilmDevices,

			multiple = 1,
			label_singular = _("Device"),
			label_plural = _("Devices"),
			description = _("Find films by Device Type."),
		},
		related_objects = {
			type = authority,		
			table = ca_objects,
			relationship_table = ca_objects_x_objects,
			
			group_mode = alphabetical,
			multiple = 1,

			label_singular = _("Related Objects"),
			label_plural = _("Related Objects"),
			requires = x
		},
	}
}

# --------------------------------------------------------------------
# Configuration for entity browse
ca_entities = {
	name = _("Entities"),
	facets = {

		type_of_activity_facet = {
			type = attribute,
			element_code = ca_entities.vhh_TypeOfActivity2.ActivityList,
			
			group_mode = none,
			multiple = 1,
			
			label_singular = _("Type of Activity"),
			label_plural = _("Types of Activities"),
			description = _("Find entities by type of activity."),
			facet_groups = [people, org]
		},

		knowledge_field_of_activity = {
			type = attribute,
			element_code = ca_entities.edu_KnowledgeFieldAct.edu_KnowledgeFieldActType,

			multiple = 1,
			group_mode = none,

			label_singular = _("Knowledge Field of Activity"),
			label_plural = _("Knowledge Field of Activity"),
			description = _("Find organizations by Knowledge Field of Activity."),
			facet_groups = [org]
		},

		educational_organization_type = {
			type = attribute,
			element_code = ca_entities.edu_EduOrgType.edu_EduOrgTypeType,

			multiple = 1,
			group_mode = none,

			label_singular = _("Educational Organization Type"),
			label_plural = _("Educational Organization Type"),
			description = _("Find organizations by Educational Organization Type."),
			facet_groups = [org]
		},

		object_facet = {
			type = authority,		
			table = ca_objects,
			relationship_table = ca_entities_x_objects,
			
			group_mode = alphabetical,
			multiple = 1,
			natural_sort = 0,
			order_by_label_fields = [name_sort],

			label_singular = _("Objects"),
			label_plural = _("Objects"),
			facet_groups = [people, org]
		},

		collection_facet = {
			type = authority,
			table = ca_collections,
			relationship_table = ca_entities_x_collections,
			restrict_to_types = [],
			multiple = 1,
			natural_sort = 0,
			order_by_label_fields = [name_sort],

			group_mode = none,

			label_singular = _("case studies"),
			label_plural = _("case studies"),
			description = _("Find entities according to the Collections they belong to."),
			facet_groups = [people, org]
		},

		place_facet = {
			type = authority,
			table = ca_places,
			relationship_table = ca_entities_x_places,
			restrict_to_types = [],
			multiple = 1,
			natural_sort = 0,
			order_by_label_fields = [name_sort],

			group_mode = none,

			label_singular = _("Places"),
			label_plural = _("Places"),
			description = _("Find entities according to the places they belong to."),
			facet_groups = [people, org]
		},

		# date_of_birth_facet = {
		# 	type = normalizedDates,
		# 	element_code = ca_entities.vhh_Date.date_Date,
		# 	normalization = decades,
			
		# 	restrictToTypes = [birth],
		# 	group_mode = none,
			
		# 	description = _("Find person by decade of birth."),
			
		# 	label_singular = _("Date of Birth"),
		# 	label_plural = _("Date of Birth"),
		# 	facet_groups = [people]
		# },

		# date_of_death_facet = {
		# 	type = normalizedDates,
		# 	element_code = ca_entities.vhh_Date.date_Date,
		# 	normalization = decades,
		
		# 	restrictToTypes = [death],
		# 	group_mode = none,
			
		# 	description = _("Find person by decade of death."),
			
		# 	label_singular = _("Date of Death"),
		# 	label_plural = _("Date of Death"),
		# 	facet_groups = [people]
		# },

		date_of_org = {
			type = normalizedDates,
			element_code = ca_entities.vhh_Date.date_Date,
			normalization = decades,
	
			restrictToTypes = [founded],
			group_mode = none,
			
			description = _("Find organization by date"),
			
			label_singular = _("Date"),
			label_plural = _("Dates"),
			facet_groups = [org]
		},

		has_biography_facet = {
			type = has,
			
			table = ca_entities,
			element_code = vhh_Description,
			
			label_yes = _("has biography"),
			label_no = _("does not have biography"),
			
			single_value = 1,
			
			label_singular = _("biography"),
			label_plural = _("biography"),
			facet_groups = [people]
		},

		has_history_facet = {
			type = has,
			
			table = ca_entities,
			element_code = vhh_Description,
			
			label_yes = _("has historical overview"),
			label_no = _("does not have historical overview"),
			
			single_value = 1,
			
			label_singular = _("historical overview"),
			label_plural = _("historical overview"),
			facet_groups = [org]
		},

		has_note_facet = {
			type = has,
			
			table = ca_entities,
			element_code = vhh_Note,
			
			label_yes = _("has note"),
			label_no = _("does not have note"),
			
			single_value = 1,
			
			label_singular = _("has note"),
			label_plural = _("has notes"),
			facet_groups = [people, org]
		},

		has_media_facet = {
			type = has,
			
			table = ca_object_representations,
			relationship_table = ca_entities_x_object_representations,
			restrict_to_types = [],
			restrict_to_relationship_types = [],
			
			label_yes = _("has image"),
			label_no = _("does not have image"),
			
			single_value = 1,
			
			label_singular = _("has image"),
			label_plural = _("has image"),
			description = _("Find objects that have associated media."),
			facet_groups = [people, org]
		},
	}
}

# --------------------------------------------------------------------
# Configuration for events browse
ca_occurrences = {
	name = _("Occurrences"),

	facets = {

		object_facet = {
			type = authority,		
			table = ca_objects,
			relationship_table = ca_occurrences_x_objects,
			
			group_mode = alphabetical,
			multiple = 1,
			natural_sort = 0,
			order_by_label_fields = [name_sort],

			label_singular = _("Objects"),
			label_plural = _("Objects")
		},

		collection_facet = {
			type = authority,
			table = ca_collections,
			relationship_table = ca_occurrences_x_collections,
			restrict_to_types = [],
			multiple = 1,
			natural_sort = 0,
			order_by_label_fields = [name_sort],

			group_mode = none,

			label_singular = _("case studies"),
			label_plural = _("case studies"),
			description = _("Find events according to the Collections they belong to."),
		},

		entity_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_entities,
			relationship_table = ca_occurrences_x_entities,
			restrict_to_types = [],
			
			individual_group_display = 1,
			multiple = 1,
			
			# groupings = {
			# 	label = _("Name"), 
			# 	relationship_types = _("Role"),
			# 	type = _("Type")
			# },
			group_mode = alphabetical,
			natural_sort = 0,
			order_by_label_fields = [surname, forename, middlename],
			
			# indefinite_article = an,
			label_singular = _("people"),
			label_plural = _("people"),
			description = _("Find occurrences according to the people associated with your records."),
		},

		place_facet = {
			type = authority,
			table = ca_places,
			relationship_table = ca_occurrences_x_places,
			restrict_to_types = [],
			multiple = 1,
			natural_sort = 0,
			order_by_label_fields = [name_sort],

			group_mode = none,

			label_singular = _("Places"),
			label_plural = _("Places"),
			description = _("Find occurrences according to the places they belong to."),
		},

		event_date_facet = {
			type = normalizedDates,
			element_code = ca_occurrences.vhh_DateEvent,
			normalization = decades,
	
			# restrictToTypes = [founded],
			group_mode = none,
			
			description = _("Find events by decade of event."),
			
			label_singular = _("Event Date"),
			label_plural = _("Event Date")
		},
		edu_EducationTypeType = {
			type = attribute,
			element_code = ca_occurrences.edu_EducationType.edu_EducationTypeType,

			multiple = 1,
			group_mode = none,

			label_singular = _("Education Type"),
			label_plural = _("Education Types")
		},
		edu_KnowlegdeFieldType = {
			type = attribute,
			element_code = ca_occurrences.edu_KnowledgeField.edu_KnowlegdeFieldType,

			multiple = 1,
			group_mode = none,

			label_singular = _("Field of Knowledge"),
			label_plural = _("Fields of Knowledge")
		},
		has_description_facet = {
			type = has,
			
			table = ca_occurrences,
			element_code = vhh_Description,
			
			label_yes = _("has description"),
			label_no = _("does not have description"),
			
			single_value = 1,
			
			label_singular = _("has description"),
			label_plural = _("has descriptions")
		},
		has_note_facet = {
			type = has,
			
			table = ca_occurrences,
			element_code = vhh_Note,
			
			label_yes = _("has note"),
			label_no = _("does not have note"),
			
			single_value = 1,
			
			label_singular = _("has note"),
			label_plural = _("has notes"),
			facet_groups = [people, org]
		},
		has_media_facet = {
			type = has,
			
			table = ca_object_representations,
			relationship_table = ca_occurrences_x_object_representations,
			restrict_to_types = [],
			restrict_to_relationship_types = [],
			
			label_yes = _("has image"),
			label_no = _("does not have image"),
			
			single_value = 1,
			
			label_singular = _("has image"),
			label_plural = _("has image"),
			description = _("Find objects that have associated media."),
		},
	}
}

# --------------------------------------------------------------------
# Configuration for locations browse
ca_places = {
	name = _("Places"),

	facets = {

		object_facet = {
			type = authority,		
			table = ca_objects,
			relationship_table = ca_places_x_objects,
			
			group_mode = alphabetical,
			multiple = 1,
			natural_sort = 0,
			order_by_label_fields = [name_sort],

			label_singular = _("Objects"),
			label_plural = _("Objects")
		},

		collection_facet = {
			type = authority,
			table = ca_collections,
			relationship_table = ca_places_x_collections,
			restrict_to_types = [],
			multiple = 1,
			natural_sort = 0,
			order_by_label_fields = [name_sort],

			group_mode = none,

			label_singular = _("Case studies"),
			label_plural = _("Case Studies"),
			description = _("Find places according to the Collections they belong to."),
		},

		entity_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_entities,
			relationship_table = ca_places_x_entities,
			restrict_to_types = [],
			
			individual_group_display = 1,
			multiple = 1,
			
			# groupings = {
			# 	label = _("Name"), 
			# 	relationship_types = _("Role"),
			# 	type = _("Type")
			# },
			group_mode = alphabetical,
			natural_sort = 0,
			order_by_label_fields = [surname, forename, middlename],
			
			# indefinite_article = an,
			label_singular = _("people"),
			label_plural = _("people"),
			description = _("Find places according to the people associated with your records."),
		},

		use_of_space_facet = {
			type = attribute,
			element_code = ca_places.vhh_UseOfSpace.UOS_TypeList,
			
			group_mode = none,
			multiple = 1,

			label_singular = _("Use of Space"),
			label_plural = _("Use of Space"),
			description = _("Find places by use of space."),
		},

		educational_place_type = {
			type = attribute,
			element_code = ca_places.edu_EduPlaceType.edu_EduPlaceTypeType,

			multiple = 1,
			group_mode = none,

			label_singular = _("Educational Place Type"),
			label_plural = _("Educational Place Type"),
			description = _("Find locations by Educational Place Type."),
		},

#		province_state_facet = {
#			type = attribute,
#			element_code = ca_places.vhh_Address,
			
#			group_mode = none,
#			multiple = 1,

#			label_singular = _("Province/State"),
#			label_plural = _("Province/State"),
#			description = _("Find places by province/state."),
#		},
		province_state_facet = {
			type = label,
			restrict_to_types = [state],
			preferred_labels_only = 1,
			
			group_mode = alphabetical,
			multiple = 1,
			
			label_singular = _("Province/State"),
			label_plural = _("Province/States"),
		},
		has_media_facet = {
			type = has,
			
			table = ca_object_representations,
			relationship_table = ca_occurrences_x_object_representations,
			restrict_to_types = [],
			restrict_to_relationship_types = [],
			
			label_yes = _("has image"),
			label_no = _("does not have image"),
			
			single_value = 1,
			
			label_singular = _("has image"),
			label_plural = _("has image"),
			description = _("Find locations that have associated media."),
		},

	}
}

# --------------------------------------------------------------------
# Configuration for objects browse
ca_collections = {
	name = _("Case Studies"),
	facets = {

#		type_facet = {
#			type = fieldList,
#			field = type_id,
			
#			group_mode = none,
#			multiple = 1,

#			label_singular = _("case studies type"),
#			label_plural = _("case studies types"),
#			description = _("Find collections according to the types defined in your collection profile."),
#		},

		# entity_facet = {
		# 	# 'type' can equal authority, attribute, fieldList, normalizedDates
		# 	type = authority,		
		# 	table = ca_entities,
		# 	relationship_table = ca_collections_x_entities,
		# 	restrict_to_types = [],
			
		# 	individual_group_display = 1,
		# 	multiple = 1,
			
		# 	groupings = {
		# 		label = _("Name"), 
		# 		relationship_types = _("Role"),
		# 		type = _("Type")
		# 	},
		# 	group_mode = alphabetical,
		# 	order_by_label_fields = [surname, forename, middlename],
			
		# 	indefinite_article = an,
		# 	label_singular = _("person/organization"),
		# 	label_plural = _("people/organizations"),
		# 	description = _("Find collections according to the people associated with your records.  You can browse by name&#44; role&#44; or entity type according to your configuration."),
		# },

#		place_facet = {
#			type = authority,
#			table = ca_places,
#			relationship_table = ca_collections_x_places,
#			restrict_to_types = [],
#			multiple = 1,

#			group_mode = none,

#			label_singular = _("Place"),
#			label_plural = _("Places"),
#			description = _("Find collections according to the places they belong to."),
#		},

#		event_facet = {
#			type = authority,
#			table = ca_occurrences,
#			relationship_table = ca_collections_x_occurrences,
#			restrict_to_types = [],
#			multiple = 1,

#			group_mode = none,

#			label_singular = _("Event"),
#			label_plural = _("Events"),
#			description = _("Find collections according to the places they belong to."),
#		},		
	}
}