cache_timeout = 0

#
# 
#
browseTypes = {
	objects = {
		displayName = _(Objects),
		labelSingular = _("Object"),
 		labelPlural = _("Objects"),
		table = ca_objects,
		
		restrictToTypes = [],
		#dontExpandTypesHierarchically = true,
		availableFacets = [],
		excludeFieldsFromSearch = [ca_object_representations.media_content],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			images = {},
			list = {},
		},
		sortBy = {
			Identifier = ca_objects.idno,
			Title = ca_object_labels.name
		},
		# --- default sort direction for the sortBy options
		sortDirection = {
			Identifier = asc,
			Title = desc
		},
		# --- sortControlType = dropdown or list
		sortControlType = list,
#		options = {
#			selectMediaUsingRelationshipTypes = [relationshipType],
#			selectMediaUsingTypes = [objectType],
#			extendedInformationTemplate = ^ca_objects.description
#		}
	},
	topicObjects = {
		displayName = _(Objects),
		labelSingular = _("Object"),
 		labelPlural = _("Objects"),
		table = ca_objects,
		
		restrictToTypes = [],
		#dontExpandTypesHierarchically = true,
		availableFacets = [],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			images = {},
			list = {},
		},
		sortBy = {
			Identifier = ca_objects.idno,
			Title = ca_object_labels.name
		},
		# --- default sort direction for the sortBy options
		sortDirection = {
			Identifier = asc,
			Title = desc
		},
		# --- sortControlType = dropdown or list
		sortControlType = list,
#		options = {
#			selectMediaUsingRelationshipTypes = [relationshipType],
#			selectMediaUsingTypes = [objectType],
#			extendedInformationTemplate = ^ca_objects.description
#		}
	},
	collections = {
		displayName = _(Series),
		labelSingular = _("series"),
 		labelPlural = _("series"),
		table = ca_collections,
		restrictToTypes = [],
		showLetterBarFrom = ca_collection_labels.name,
		showLetterBarSorts = [ca_collection_labels.name],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			list = {}
		},
		
		sortBy = {
			Relevance = _natural,
			Identifier = ca_collections.idno,
			Series = ca_collection_labels.name
		},
		# --- sortControlType = dropdown or list
		sortControlType = list,
#		options = {
#			selectMediaUsingRelationshipTypes = [relationshipType],
#			selectMediaUsingTypes = [objectType]
#		}
	}
}
ca_collections = {
	name = _("Collections"),
	facets = {
		type_facet = {
			type = fieldList,
			field = type_id,
			
			group_mode = none,

			label_singular = _("type"),
			label_plural = _("types")
		},	
		
#		title_facet = {
#			type = label,
#			restrict_to_types = [],
#			preferred_labels_only = 1,
#			
#			group_mode = alphabetical,
#			
#			label_singular = _("Collection"),
#			label_plural = _("Collections")
#		},	
		entity_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_entities,
			relationship_table = ca_entities_x_collections,
			restrict_to_types = [],
			
			group_mode = hierarchical,
			deferred_load = 1,
			
			order_by_label_fields = [surname, forename, middlename],
			
			indefinite_article = an,
			label_singular = _("creator"),
			label_plural = _("creators")
		},
		place_facet = {
			type = authority,
			table = ca_places,
			relationship_table = ca_places_x_collections,
			restrict_to_types = [],
			
			group_mode = alphabetical,
			
			label_singular = _("place"),
			label_plural = _("places")
		},
# --- they have not added date field for colleciton records yet
#		century_facet = {
#			type = normalizedDates,
#			element_code = dates_value,
#			normalization = centuries,
#			relativeTo = ca_objects,
#			
#			group_mode = none,
#			
#			label_singular = _("century"),
#			label_plural = _("centuries"),
#			description = _("Find objects according to associated dates.  You can normalize these dates by year&#44; decade or century."),			
#		},
#		decade_facet = {
#			type = normalizedDates,
#			element_code = dates_value,
#			normalization = decades,
#			relativeTo = ca_objects,
#			requires = century_facet,
#			
#			group_mode = none,
#			
#			label_singular = _("decade"),
#			label_plural = _("decades")		
#		},
#		year_facet = {
#			type = normalizedDates,
#			element_code = dates_value,
#			normalization = years,
#			requires = decade_facet,
#			relativeTo = ca_objects,
#			
#			group_mode = none,
#			
#			label_singular = _("year"),
#			label_plural = _("years")			
#		}
	}
}
ca_objects = {
	name = _("Objects"),
	facets = {
		topic_collection_facet = {
			type = authority,
			table = ca_collections,
			relationship_table = ca_objects_x_collections,
			restrict_to_types = [topic_collection],
			
			group_mode = alphabetical,
		
			label_singular = _("topic"),
			label_plural = _("topics"),
			description = _("Find records by topic collection."),
		},
		collection_facet = {
			type = authority,
			table = ca_collections,
			relationship_table = ca_objects_x_collections,
			#restrict_to_types = [external],
			restrict_to_types = [],
			group_mode = alphabetical,
			order_by_label_fields = [name],

			label_singular = _("series"),
			label_plural = _("series"),
			description = _("Find records by record series."),
		},		
		entity_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_entities,
			relationship_table = ca_entities_x_collections,
			relative_to = ca_collections,
			restrict_to_types = [],
			
			individual_group_display = 1,
			
			groupings = {
				label = _("Name"), 
				relationship_types = _("Role"),
				type = _("Type")
			},
			group_mode = hierarchical,
			deferred_load = 1,
			order_by_label_fields = [surname, forename, middlename],
			
			indefinite_article = an,
			label_singular = _("creator"),
			label_plural = _("creators"),
			description = _("Find objects according to the people associated with your records.  You can browse by name&#44; role&#44; or entity type according to your configuration."),
		},
		century_facet = {
			type = normalizedDates,
			element_code = date_original,
			normalization = centuries,
			
			group_mode = none,
			
			label_singular = _("century"),
			label_plural = _("centuries"),
			description = _("Find objects according to associated dates.  You can normalize these dates by year&#44; decade or century."),			
		},
		decade_facet = {
			type = normalizedDates,
			element_code = date_original,
			normalization = decades,
			requires = century_facet,

			group_mode = none,

			label_singular = _("decade"),
			label_plural = _("decades"),
			description = _("Find objects according to associated dates.  You can normalize these dates by year&#44; decade or century."),			
		},
		year_facet = {
			type = normalizedDates,
			element_code = date_original,
			normalization = years,
			requires = decade_facet,
			
			group_mode = none,

			label_singular = _("year"),
			label_plural = _("years"),
			description = _("Find objects according to associated dates.  You can normalize these dates by year&#44; decade or century."),			
		},
		place_facet = {
			type = authority,
			table = ca_places,
			relationship_table = ca_places_x_collections,
			restrict_to_types = [],
			
			group_mode = alphabetical,
			
			requires = x,
			
			label_singular = _("place"),
			label_plural = _("places")
		},		
	}
}


views = {
	images = {
		icon = glyphicon-th
	},
	list = {
		icon = glyphicon-list
	},
	timeline = {
		icon = glyphicon-time
	},
	map = {
		icon = glyphicon-globe
	}
}

# --- text for Browse menu item, default is "Browse" 
browse_menu_button_text = 

# --- default number of results per page/ajax load
defaultHitsPerBlock = 36

# --- set to list to show dropdown with links to each configured browse or a single Browse nav link when one browse is configured
browseMenuFormat = list

# --- set if you don't want the browse menu to be preloaded with facets for the first browse type on open
dontPreloadBrowseMenu = 1

# --- refine_col_class -> boostrap col class to assign to refine col - defaults to: col-sm-8 col-md-8 col-lg-8
result_col_class = col-sm-8 col-md-9 col-lg-9

# --- refine_col_class -> boostrap col class to assign to refine col - defaults to: col-sm-4 col-md-3 col-md-offset-1 col-lg-3 col-lg-offset-1
refine_col_class = col-sm-4 col-md-3 col-lg-3 
