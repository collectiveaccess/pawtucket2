cache_timeout = 0

#
# 
#
browseTypes = {
	programs = {
		displayName = _("Programming, Events, & Projects"),
		labelSingular = _("program, event, project"),
 		labelPlural = _("programming, events, & projects"),
		table = ca_occurrences,
		restrictToTypes = [program],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			list = {
				result_caption = "<ifdef code='ca_occurrences.occurrence_date'><small><l>^ca_occurrences.occurrence_date</l></small><br/></ifdef><l>^ca_occurrences.preferred_labels</l><ifcount code='ca_entities' restrictToRelationshipTypes='Artist' min='1'><br/><small><l><unit relativeTo='ca_entities' restrictToRelationshipTypes='Artist' delimiter=', '>^ca_entities.preferred_labels.displayname</unit></l></small></ifcount>",
			}
		},
		
		sortBy = {
			Date = ca_occurrences.occurrence_date,
			Name = ca_occurrence_labels.name,
			Relevance = _natural
		},
		# --- default sort direction for the sortBy options
		sortDirection = {
			Date = asc,
			Name = asc,
			Relevance = asc
		},
		# --- sortControlType = dropdown or list
		sortControlType = list,
#		options = {
#			selectMediaUsingRelationshipTypes = [relationshipType],
#			selectMediaUsingTypes = [objectType]
#		}
	},
	entities = {
		displayName = _("People & Organizations"),
		labelSingular = _("person, organization"),
 		labelPlural = _("people & organizations"),
		table = ca_entities,
		restrictToTypes = [],
		showLetterBarFrom = ca_entity_labels.surname,
		showLetterBarSorts = [ca_entity_labels.surname;ca_entity_labels.forename],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			list = {
				result_caption = "<l>^ca_entities.preferred_labels.displayname</l>",
			}
		},
		
		sortBy = {
			Name = ca_entity_labels.surname;ca_entity_labels.forename,
			Relevance = _natural
		},
		# --- default sort direction for the sortBy options
		sortDirection = {
			Name = asc,
			Relevance = asc
		},
		# --- sortControlType = dropdown or list
		sortControlType = list,
#		options = {
#			selectMediaUsingRelationshipTypes = [relationshipType],
#			selectMediaUsingTypes = [objectType]
#		}
	},
	library_publications = {
		displayName = _("Library & Publication Objects"),
		labelSingular = _("library, publication Object"),
 		labelPlural = _("library & publication objects"),
		table = ca_objects,
		
		restrictToTypes = [library_publications],
		#dontExpandTypesHierarchically = true,
		availableFacets = [],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			images = {
				result_caption = "<small><l>^ca_objects.idno</l></small><br/><l><i>^ca_objects.preferred_labels</i><ifdef code='ca_objects.date_container.date'>, ^ca_objects.date_container.date</ifdef></l>",
			}
		},
		sortBy = {
			Date = ca_objects.date_container.date,
			Title = ca_object_labels.name_sort,
			Identifier = ca_objects.idno
		},
		# --- default sort direction for the sortBy options
		sortDirection = {
			Date = asc,
			Title = asc,
			Identifier = asc,			
		},
		# --- sortControlType = dropdown or list
		sortControlType = list,
#		options = {
#			selectMediaUsingRelationshipTypes = [relationshipType],
#			selectMediaUsingTypes = [objectType],
#			extendedInformationTemplate = ^ca_objects.description
#		},
		facetGroup = library
	},
	archival = {
		displayName = _("Archive Objects"),
		labelSingular = _("archive object"),
 		labelPlural = _("archive objects"),
		table = ca_objects,
		
		restrictToTypes = [analogue_aud, analogue_doc, analogue_image, object, analogue_vid],
		#dontExpandTypesHierarchically = true,
		availableFacets = [],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			images = {
				result_caption = "<small><l>^ca_objects.idno</l></small><br/><l>^ca_objects.preferred_labels<ifdef code='ca_objects.date_container.date'>, ^ca_objects.date_container.date</ifdef></l>",
			}
		},
		sortBy = {
			Date = ca_objects.date_container.date,
			Title = ca_object_labels.name_sort,
			Identifier = ca_objects.idno
		},
		# --- default sort direction for the sortBy options
		sortDirection = {
			Date = asc,
			Title = asc,
			Identifier = asc,			
		},
		# --- sortControlType = dropdown or list
		sortControlType = list,
#		options = {
#			selectMediaUsingRelationshipTypes = [relationshipType],
#			selectMediaUsingTypes = [objectType],
#			extendedInformationTemplate = ^ca_objects.description
#		},
		facetGroup = archive
	},
	objects = {
		displayName = _("Archival, Library & Publication Objects"),
		labelSingular = _("object"),
 		labelPlural = _("objects"),
		table = ca_objects,
		
		restrictToTypes = [],
		#dontExpandTypesHierarchically = true,
		availableFacets = [],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			images = {
				result_caption = "<small><l>^ca_objects.idno</l></small><br/><l>^ca_objects.preferred_labels<ifdef code='ca_objects.date_container.date'>, ^ca_objects.date_container.date</ifdef></l>",
			}
		},
		sortBy = {
			Date = ca_objects.date_container.date,
			Title = ca_object_labels.name_sort,
			Identifier = ca_objects.idno
		},
		# --- default sort direction for the sortBy options
		sortDirection = {
			Date = asc,
			Title = asc,
			Identifier = asc,			
		},
		# --- sortControlType = dropdown or list
		sortControlType = list,
#		options = {
#			selectMediaUsingRelationshipTypes = [relationshipType],
#			selectMediaUsingTypes = [objectType],
#			extendedInformationTemplate = ^ca_objects.description
#		},
		facetGroup = all,
		dontShowInBrowseMenu = 1
	},
	# --- collection entities is browse used on collection detail pages
	collection_artists = {
		displayName = _("Artists"),
		labelSingular = _("artist"),
 		labelPlural = _("artists"),
		table = ca_entities,
		restrictToTypes = [],
		showLetterBarFrom = ca_entity_labels.surname,
		showLetterBarSorts = [ca_entity_labels.surname;ca_entity_labels.forename],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			list = {
				result_caption = "<l>^ca_entities.preferred_labels.displayname</l>",
			}
		},
		
		sortBy = {
			Name = ca_entity_labels.surname;ca_entity_labels.forename
		},
		# --- default sort direction for the sortBy options
		sortDirection = {
			Name = asc
		},
		# --- sortControlType = dropdown or list
		sortControlType = list,
#		options = {
#			selectMediaUsingRelationshipTypes = [relationshipType],
#			selectMediaUsingTypes = [objectType]
#		},
		dontShowInBrowseMenu = 1
	},
	# --- collection entities is browse used on collection detail pages
	collection_curators = {
		displayName = _("Collections Curators"),
		labelSingular = _("Collection Curator"),
 		labelPlural = _("Collections Curators"),
		table = ca_entities,
		restrictToTypes = [],
		showLetterBarFrom = ca_entity_labels.surname,
		showLetterBarSorts = [ca_entity_labels.surname;ca_entity_labels.forename],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			list = {
				result_caption = "<l>^ca_entities.preferred_labels.displayname</l>",
			}
		},
		
		sortBy = {
			Name = ca_entity_labels.surname;ca_entity_labels.forename
		},
		# --- default sort direction for the sortBy options
		sortDirection = {
			Name = asc
		},
		# --- sortControlType = dropdown or list
		sortControlType = list,
#		options = {
#			selectMediaUsingRelationshipTypes = [relationshipType],
#			selectMediaUsingTypes = [objectType]
#		},
		dontShowInBrowseMenu = 1
	}
}

views = {
	images = {
		icon = glyphicon-th
	},
	list = {
		icon = glyphicon-list
	},
	timeline = {
		icon = glyphicon-time
	},
	map = {
		icon = glyphicon-globe
	}
}

# --- text for Browse menu item, default is "Browse" 
browse_menu_button_text = Browse <i class='fa fa-chevron-down' aria-hidden='true'></i>

# --- default number of results per page/ajax load
defaultHitsPerBlock = 36

# --- set to list to show dropdown with links to each configured browse or a single Browse nav link when one browse is configured
browseMenuFormat = list

# --- set if you don't want the browse menu to be preloaded with facets for the first browse type on open
dontPreloadBrowseMenu = 1

# --- refine_col_class -> boostrap col class to assign to refine col - defaults to: col-sm-8 col-md-8 col-lg-8
result_col_class =

# --- refine_col_class -> boostrap col class to assign to refine col - defaults to: col-sm-4 col-md-3 col-md-offset-1 col-lg-3 col-lg-offset-1
refine_col_class =

ca_occurrences = {
	name = _("Other authorities"),
	facets = {
		program_type_facet = {
			type = attribute,
			element_code = program_type,
			
			group_mode = alphabetical,
			
			label_singular = _("Program type"),
			label_plural = _("Program types")
		},
		decade_facet = {
			type = normalizedDates,
			element_code = occurrence_date,
			normalization = decades,
			
			group_mode = alphabetical,
			
			label_singular = _("decade"),
			label_plural = _("decades")
		},
		year_facet = {
			type = normalizedDates,
			element_code = occurrence_date,
			normalization = years,
			
			group_mode = alphabetical,
			requires = decade_facet,
			
			label_singular = _("year"),
			label_plural = _("years")
		},
		#series_facet = {
		#	type = hierarchy,
		#	restrict_to_types = [],
			
		#	group_mode = alphabetical,
			
		#	label_singular = _("series"),
		#	label_plural = _("series")
		#},
		object_library_facet = {
			type = has,
			
			table = ca_objects,
			relationship_table = ca_objects_x_occurrences,
			restrict_to_types = [library_publications],
			restrict_to_relationship_types = [],
			
			label_yes = _("Has library & publication objects"),
			label_no = _("Does not have library & publication objects"),
			
			single_value = 1,
			
			label_singular = _("has library & publication objects"),
			label_plural = _("has library & publication objects"),
			description = _("Find records that have associated library & publication objects.")
		},
		object_archive_facet = {
			type = has,
			
			table = ca_objects,
			relationship_table = ca_objects_x_occurrences,
			exclude_types = [library_publications],
			restrict_to_relationship_types = [],
			
			label_yes = _("Has archive objects"),
			label_no = _("Does not have archive objects"),
			
			single_value = 1,
			
			label_singular = _("has archive objects"),
			label_plural = _("has archive objects"),
			description = _("Find records that have associated archive objects.")
		},
		collection_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_collections,
			relationship_table = ca_occurrences_x_collections,
			restrict_to_types = ["fonds"],
			
			group_mode = alphabetical,
			natural_sort = 0,
			order_by_label_fields = [name],
			
			indefinite_article = a,
			label_singular = _("Collection"),
			label_plural = _("Collections"),
		}
		
	}
}
# --------------------------------------------------------------------
# Configuration for entity browse
ca_entities = {
	name = _("Entities"),
	facets = {
		type_facet = {
			type = fieldList,
			field = type_id,
			
			group_mode = alphabetical,
			
			label_singular = _("type"),
			label_plural = _("types")
		},
	    role_facet = {
			type = attribute,
			element_code = ind_gen_role,
			
			group_mode = alphabetical,
			
			label_singular = _("Role"),
			label_plural = _("Roles")
		},
		collection_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_collections,
			relationship_table = ca_entities_x_collections,
			restrict_to_types = ["fonds"],
			
			group_mode = alphabetical,
			natural_sort = 0,
			order_by_label_fields = [name],
			
			indefinite_article = a,
			label_singular = _("Collection"),
			label_plural = _("Collections"),
			requires = x,
		},
		role_collections_facet = {
	    	type = relationship_types,
	   		table = ca_collections,
	    	restrict_to_relationship_types = [],
			relationship_table = ca_entities_x_collections,
			
			label_singular = _("Collection Role"),
			label_plural = _("Collection Role"),
			requires = x
	    },
		collection_curator_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_collections,
			relationship_table = ca_entities_x_collections,
			restrict_to_types = ["fonds"],
			restrict_to_relationship_types = ["Curator"],
			
			group_mode = alphabetical,
			natural_sort = 0,
			order_by_label_fields = [name],
			
			indefinite_article = a,
			label_singular = _("Collection as curator"),
			label_plural = _("Collection as curator"),
			requires = x,
		},
		collection_artist_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_collections,
			relationship_table = ca_entities_x_collections,
			restrict_to_types = ["fonds"],
			restrict_to_relationship_types = ["Artist"],
			
			group_mode = alphabetical,
			natural_sort = 0,
			order_by_label_fields = [name],
			
			indefinite_article = a,
			label_singular = _("Collection as artist"),
			label_plural = _("Collection as artist"),
			requires = x,
		},
	}
}
# --------------------------------------------------------------------
# Configuration for object browse
ca_objects = {
	name = _("Objects"),
	facets = {
		has_media_facet = {
			type = has,
			
			table = ca_object_representations,
			relationship_table = ca_objects_x_object_representations,
			restrict_to_types = [],
			restrict_to_relationship_types = [],
			
			label_yes = _("Has media"),
			label_no = _("Does not have media"),
			
			single_value = 1,
			
			label_singular = _("has media"),
			label_plural = _("has media"),
			description = _("Find objects that have associated media."),
			facet_groups = [archive, library, all]
		},
		type_facet = {
			type = fieldList,
			field = type_id,
			
			group_mode = none,

			label_singular = _("object type"),
			label_plural = _("object types"),
			description = _("Find objects according to the Types defined in your collection profile."),
			facet_groups = [archive, all],
		},
		decade_facet = {
			type = normalizedDates,
			element_code = date_container.date,
			normalization = decades,
			
			group_mode = alphabetical,
			
			label_singular = _("decade"),
			label_plural = _("decades"),
			facet_groups = [archive, library, all]
		},
		year_facet = {
			type = normalizedDates,
			element_code = date_container.date,
			normalization = years,
			
			group_mode = alphabetical,
			requires = decade_facet,
			
			label_singular = _("year"),
			label_plural = _("years"),
			facet_groups = [archive, library, all]
		},	
		subject_guide_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_occurrences,
			relationship_table = ca_objects_x_occurrences,
			restrict_to_types = [subject_guide],
			
			group_mode = alphabetical,
			natural_sort = 0,
			order_by_label_fields = [name],
			
			indefinite_article = an,
			label_singular = _("subject guide"),
			label_plural = _("subject guides"),
			facet_groups = [archive, library, all]
		},
		collection_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_collections,
			relationship_table = ca_objects_x_collections,
			restrict_to_types = ["fonds"],
			
			group_mode = alphabetical,
			natural_sort = 0,
			order_by_label_fields = [name],
			
			indefinite_article = a,
			label_singular = _("Collection"),
			label_plural = _("Collections")
		},
		creative_access_desc_facet = {
			type = has,
			
			table = ca_objects,
			element_code = creative_access_desc,
			
			label_yes = _("Has creative access description"),
			label_no = _("Does not have creative access desc"),
			
			single_value = 1,
			
			label_singular = _("Creative Access Description"),
			label_plural = _("Creative Access Descriptions"),
			facet_groups = [archive, library, all],
			accessibility_group = 1
		},
		transcript_facet = {
			type = attribute,
			element_code = transcription,
			
			label_singular = _("Transcribed"),
			label_plural = _("Transcriptions"),
			facet_groups = [archive, library, all],
			accessibility_group = 1
		},
		captions_facet = {
			type = attribute,
			element_code = closed_caption,
			
			label_singular = _("Captioned"),
			label_plural = _("Captions"),
			facet_groups = [archive, library, all],
			accessibility_group = 1
		},
		visual_description_facet = {
			type = attribute,
			element_code = visual_description,
			
			label_singular = _("Video Description"),
			label_plural = _("Video Descriptions"),
			facet_groups = [archive, library, all],
			accessibility_group = 1
		},
		contains_facet = {
			type = has,
			table = ca_objects,
			element_code =  content_notice,
			
			label_yes = _("Has content note"),
			label_no = _("Does not have content note"),
			
			label_singular = _("Content Note"),
			label_plural = _("Content Notes"),
			facet_groups = [archive, library, all],
			accessibility_group = 1
		},
		detail_entity = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_entities,
			relationship_table = ca_objects_x_entities,
			
			group_mode = alphabetical,
			natural_sort = 0,
			order_by_label_fields = [surname],
			
			indefinite_article = an,
			label_singular = _("entities detail page"),
			label_plural = _("entities detail page"),
			facet_groups = [all],
			requires = x
		},
		detail_occurrence = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_occurrences,
			relationship_table = ca_objects_x_occurrences,
			
			group_mode = alphabetical,
			natural_sort = 0,
			order_by_label_fields = [name],
			
			indefinite_article = an,
			label_singular = _("occurrence detail page"),
			label_plural = _("occurrence detail page"),
			facet_groups = [all],
			requires = x
		}
	}
}