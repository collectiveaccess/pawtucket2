cache_timeout = 3600

#
# 
#
browseTypes = {
	objects = {
		displayName = _(Objects),
		labelSingular = _("object"),
 		labelPlural = _("objects"),
		table = ca_objects,
		
		restrictToTypes = [],
		#dontExpandTypesHierarchically = true,
		availableFacets = [],
		
		excludeFieldsFromSearch = [ca_object_lots.description],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			images = {},
			list = {},
			map = {
				data = ca_objects.georeference,
				width = 100%,
				height = 600px,
				minZoomLevel = 2,
				maxZoomLevel = 15,
				display = {
					labelTemplate = <l>^ca_objects.preferred_labels.name</l> (^ca_objects.idno),
					contentTemplate = <p>^ca_object_representations.media.small</p>
				}
			}
		},
		sortBy = {
			Media = ca_object_representations.access,
			Identifier = ca_objects.idno_sort,
			Title = ca_object_labels.name_sort
		},
		# --- default sort direction for the sortBy options
		sortDirection = {
			Media = desc,
			Identifier = asc,
			Title = asc
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown,
#		options = {
#			selectMediaUsingRelationshipTypes = [relationshipType],
#			selectMediaUsingTypes = [objectType],
#			extendedInformationTemplate = ^ca_objects.description
#		}
	},
	collections = {
		displayName = _(Collections),
		labelSingular = _("collection"),
 		labelPlural = _("collections"),
		table = ca_collections,
		restrictToTypes = [],
		checkAccess = [1],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = { 
			images = {}, 
			list = {}
		},
		
		sortBy = {
			Name = ca_collection_labels.name,
			Relevance = _natural,
			Identifier = ca_collections.idno
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown
	},
	entities = {
		displayName = _(Makers & Donors),
		labelSingular = _("maker & donor"),
 		labelPlural = _("makers & donors"),
		table = ca_entities,
		restrictToTypes = [],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			images = {}, 
			list = {}
		},
		
		sortBy = {
			Relevance = _natural,
			Identifier = ca_entities.idno,
			Name = ca_entity_labels.surname;ca_entity_labels.forename
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown,
#		options = {
#			selectMediaUsingRelationshipTypes = [relationshipType],
#			selectMediaUsingTypes = [objectType]
#		}
	},
	occurrences = {
		displayName = _(Exhibits & Programs),
		labelSingular = _("exhibit & program"),
 		labelPlural = _("exhibits & programs"),
		table = ca_occurrences,
		restrictToTypes = [],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			images = {},
			list = {}
		},
		
		sortBy = {
			Name = ca_occurrence_labels.name,
			Relevance = _natural,
			Identifier = ca_occurrences.idno
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown,
#		options = {
#			selectMediaUsingRelationshipTypes = [relationshipType],
#			selectMediaUsingTypes = [objectType]
#		}
	}
}

views = {
	images = {
		icon = glyphicon-th
	},
	list = {
		icon = glyphicon-list
	},
	timeline = {
		icon = glyphicon-time
	},
	map = {
		icon = glyphicon-globe
	}
}

# --- text for Browse menu item, default is "Browse" 
browse_menu_button_text = 

# --- default number of results per page/ajax load
defaultHitsPerBlock = 36

# --- set to list to show dropdown with links to each configured browse or a single Browse nav link when one browse is configured
browseMenuFormat =

# --- set if you don't want the browse menu to be preloaded with facets for the first browse type on open
dontPreloadBrowseMenu = 1

# --- refine_col_class -> boostrap col class to assign to refine col - defaults to: col-sm-8 col-md-8 col-lg-8
result_col_class = col-sm-8 col-md-9 col-lg-9

# --- refine_col_class -> boostrap col class to assign to refine col - defaults to: col-sm-4 col-md-3 col-md-offset-1 col-lg-3 col-lg-offset-1
refine_col_class = col-sm-4 col-md-3 col-lg-3


# Configuration for object browse
ca_objects = {
	name = _("Objects"),
	facets = {
		has_media_facet = {
			type = has,
			
			table = ca_object_representations,
			relationship_table = ca_objects_x_object_representations,
			restrict_to_types = [],
			restrict_to_relationship_types = [],
			
			label_yes = _("Has media"),
			label_no = _("Does not have media"),
			
			single_value = 1,
			
			label_singular = _("has media"),
			label_plural = _("has media"),
		},
		type_facet = {
			type = fieldList,
			field = type_id,
			
			group_mode = none,

			label_singular = _("object type"),
			label_plural = _("object types")
		},	
		entity_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_entities,
			relationship_table = ca_objects_x_entities,
			restrict_to_types = [],
			
			individual_group_display = 1,
			
			groupings = {
				label = _("Name"), 
				relationship_types = _("Role"),
				type = _("Type")
			},
			group_mode = alphabetical,
			order_by_label_fields = [surname, forename, middlename],
			
			indefinite_article = an,
			label_singular = _("maker/donor"),
			label_plural = _("makers/donors")
		},
#		place_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
#			type = authority,		
#			table = ca_places,
#			relationship_table = ca_objects_x_places,
#			restrict_to_types = [],
			
#			individual_group_display = 1,
			
#			group_mode = hierarchical,
#			order_by_label_fields = [name],
			
			# Set to non-zero value to display hierarchy on items in this facet
#			show_hierarchy = 1,
			
			# Character(s) to place between elements of the hierarchy
#			hierarchical_delimiter = &nbsp;⬅&nbsp;,
			
			# Number of items to trim off the top (leave blank or set to 0 to trim nothing)
#			remove_first_items = 0,
			
			# Maximum length of hierarchy to display (leave blank to return hierarchy unabridged)
#			hierarchy_limit = 3,
			
			# can be ASC or DESC (default is DESC)
#			hierarchy_order  = DESC,
			
#			indefinite_article = a,
#			label_singular = _("place"),
#			label_plural = _("places"),
#		},
		term_facet = {
			type = authority,
			table = ca_list_items,
			relationship_table = ca_objects_x_vocabulary_terms,
			restrict_to_types = [],
			
			individual_group_display = 0,
			
			group_mode = hierarchical,
			
			# Set to non-zero value to display hierarchy on items in this facet
			show_hierarchy = 1,
			
			# Character(s) to place between elements of the hierarchy
			hierarchical_delimiter =  &nbsp;⬅&nbsp;,
			
			# Number of items to trim off the top (leave blank or set to 0 to trim nothing)
			remove_first_items = ,
			
			# Maximum length of hierarchy to display (leave blank to return hierarchy unabridged)
			hierarchy_limit = 3,
			
			# can be ASC or DESC (default is DESC)
			hierarchy_order  = DESC,
			
			label_singular = _("term"),
			label_plural = _("terms"),
		},
        collection_tier = {
                type = attribute,
                element_code = tier,
                group_mode = none,
                label_singular = _("tier"),
                label_plural = _("tiers")
        },
        decade_facet = {
                type = normalizedDates,
                element_code = Date,
                normalization = decades,

                group_mode = none,
                minimum_date = 500 bc,

                label_singular = _("decade"),
                label_plural = _("decades"),
                description = _("Find objects according to associated dates.  You can normalize these dates by year&#44; decade or century."),
        },
        year_facet = {
                type = normalizedDates,
                element_code = Date,
                normalization = years,
                requires = [decade_facet],

                group_mode = none,
                minimum_date = 5000 bc,

                label_singular = _("year"),
                label_plural = _("years"),
                description = _("Find objects according to associated dates.  You can normalize these dates by year&#44; decade or century."),
        },
		occurrence_facet = {
			type = authority,
			table = ca_occurrences,
			generate_facets_for_types = 1,
			relationship_table = ca_objects_x_occurrences,
			restrict_to_types = [],
			
			individual_group_display = 1,
			
			show_all_when_first_facet = 0,
			
			groupings = {
				label = _("Name"), 
				ca_attribute_dates_value:years = _("Years")
			},
			
			group_mode = alphabetical,
			
			label_singular = _("exhibit/program"),
			label_plural = _("exhibits/programs"),
			description = _(""),
		},
		collection_facet = {
			type = authority,
			table = ca_collections,
			relationship_table = ca_objects_x_collections,
			restrict_to_types = [],
			
			group_mode = none,

			label_singular = _("collection"),
			label_plural = _("collections"),
			description = _("Find objects according to the Collections they belong to."),
		}
	}
}

# --------------------------------------------------------------------
# Configuration for entity browse
ca_entities = {
	name = _("Makers/Donors"),
	facets = {
		type_facet = {
			type = fieldList,
			field = type_id,
			
			group_mode = alphabetical,
			
			label_singular = _("type"),
			label_plural = _("types")
		}
	}
}

# --------------------------------------------------------------------
# Configuration for collection browse
ca_collections = {
	name = _("Collections"),
	facets = {
		type_facet = {
			type = fieldList,
			field = type_id,
			
			group_mode = alphabetical,
			show_description_when_first_facet = 1,
			description = _("this is the desc"),
			label_singular = _("type"),
			label_plural = _("types")
		}
	}
}
# --------------------------------------------------------------------
# Configuration for occurrence browse
ca_occurrences = {
	name = _("Exhibits/Programs"),
	facets = {
		type_facet = {
			type = fieldList,
			field = type_id,
			
			group_mode = alphabetical,
			
			label_singular = _("type"),
			label_plural = _("types")
		},
		on_view_facet = {
			type = attribute,
			element_code = event_is_current,
			
			group_mode = none,
			
			label_singular = _("Current Exhibit"),
			label_plural = _("Current Exhibit"),			
		},
		decade_facet = {
			type = normalizedDates,
			element_code = date,
			normalization = decades,
			
			group_mode = none,
			
			label_singular = _("decade"),
			label_plural = _("decades"),			
		},
		year_facet = {
			type = normalizedDates,
			element_code = date,
			normalization = years,
			requires = decade_facet,
			group_mode = none,
			
			label_singular = _("year"),
			label_plural = _("years"),			
		},
	}
}
