import "../../assets/InformationPanel.css";
import { jsx as n, jsxs as y } from "react/jsx-runtime";
import { useState as N, useEffect as v } from "react";
import { useEditorState as x, useEditorDispatch as E } from "../context/annotation-editor-context.js";
import I from "./AnnotationItem.js";
import { fetchAnnotations as _ } from "../utils/annotation-utils.js";
const j = "_container_1tymf_1", d = {
  container: j
}, k = ({
  canvas: p,
  useViewerDispatch: m,
  useViewerState: f,
  token: s,
  annotationServer: c,
  annotationDownloadUrl: a,
  annotationDownloadLabel: r
}) => {
  const [l, u] = N(), h = x(), { annotationsUpdatedAt: e, annotations: t, annotorious: A } = h, i = E();
  v(() => {
    e && _(s, c).then((o) => {
      console.log("InfomationPanel fetchAnnotations", o, e), i({
        type: "updateAnnotations",
        annotations: o
      }), i({
        type: "annotationsUpdatedAt",
        annotationsUpdatedAt: void 0
      }), i({
        type: "updateAnnotorious",
        annotorious: A
      });
    });
  }, [e]);
  const g = a && r ? /* @__PURE__ */ n("form", { action: a, className: "clippingDownload", children: /* @__PURE__ */ n("button", { className: "clippingDownloadLink", children: r }) }) : "";
  return (t == null ? void 0 : t.length) === 0 ? /* @__PURE__ */ n("div", { className: d.container, children: "No clippings defined" }) : /* @__PURE__ */ y("div", { className: d.container, children: [
    g,
    t == null ? void 0 : t.map((o) => /* @__PURE__ */ n(
      I,
      {
        annotation: o,
        canvas: p,
        useViewerState: f,
        useViewerDispatch: m,
        activeTarget: l,
        setActiveTarget: u,
        token: s,
        annotationServer: c
      },
      o.id
    ))
  ] });
};
export {
  k as InfomationPanel,
  k as default
};
