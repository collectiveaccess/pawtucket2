import "../../assets/InformationPanel.css";
import { jsx as o, jsxs as E } from "react/jsx-runtime";
import { useState as N, useEffect as m } from "react";
import { useEditorState as I, useEditorDispatch as x } from "../context/annotation-editor-context.js";
import P from "./AnnotationItem.js";
import { fetchAnnotations as _ } from "../utils/annotation-utils.js";
const j = "_container_1tymf_1", l = {
  container: j
}, q = ({
  canvas: f,
  useViewerDispatch: a,
  useViewerState: u,
  token: s,
  annotationServer: c,
  annotationDownloadUrl: e,
  annotationDownloadLabel: r
}) => {
  const [h, A] = N(), g = I(), { annotationsUpdatedAt: p, annotations: t, annotorious: y } = g, i = x(), d = a();
  m(() => {
    p && _(s, c).then((n) => {
      i({
        type: "updateAnnotations",
        annotations: n
      }), i({
        type: "annotationsUpdatedAt",
        annotationsUpdatedAt: void 0
      }), i({
        type: "updateAnnotorious",
        annotorious: y
      }), t && d({
        count: t.length,
        panel: "AnnotationEditor",
        type: "updateInformationPanelCount"
      });
    });
  }, [p]), m(() => {
    t && d({
      count: t.length,
      panel: "AnnotationEditor",
      type: "updateInformationPanelCount"
    });
  }, [t]);
  const v = e && r ? /* @__PURE__ */ o("form", { action: e, className: "clippingDownload", children: /* @__PURE__ */ o("button", { className: "clippingDownloadLink", children: r }) }) : "";
  return (t == null ? void 0 : t.length) === 0 ? /* @__PURE__ */ o("div", { className: l.container, children: "No clippings defined" }) : /* @__PURE__ */ E("div", { className: l.container, children: [
    v,
    t == null ? void 0 : t.map((n) => /* @__PURE__ */ o(
      P,
      {
        annotation: n,
        canvas: f,
        useViewerState: u,
        useViewerDispatch: a,
        activeTarget: h,
        setActiveTarget: A,
        token: s,
        annotationServer: c,
        downloadUrl: e
      },
      n.id
    ))
  ] });
};
export {
  q as InfomationPanel,
  q as default
};
