async function y(t, s, o, n, e, i) {
  if (e && i)
    await fetch(i, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${e}`
      },
      body: JSON.stringify({
        annotation: d(
          t,
          s,
          o,
          n
        )
      })
    });
  else if (!e) {
    let a = {};
    const r = window.localStorage.getItem("annotations");
    if (r) {
      const l = JSON.parse(r);
      l[o] == null && (l[o] = {
        "@context": "http://iiif.io/api/presentation/3/context.json",
        id: o,
        items: [],
        type: "AnnotationPage"
      }), l[o].items.push(
        d(
          t,
          s,
          o,
          n
        )
      ), a = l;
    } else
      a[o] = {
        "@context": "http://iiif.io/api/presentation/3/context.json",
        id: o,
        items: [
          d(
            t,
            s,
            o,
            n
          )
        ],
        type: "AnnotationPage"
      };
    window.localStorage.setItem("annotations", JSON.stringify(a));
  }
}
async function f(t, s) {
  let o = [];
  if (t && s) {
    const n = await fetch(s, {
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${t}`
      }
    });
    if (n.ok)
      o = (await n.json()).items;
    else {
      const e = await n.json();
      console.error(e);
    }
  } else if (!t) {
    const n = window.localStorage.getItem("annotations");
    if (n) {
      const e = JSON.parse(n);
      if (e) {
        let i = [];
        Object.values(e).forEach(
          (a) => i = i.concat(a.items)
        ), o = i;
      }
    }
  }
  return o;
}
async function g(t, s, o, n, e, i) {
  if (e && i)
    await fetch(i, {
      method: "DELETE",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${e}`
      },
      body: JSON.stringify({
        annotation: d(
          t,
          s,
          o,
          n
        )
      })
    });
  else if (!e) {
    const a = window.localStorage.getItem("annotations");
    if (a) {
      const r = JSON.parse(a), l = r[o];
      if (l) {
        const c = l.items.filter(
          (p) => p.id !== t.id
        );
        r[o] = {
          id: o,
          items: c,
          type: "AnnotationPage"
        }, window.localStorage.setItem("annotations", JSON.stringify(r));
      }
    }
  }
}
async function u(t, s, o, n, e, i) {
  if (e && i)
    await fetch(i, {
      method: "DELETE",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${e}`
      },
      body: JSON.stringify({
        annotation: t,
        unit: n,
        manifestId: s
      })
    });
  else if (!e) {
    const a = window.localStorage.getItem("annotations");
    if (a) {
      const r = JSON.parse(a), l = r[o];
      if (l) {
        const c = l.items.filter(
          (p) => p.id !== t.id
        );
        r[o] = {
          id: o,
          items: c,
          type: "AnnotationPage"
        }, window.localStorage.setItem("annotations", JSON.stringify(r));
      }
    }
  }
}
async function m(t, s, o, n, e, i) {
  if (e && i)
    await fetch(i, {
      method: "PUT",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${e}`
      },
      body: JSON.stringify({
        annotation: d(
          t,
          s,
          o,
          n
        )
      })
    });
  else if (!e) {
    const a = window.localStorage.getItem("annotations");
    if (a) {
      const r = JSON.parse(a), l = r[o];
      if (l) {
        const c = [];
        l.items.forEach((p) => {
          p.id === t.id ? c.push(
            d(
              t,
              s,
              o,
              n
            )
          ) : c.push(p);
        }), r[o] = {
          id: o,
          items: c,
          type: "AnnotationPage"
        }, window.localStorage.setItem("annotations", JSON.stringify(r));
      }
    }
  }
}
function d(t, s, o, n) {
  var i;
  const e = {};
  return e.type = "Annotation", Array.isArray(t.body) && (t.body.length == 1 ? e.body = {
    type: t.body[0].type,
    value: t.body[0].value,
    format: "text/plain"
  } : t.body.length > 1 && (e.body = t.body.map((a) => ({
    type: a.type,
    value: a.value,
    format: "text/plain"
  })))), e.motivation = t.body[0] ? t.body[0].purpose : "commenting", e.target = {
    type: "SpecificResource",
    source: {
      id: o,
      type: "Canvas",
      partOf: [
        {
          id: s,
          type: "Manifest"
        }
      ]
    },
    selector: {
      type: (i = t.target) == null ? void 0 : i.selector.type,
      conformsTo: t.target.selector.conformsTo,
      value: t.target.selector.value.replace(`${n}:`, "")
    }
  }, e.id = t.id, e;
}
function h(t, s) {
  const o = t.body;
  let n;
  return o ? Array.isArray(o) ? n = o.map((e) => ({ purpose: "commenting", type: e.type, value: e.value })) : n = [
    {
      purpose: "commenting",
      type: o.type,
      value: o.value
    }
  ] : n = [], {
    "@context": "http://www.w3.org/ns/anno.jsonld",
    type: "Annotation",
    body: n,
    target: {
      source: t.target.source,
      selector: {
        type: t.target.selector.type,
        conformsTo: t.target.selector.conformsTo,
        value: t.target.selector.value.replace(
          "xywh=",
          `xywh=${s}:`
        )
      }
    },
    id: t.id
  };
}
export {
  h as convertIIIFAnnotationToWebAnnotation,
  d as convertWebAnnotationToIIIFAnnotation,
  g as deleteAnnotation,
  u as deleteAnnotationItem,
  f as fetchAnnotations,
  y as saveAnnotation,
  m as updateAnnotation
};
