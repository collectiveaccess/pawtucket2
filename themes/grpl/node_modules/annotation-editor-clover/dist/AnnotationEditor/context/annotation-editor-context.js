import { jsx as r } from "react/jsx-runtime";
import e, { useReducer as u } from "react";
const n = {
  zoomLevel: 2,
  annotationsUpdatedAt: "",
  annotations: [],
  annotorious: 9999
}, i = e.createContext(n), a = e.createContext(n);
function c(t, o) {
  switch (o.type) {
    case "annotationsUpdatedAt":
      return {
        ...t,
        annotationsUpdatedAt: o.annotationsUpdatedAt
      };
    case "updateAnnotations":
      return {
        ...t,
        annotations: o.annotations
      };
    case "updateAnnotorious":
      return {
        ...t,
        annotorious: o.annotorious
      };
    default:
      throw new Error(`Unhandled action type: ${o.type}`);
  }
}
const h = ({
  initialState: t = n,
  children: o
}) => {
  const [s, d] = u(c, t);
  return /* @__PURE__ */ r(i.Provider, { value: s, children: /* @__PURE__ */ r(
    a.Provider,
    {
      value: d,
      children: o
    }
  ) });
};
function v() {
  const t = e.useContext(i);
  if (t === void 0)
    throw new Error("useEditorState must be used within a EditorProvider");
  return t;
}
function x() {
  const t = e.useContext(a);
  if (t === void 0)
    throw new Error("useEditorDispatch must be used within a EditorProvider");
  return t;
}
export {
  h as EditorProvider,
  n as defaultState,
  x as useEditorDispatch,
  v as useEditorState
};
