{"version":3,"file":"ranges.mjs","sources":["../../../src/compat.ts","../../../src/ranges.ts"],"sourcesContent":["export type CompatVault = {\n  get: import('@iiif/vault').Vault['get'];\n  setMetaValue: import('@iiif/vault').Vault['setMetaValue'];\n  getResourceMeta: import('@iiif/vault').Vault['getResourceMeta'];\n};\n\nconst metaState: any = {};\nexport const compatVault: CompatVault = {\n  get(nonRef: any) {\n    return nonRef;\n  },\n  setMetaValue([id, meta, key], value) {\n    const oldValue = compatVault.getResourceMeta(id, meta);\n    const oldValueItem = oldValue ? oldValue[key] : undefined;\n    const newValue = typeof value === 'function' ? (value as any)(oldValueItem) : value;\n    metaState[id] = {\n      ...(metaState[id] || {}),\n      [meta]: {\n        ...((metaState[id] || {})[meta] || {}),\n        [key]: newValue,\n      },\n    };\n  },\n  getResourceMeta: ((resource: any, metaKey?: any) => {\n    const resourceMeta = metaState[resource as any] as any;\n\n    if (!resourceMeta) {\n      return undefined;\n    }\n    if (!metaKey) {\n      return resourceMeta;\n    }\n\n    return resourceMeta[metaKey];\n  }) as any,\n};\n","import { Vault } from '@iiif/vault';\nimport { ManifestNormalized, RangeNormalized, Reference } from '@iiif/presentation-3';\nimport { CompatVault, compatVault } from './compat';\n\nexport function createRangeHelper(vault: CompatVault = compatVault) {\n  return {\n    findFirstCanvasFromRange: (range: RangeNormalized) => findFirstCanvasFromRange(vault, range),\n    findAllCanvasesInRange: (range: RangeNormalized) => findAllCanvasesInRange(vault, range),\n    findManifestSelectedRange: (manifest: ManifestNormalized, canvasId: string) =>\n      findManifestSelectedRange(vault, manifest, canvasId),\n    findSelectedRange: (range: RangeNormalized, canvasId: string) => findSelectedRange(vault, range, canvasId),\n  };\n}\n\nexport function findFirstCanvasFromRange(vault: CompatVault, range: RangeNormalized): null | Reference<'Canvas'> {\n  for (const inner of range.items) {\n    if (inner.type === 'Canvas') {\n      return inner as Reference<'Canvas'>;\n    }\n    if (inner.type === 'Range') {\n      const found = findFirstCanvasFromRange(vault, vault.get(inner));\n      if (found) {\n        return found;\n      }\n    }\n  }\n  return null;\n}\n\nexport function findAllCanvasesInRange(vault: CompatVault, range: RangeNormalized): Array<Reference<'Canvas'>> {\n  const found: Reference<'Canvas'>[] = [];\n  for (const inner of range.items) {\n    if (inner.type === 'Canvas') {\n      if (inner.id.indexOf('#') !== -1) {\n        found.push({ id: inner.id.split('#')[0], type: 'Canvas' });\n      } else {\n        found.push(inner as Reference<'Canvas'>);\n      }\n    }\n    if (inner.type === 'Range') {\n      found.push(...findAllCanvasesInRange(vault, vault.get(inner)));\n    }\n    if ((inner as any).type === 'SpecificResource') {\n      const sourceId = typeof (inner as any).source === 'string' ? (inner as any).source : (inner as any).source.id;\n      found.push({ id: sourceId, type: 'Canvas' });\n    }\n  }\n  return found;\n}\n\nexport function findManifestSelectedRange(\n  vault: CompatVault,\n  manifest: ManifestNormalized,\n  canvasId: string\n): null | RangeNormalized {\n  for (const range of manifest.structures) {\n    const found = findSelectedRange(vault, vault.get(range), canvasId);\n    if (found) {\n      return found;\n    }\n  }\n\n  return null;\n}\n\nexport function findSelectedRange(\n  vault: CompatVault,\n  range: RangeNormalized,\n  canvasId: string\n): null | RangeNormalized {\n  for (const inner of range.items) {\n    const parsedId = inner.id?.split('#')[0];\n    if ((inner as any).type === 'SpecificResource' && (inner as any).source === canvasId) {\n      return range;\n    }\n    if (inner.type === 'Canvas' && canvasId === parsedId) {\n      return range;\n    }\n    if (inner.type === 'Range') {\n      const found = findSelectedRange(vault, vault.get(inner), canvasId);\n      if (found) {\n        return found;\n      }\n    }\n  }\n  return null;\n}\n"],"names":[],"mappings":"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"}