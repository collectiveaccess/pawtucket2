const metaState = {};
const compatVault = {
  get(nonRef) {
    return nonRef;
  },
  setMetaValue([id, meta, key], value) {
    const oldValue = compatVault.getResourceMeta(id, meta);
    const oldValueItem = oldValue ? oldValue[key] : void 0;
    const newValue = typeof value === "function" ? value(oldValueItem) : value;
    metaState[id] = {
      ...metaState[id] || {},
      [meta]: {
        ...(metaState[id] || {})[meta] || {},
        [key]: newValue
      }
    };
  },
  getResourceMeta: (resource, metaKey) => {
    const resourceMeta = metaState[resource];
    if (!resourceMeta) {
      return void 0;
    }
    if (!metaKey) {
      return resourceMeta;
    }
    return resourceMeta[metaKey];
  }
};
function createStylesHelper(vault = compatVault) {
  return {
    applyStyles(resource, scope, styles) {
      const id = typeof resource === "string" ? resource : resource.id;
      return vault.setMetaValue([id, "styles", scope], styles);
    },
    getAppliedStyles(resource) {
      const id = typeof resource === "string" ? resource : resource.id;
      return vault.getResourceMeta(id, "styles");
    }
  };
}
export { createStylesHelper };
//# sourceMappingURL=styles.mjs.map
