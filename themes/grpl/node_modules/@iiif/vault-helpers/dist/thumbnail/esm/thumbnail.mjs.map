{"version":3,"file":"thumbnail.mjs","sources":["../../../src/compat.ts","../../../src/thumbnail.ts"],"sourcesContent":["export type CompatVault = {\n  get: import('@iiif/vault').Vault['get'];\n  setMetaValue: import('@iiif/vault').Vault['setMetaValue'];\n  getResourceMeta: import('@iiif/vault').Vault['getResourceMeta'];\n};\n\nconst metaState: any = {};\nexport const compatVault: CompatVault = {\n  get(nonRef: any) {\n    return nonRef;\n  },\n  setMetaValue([id, meta, key], value) {\n    const oldValue = compatVault.getResourceMeta(id, meta);\n    const oldValueItem = oldValue ? oldValue[key] : undefined;\n    const newValue = typeof value === 'function' ? (value as any)(oldValueItem) : value;\n    metaState[id] = {\n      ...(metaState[id] || {}),\n      [meta]: {\n        ...((metaState[id] || {})[meta] || {}),\n        [key]: newValue,\n      },\n    };\n  },\n  getResourceMeta: ((resource: any, metaKey?: any) => {\n    const resourceMeta = metaState[resource as any] as any;\n\n    if (!resourceMeta) {\n      return undefined;\n    }\n    if (!metaKey) {\n      return resourceMeta;\n    }\n\n    return resourceMeta[metaKey];\n  }) as any,\n};\n","import {\n  AnnotationNormalized,\n  AnnotationPageNormalized,\n  CanvasNormalized,\n  ChoiceBody,\n  CollectionItemSchemas,\n  CollectionNormalized,\n  ContentResource,\n  DescriptiveNormalized,\n  ManifestNormalized,\n  Reference,\n} from '@iiif/presentation-3';\nimport {\n  FixedSizeImage,\n  FixedSizeImageService,\n  getFixedSizeFromImage,\n  ImageCandidate,\n  ImageCandidateRequest,\n  ImageServiceLoader,\n  UnknownSizeImage,\n  VariableSizeImage,\n} from '@atlas-viewer/iiif-image-api';\nimport { compatVault, CompatVault } from './compat';\n\nexport function createThumbnailHelper(\n  vault: CompatVault = compatVault,\n  dependencies: { imageServiceLoader?: ImageServiceLoader } = {}\n) {\n  const imageServiceLoader = dependencies.imageServiceLoader || new ImageServiceLoader();\n\n  async function getBestThumbnailAtSize(\n    input:\n      | string\n      | Reference<CollectionItemSchemas>\n      | Reference<'Collection'>\n      | Reference<'Manifest'>\n      | Reference<'Canvas'>\n      | Reference<'Annotation'>\n      | Reference<'AnnotationPage'>\n      | Reference<'ContentResource'>\n      | CollectionNormalized\n      | ManifestNormalized\n      | CanvasNormalized\n      | AnnotationNormalized\n      | AnnotationPageNormalized\n      | ContentResource\n      | undefined,\n    request: ImageCandidateRequest,\n    dereference?: boolean,\n    candidates: Array<ImageCandidate> = [],\n    dimensions?: { width: number; height: number }\n  ): Promise<{\n    best: null | undefined | FixedSizeImage | FixedSizeImageService | VariableSizeImage | UnknownSizeImage;\n    fallback: Array<ImageCandidate>;\n    log: string[];\n  }> {\n    const thumbnailNotFound = () =>\n      imageServiceLoader.getThumbnailFromResource(undefined as any, request, dereference, candidates);\n\n    if (!input) {\n      // We might have candidates already to pick from.\n      return await imageServiceLoader.getThumbnailFromResource(undefined as any, request, dereference, candidates);\n    }\n\n    if (typeof input === 'string') {\n      const fixed = getFixedSizeFromImage(input as any);\n      if (fixed) {\n        candidates.push(fixed);\n      }\n\n      return await imageServiceLoader.getThumbnailFromResource(undefined as any, request, dereference, candidates);\n    }\n\n    // Run through from ref, just in case.\n    const fullInput:\n      | string\n      | ManifestNormalized\n      | CollectionNormalized\n      | CanvasNormalized\n      | AnnotationNormalized\n      | AnnotationPageNormalized\n      | ContentResource\n      | undefined = vault.get(input as any, { skipSelfReturn: false }) as any;\n\n    if (typeof fullInput === 'string') {\n      return { best: getFixedSizeFromImage(fullInput as any), fallback: [], log: [] };\n    }\n\n    if (!fullInput) {\n      return await thumbnailNotFound();\n    }\n\n    const parseThumbnail = async (resource: DescriptiveNormalized) => {\n      if (resource && resource.thumbnail && resource.thumbnail.length) {\n        const thumbnail = vault.get<ContentResource>(resource.thumbnail[0]);\n        const potentialThumbnails = await imageServiceLoader.getImageCandidates(thumbnail as any, dereference);\n        if (potentialThumbnails && potentialThumbnails.length) {\n          candidates.push(...potentialThumbnails);\n        }\n      }\n    };\n\n    await parseThumbnail(fullInput as any);\n\n    switch (fullInput.type) {\n      case 'Annotation': {\n        // Grab the body.\n        const contentResources = Array.isArray(fullInput.body) ? fullInput.body : [fullInput.body];\n        // @todo this could be configuration.\n        const firstContentResources = vault.get<ContentResource>(contentResources[0]);\n        if (dimensions && !(firstContentResources as any).width) {\n          (firstContentResources as any).width = dimensions.width;\n          (firstContentResources as any).height = dimensions.height;\n        }\n\n        return await imageServiceLoader.getThumbnailFromResource(\n          firstContentResources as any,\n          request,\n          dereference,\n          candidates\n        );\n      }\n\n      case 'Canvas': {\n        const canvas = fullInput as CanvasNormalized;\n\n        return getBestThumbnailAtSize(canvas.items[0], request, dereference, candidates, {\n          width: canvas.width,\n          height: canvas.height,\n        });\n      }\n\n      // Unsupported for now.\n      case 'AnnotationPage': {\n        const annotationPage = fullInput as AnnotationPageNormalized;\n        return getBestThumbnailAtSize(annotationPage.items[0], request, dereference, candidates, dimensions);\n      }\n\n      case 'Choice': {\n        const choice: ChoiceBody = fullInput as any;\n        if (!choice.items || choice.items[0]) {\n          return await thumbnailNotFound();\n        }\n        // @todo this could also be configuration, just choosing the first choice.\n        return getBestThumbnailAtSize(choice.items[0] as any, request, dereference, candidates, dimensions);\n      }\n      case 'Collection': {\n        // This one is tricky, as the manifests may not have been loaded. But we will give it a shot.\n        const collection = fullInput as CollectionNormalized;\n        const firstManifest = collection.items[0];\n        if (!firstManifest) {\n          return await thumbnailNotFound();\n        }\n        return getBestThumbnailAtSize(firstManifest, request, dereference, candidates, dimensions);\n      }\n\n      case 'Manifest': {\n        const manifest = fullInput as ManifestNormalized;\n        const firstCanvas = manifest.items[0];\n        if (!firstCanvas) {\n          return await thumbnailNotFound();\n        }\n        return getBestThumbnailAtSize(firstCanvas, request, dereference, candidates, dimensions);\n      }\n\n      case 'SpecificResource':\n      case 'Image':\n      case 'Dataset':\n      case 'Sound':\n      case 'Text':\n      case 'TextualBody':\n      case 'Video':\n        if (dimensions && !(fullInput as any).width) {\n          (fullInput as any).width = dimensions.width;\n          (fullInput as any).height = dimensions.height;\n        }\n\n        return imageServiceLoader.getThumbnailFromResource(fullInput as any, request, dereference, candidates);\n\n      // Seems unlikely these would appear, but it would be an error..\n      case 'Service': // @todo could do something with vault.\n      case 'Range':\n      case 'AnnotationCollection':\n      case 'CanvasReference':\n      case 'ContentResource':\n        return await thumbnailNotFound();\n    }\n\n    return await thumbnailNotFound();\n  }\n\n  return {\n    getBestThumbnailAtSize,\n  };\n}\n"],"names":[],"mappings":"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"}