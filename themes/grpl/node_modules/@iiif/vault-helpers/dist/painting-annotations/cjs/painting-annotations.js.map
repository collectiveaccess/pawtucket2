{"version":3,"file":"painting-annotations.js","sources":["../../../src/painting-annotations/parse-specific-resource.ts","../../../src/compat.ts","../../../src/painting-annotations/helper.ts"],"sourcesContent":["import { ContentResource } from '@iiif/presentation-3';\n\nexport function parseSpecificResource(resource: ContentResource) {\n  if (resource.type === 'SpecificResource') {\n    return [resource.source, { selector: resource.selector }];\n  }\n\n  return [resource, { selector: null }];\n}\n","export type CompatVault = {\n  get: import('@iiif/vault').Vault['get'];\n  setMetaValue: import('@iiif/vault').Vault['setMetaValue'];\n  getResourceMeta: import('@iiif/vault').Vault['getResourceMeta'];\n};\n\nconst metaState: any = {};\nexport const compatVault: CompatVault = {\n  get(nonRef: any) {\n    return nonRef;\n  },\n  setMetaValue([id, meta, key], value) {\n    const oldValue = compatVault.getResourceMeta(id, meta);\n    const oldValueItem = oldValue ? oldValue[key] : undefined;\n    const newValue = typeof value === 'function' ? (value as any)(oldValueItem) : value;\n    metaState[id] = {\n      ...(metaState[id] || {}),\n      [meta]: {\n        ...((metaState[id] || {})[meta] || {}),\n        [key]: newValue,\n      },\n    };\n  },\n  getResourceMeta: ((resource: any, metaKey?: any) => {\n    const resourceMeta = metaState[resource as any] as any;\n\n    if (!resourceMeta) {\n      return undefined;\n    }\n    if (!metaKey) {\n      return resourceMeta;\n    }\n\n    return resourceMeta[metaKey];\n  }) as any,\n};\n","import { Vault } from '@iiif/vault';\nimport {\n  AnnotationNormalized,\n  AnnotationPageNormalized,\n  CanvasNormalized,\n  ContentResource,\n  IIIFExternalWebResource,\n} from '@iiif/presentation-3';\nimport { Paintables } from './types';\nimport { parseSpecificResource } from './parse-specific-resource';\nimport { compatVault, CompatVault } from '../compat';\n\nexport function createPaintingAnnotationsHelper(vault: CompatVault = compatVault) {\n  function getAllPaintingAnnotations(canvasOrId: string | CanvasNormalized | undefined | null) {\n    const canvas = canvasOrId\n      ? typeof canvasOrId === 'string'\n        ? vault.get<CanvasNormalized>(canvasOrId)\n        : canvasOrId\n      : null;\n\n    if (!canvas) {\n      return [];\n    }\n    const annotationPages = vault.get<AnnotationPageNormalized>(canvas.items);\n    const flatAnnotations: AnnotationNormalized[] = [];\n    for (const page of annotationPages) {\n      flatAnnotations.push(...vault.get<AnnotationNormalized>(page.items));\n    }\n    return flatAnnotations;\n  }\n\n  function getPaintables(\n    paintingAnnotationsOrCanvas: string | CanvasNormalized | AnnotationNormalized[],\n    enabledChoices: string[] = []\n  ): Paintables {\n    const paintingAnnotations = Array.isArray(paintingAnnotationsOrCanvas)\n      ? paintingAnnotationsOrCanvas\n      : getAllPaintingAnnotations(paintingAnnotationsOrCanvas);\n\n    const types: string[] = [];\n    let choice: Paintables['choice'] = null;\n    const items: Paintables['items'] = [];\n\n    for (const annotation of paintingAnnotations) {\n      if (annotation.type !== 'Annotation') {\n        throw new Error(`getPaintables() accept either a canvas or list of annotations`);\n      }\n      const unknownBodies = vault.get<ContentResource>(annotation.body);\n      const bodies = Array.isArray(unknownBodies) ? unknownBodies : [unknownBodies];\n      for (const unknownBody of bodies) {\n        const [body, { selector }] = parseSpecificResource(unknownBody);\n        const type = (body.type || 'unknown').toLowerCase();\n\n        // Choice\n        if (type === 'choice') {\n          const nestedBodies = vault.get<ContentResource>(body.items) as ContentResource[];\n\n          // Which are active? By default, the first, but we could push multiple here.\n          const selected = enabledChoices.length\n            ? enabledChoices.map((cid) => nestedBodies.find((b) => b.id === cid)).filter(Boolean)\n            : [nestedBodies[0]];\n\n          if (selected.length === 0) {\n            selected.push(nestedBodies[0]);\n          }\n\n          // Store choice.\n          choice = {\n            type: 'single-choice',\n            items: nestedBodies.map((b) => ({\n              id: b.id,\n              label: (b as any).label as any,\n              selected: selected.indexOf(b) !== -1,\n            })) as any[],\n            label: (unknownBody as any).label,\n          };\n\n          // @todo insert in the right order.\n          bodies.push(...(selected as any[]));\n\n          continue;\n        }\n\n        if (types.indexOf(type) === -1) {\n          types.push(type);\n        }\n\n        items.push({\n          type: type,\n          resource: body as IIIFExternalWebResource,\n          target: annotation.target,\n          selector,\n        });\n      }\n    }\n\n    return {\n      types,\n      items,\n      choice,\n    };\n  }\n\n  function extractChoices(paintingAnnotationsOrCanvas: string | CanvasNormalized | AnnotationNormalized[]) {\n    const { choice } = getPaintables(paintingAnnotationsOrCanvas);\n    return choice;\n  }\n\n  return {\n    getAllPaintingAnnotations,\n    getPaintables,\n    extractChoices,\n  };\n}\n"],"names":["parseSpecificResource","resource","metaState","compatVault","nonRef","id","meta","key","value","oldValue","oldValueItem","newValue","metaKey","resourceMeta","createPaintingAnnotationsHelper","vault","getAllPaintingAnnotations","canvasOrId","canvas","annotationPages","flatAnnotations","page","getPaintables","paintingAnnotationsOrCanvas","enabledChoices","paintingAnnotations","types","choice","items","annotation","unknownBodies","bodies","unknownBody","body","selector","type","nestedBodies","selected","cid","b","extractChoices"],"mappings":"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"}