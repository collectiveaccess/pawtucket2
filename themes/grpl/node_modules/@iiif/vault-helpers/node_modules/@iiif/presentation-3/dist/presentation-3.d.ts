// Generated by dts-bundle-generator v6.12.0

/// <reference types="geojson" />
/// <reference types="node" />

export declare type ResourceType = "Collection" | "Manifest" | "Canvas" | "Annotation" | "AnnotationPage" | "AnnotationCollection" | "Range" | "ContentResource" | "Choice" | "CanvasReference" | "Service";
export declare type ViewingDirection = "left-to-right" | "right-to-left" | "top-to-bottom" | "bottom-to-top";
export declare type SpecificationBehaviors = "auto-advance" | "continuous" | "facing-pages" | "individuals" | "multi-part" | "no-auto-advance" | "no-nav" | "no-repeat" | "non-paged" | "hidden" | "paged" | "repeat" | "sequence" | "thumbnail-nav" | "together" | "unordered";
export declare type SpecificationTimeMode = "trim" | "scale" | "loop";
export declare type TechnicalProperties = {
	/**
	 * The URI that identifies the resource. If the resource is only available embedded  within another resource (see the [terminology section][prezi30-terminology] for an explanation of "embedded"), such as a Range within a Manifest, then the URI _MAY_ be the URI of the embedding resource with a unique fragment on the end. This is not true for Canvases, which _MUST_ have their own URI without a fragment.
	 *
	 * The value _MUST_ be a string, and the value _MUST_ be an HTTP(S) URI for resources defined in this specification. If the resource is retrievable via HTTP(S), then the URI _MUST_ be the URI at which it is published. External resources, such as profiles, _MAY_ have non-HTTP(S) URIs defined by other communities.
	 *
	 * The existence of an HTTP(S) URI in the `id` property does not mean that the URI will always be dereferencable.  If the resource with the `id` property is [embedded][prezi30-terminology], it _MAY_ also be dereferenceable. If the resource is referenced (again, see the [terminology section][prezi30-terminology] for an explanation of "referenced"), it _MUST_ be dereferenceable. The [definitions of the Resources][prezi30-resource-structure] give further guidance.
	 *
	 *  * All resource types _MUST_ have the `id` property.
	 *  * Clients _MAY_ render `id` on any resource type, and _SHOULD_ render `id` on Collections, Manifests and Canvases.
	 */
	id: string;
	/**
	 *  The type or class of the resource. For classes defined for this specification, the value of `type` will be described in the sections below describing each individual class.
	 *
	 *  For content resources, the value of `type` is drawn from other specifications. Recommendations for common content types such as image, text or audio are given in the table below.
	 *
	 *  The JSON objects that appear in the value of the `service` property will have many different classes, and can be used to distinguish the sort of service, with specific properties defined in a [registered context document][prezi30-ldce].
	 *
	 *  The value _MUST_ be a string.
	 *
	 *  * All resource types _MUST_ have the `type` property.
	 *  * Clients _MUST_ process, and _MAY_ render, `type` on any resource type.
	 */
	type: ResourceType;
	/**
	 * The specific media type (often called a MIME type) for a content resource, for example `image/jpeg`. This is important for distinguishing different formats of the same overall type of resource, such as distinguishing text in XML from plain text.
	 *
	 * Note that this is different to the `formats` property in the [Image API][image-api], which gives the extension to use within that API. It would be inappropriate to use in this case, as `format` can be used with any content resource, not just images.
	 *
	 * The value _MUST_ be a string, and it _SHOULD_ be the value of the `Content-Type` header returned when the resource is dereferenced.
	 *
	 * * A content resource _SHOULD_ have the `format` property.
	 * * Clients _MAY_ render the `format` of any content resource.
	 * * Other types of resource _MUST NOT_ have the `format` property.
	 * * Clients _SHOULD_ ignore `format` on other types of resource.
	 */
	format: string;
	/**
	 *  A schema or named set of functionality available from the resource. The profile can further clarify the `type` and/or `format` of an external resource or service, allowing clients to customize their handling of the resource that has the `profile` property.
	 *
	 *  The value _MUST_ be a string, either taken from the [profiles registry][registry-profiles] or a URI.
	 *
	 *  * Resources [referenced][prezi30-terminology] by the `seeAlso` or `service` properties _SHOULD_ have the `profile` property.
	 *  * Clients _SHOULD_ process the `profile` of a service or external resource.
	 *  * Other types of resource _MAY_ have the `profile` property.
	 *  * Clients _MAY_ process the `profile` of other types of resource.
	 */
	profile: string;
	/**
	 *  The height of the Canvas or external content resource. For content resources, the value is in pixels. For Canvases, the value does not have a unit. In combination with the width, it conveys an aspect ratio for the space in which content resources are located.
	 *
	 *  The value _MUST_ be a positive integer.
	 *
	 *  * A Canvas _MAY_ have the `height` property. If it has a `height`, it _MUST_ also have a `width`.
	 *  * Clients _MUST_ process `height` on a Canvas.
	 *  * Content resources _SHOULD_ have the `height` property, with the value given in pixels, if appropriate to the resource type.
	 *  * Clients _SHOULD_ process `height` on content resources.
	 *  * Other types of resource _MUST NOT_ have the `height` property.
	 *  * Clients _SHOULD_ ignore `height` on other types of resource.
	 */
	height: number;
	/**
	 * The width of the Canvas or external content resource. For content resources, the value is in pixels. For Canvases, the value does not have a unit. In combination with the height, it conveys an aspect ratio for the space in which content resources are located.
	 *
	 * The value _MUST_ be a positive integer.
	 *
	 *  * A Canvas _MAY_ have the `width` property. If it has a `width`, it _MUST_ also have a `height`.
	 *  * Clients _MUST_ process `width` on a Canvas.
	 *  * Content resources _SHOULD_ have the `width` property, with the value given in pixels, if appropriate to the resource type.
	 *  * Clients _SHOULD_ process `width` on content resources.
	 *  * Other types of resource _MUST NOT_ have the `width` property.
	 *  * Clients _SHOULD_ ignore `width` on other types of resource.
	 */
	width: number;
	/**
	 *  The duration of the Canvas or external content resource, given in seconds.
	 *
	 *  The value _MUST_ be a positive floating point number.
	 *
	 *  * A Canvas _MAY_ have the `duration` property.
	 *  * Clients _MUST_ process `duration` on a Canvas.
	 *  * Content resources _SHOULD_ have the `duration` property, if appropriate to the resource type.
	 *  * Clients _SHOULD_ process `duration` on content resources.
	 *  * Other types of resource _MUST NOT_ have a `duration`.
	 *  * Clients _SHOULD_ ignore `duration` on other types of resource.
	 */
	duration: number;
	/**
	 *  The direction in which a set of Canvases _SHOULD_ be displayed to the user. This specification defines four direction values in the table below. Others may be defined externally [as an extension][prezi30-ldce].
	 *
	 *  The value _MUST_ be a string.
	 *
	 *  * A Collection _MAY_ have the `viewingDirection` property.<br/>
	 *  * Clients _SHOULD_ process `viewingDirection` on a Collection.
	 *  * A Manifest _MAY_ have the `viewingDirection` property.<br/>
	 *  * Clients _SHOULD_ process `viewingDirection` on a Manifest.
	 *  * A Range _MAY_ have the `viewingDirection` property.<br/>
	 *  * Clients _MAY_ process `viewingDirection` on a Range.
	 *  * Other types of resource _MUST NOT_ have the `viewingDirection` property.<br/>
	 *  * Clients _SHOULD_ ignore `viewingDirection` on other types of resource.
	 */
	viewingDirection: ViewingDirection;
	/**
	 *  A set of user experience features that the publisher of the content would prefer the client to use when presenting the resource. This specification defines the values in the table below. Others may be defined externally as an [extension][prezi30-ldce].
	 *
	 *  In order to determine the behaviors that are governing a particular resource, there are four inheritance rules from resources that reference the current resource:
	 *  * Collections inherit behaviors from their referencing Collection.
	 *  * Manifests **DO NOT** inherit behaviors from any referencing Collections.
	 *  * Canvases inherit behaviors from their referencing Manifest, but **DO NOT** inherit behaviors from any referencing Ranges, as there might be several with different behaviors.
	 *  * Ranges inherit behaviors from any referencing Range and referencing Manifest.
	 *
	 *  Clients should interpret behaviors on a Range only when that Range is selected or is in some other way the context for the user's current interaction with the resources. A Range with the `behavior` value `continuous`, in a Manifest with the `behavior` value `paged`, would mean that the Manifest's Canvases should be rendered in a paged fashion, unless the range is selected to be viewed, and its included Canvases would be rendered in that context only as being virtually stitched together. This might occur, for example, when a physical scroll is cut into pages and bound into a codex with other pages, and the publisher would like to provide the user the experience of the scroll in its original form.
	 *
	 *  The descriptions of the behavior values have a set of which other values they are disjoint with, meaning that the same resource _MUST NOT_ have both of two or more from that set. In order to determine which is in effect, the client _SHOULD_ follow the inheritance rules above, taking the value from the closest resource. The user interface effects of the possible permutations of non-disjoint behavior values are client dependent, and implementers are advised to look for relevant recipes in the [IIIF cookbook][annex-cookbook].
	 *
	 *  __Future Clarification Anticipated__<br/>
	 *  Further clarifications about the implications of interactions between behavior values should be expected in subsequent minor releases.
	 *
	 *  The value _MUST_ be an array of strings.
	 *
	 *  * Any resource type _MAY_ have the `behavior` property with at least one item.<br/>
	 *  Clients _SHOULD_ process `behavior` on any resource type.
	 *
	 *  > | Value | Description |
	 *  | ----- | ----------- |
	 *  || **Temporal Behaviors** |
	 *  | `auto-advance` | Valid on Collections, Manifests, Canvases, and Ranges that include or are Canvases with at least the `duration` dimension. When the client reaches the end of a Canvas, or segment thereof as specified in a Range, with a duration dimension that has this behavior, it _SHOULD_ immediately proceed to the next Canvas or segment and render it. If there is no subsequent Canvas in the current context, then this behavior should be ignored. When applied to a Collection, the client should treat the first Canvas of the next Manifest as following the last Canvas of the previous Manifest, respecting any `start` property specified. Disjoint with `no-auto-advance`. |
	 *  | `no-auto-advance` | Valid on Collections, Manifests, Canvases, and Ranges that include or are Canvases with at least the `duration` dimension. When the client reaches the end of a Canvas or segment with a duration dimension that has this behavior, it _MUST NOT_ proceed to the next Canvas, if any. This is a default temporal behavior if not specified. Disjoint with `auto-advance`.|
	 *  | `repeat` | Valid on Collections and Manifests, that include Canvases that have at least the `duration` dimension. When the client reaches the end of the duration of the final Canvas in the resource, and the `behavior` value `auto-advance` is also in effect, then the client _SHOULD_ return to the first Canvas, or segment of Canvas, in the resource that has the `behavior` value `repeat` and start playing again. If the `behavior` value `auto-advance` is not in effect, then the client _SHOULD_ render a navigation control for the user to manually return to the first Canvas or segment. Disjoint with `no-repeat`.|
	 *  | `no-repeat` | Valid on Collections and Manifests, that include Canvases that have at least the `duration` dimension. When the client reaches the end of the duration of the final Canvas in the resource, the client _MUST NOT_ return to the first Canvas, or segment of Canvas. This is a default temporal behavior if not specified. Disjoint with `repeat`.|
	 *  | | **Layout Behaviors** |
	 *  | `unordered` | Valid on Collections, Manifests and Ranges. The Canvases included in resources that have this behavior have no inherent order, and user interfaces _SHOULD_ avoid implying an order to the user. Disjoint with `individuals`, `continuous`, and `paged`.|
	 *  | `individuals` | Valid on Collections, Manifests, and Ranges. For Collections that have this behavior, each of the included Manifests are distinct objects in the given order. For Manifests and Ranges, the included Canvases are distinct views, and _SHOULD NOT_ be presented in a page-turning interface. This is the default layout behavior if not specified. Disjoint with `unordered`, `continuous`, and `paged`. |
	 *  | `continuous` | Valid on Collections, Manifests and Ranges, which include Canvases that have at least `height` and `width` dimensions. Canvases included in resources that have this behavior are partial views and an appropriate rendering might display all of the Canvases virtually stitched together, such as a long scroll split into sections. This behavior has no implication for audio resources. The `viewingDirection` of the Manifest will determine the appropriate arrangement of the Canvases. Disjoint with `unordered`, `individuals` and `paged`. |
	 *  | `paged` | Valid on Collections, Manifests and Ranges, which include Canvases that have at least `height` and `width` dimensions. Canvases included in resources that have this behavior represent views that _SHOULD_ be presented in a page-turning interface if one is available. The first canvas is a single view (the first recto) and thus the second canvas likely represents the back of the object in the first canvas. If this is not the case, see the `behavior` value `non-paged`. Disjoint with `unordered`, `individuals`, `continuous`, `facing-pages` and `non-paged`. |
	 *  | `facing-pages` | Valid only on Canvases, where the Canvas has at least `height` and `width` dimensions. Canvases that have this behavior, in a Manifest that has the `behavior` value `paged`, _MUST_ be displayed by themselves, as they depict both parts of the opening. If all of the Canvases are like this, then page turning is not possible, so simply use `individuals` instead. Disjoint with `paged` and `non-paged`.|
	 *  | `non-paged` | Valid only on Canvases, where the Canvas has at least `height` and `width` dimensions. Canvases that have this behavior _MUST NOT_ be presented in a page turning interface, and _MUST_ be skipped over when determining the page order. This behavior _MUST_ be ignored if the current Manifest does not have the `behavior` value `paged`. Disjoint with `paged` and `facing-pages`. |
	 *  | | **Collection Behaviors** |
	 *  | `multi-part` | Valid only on Collections. Collections that have this behavior consist of multiple Manifests or Collections which together form part of a logical whole or a contiguous set, such as multi-volume books or a set of journal issues. Clients might render these Collections as a table of contents rather than with thumbnails, or provide viewing interfaces that can easily advance from one member to the next. Disjoint with `together`.|
	 *  | `together` | Valid only on Collections. A client _SHOULD_ present all of the child Manifests to the user at once in a separate viewing area with its own controls. Clients _SHOULD_ catch attempts to create too many viewing areas. This behavior _SHOULD NOT_ be interpreted as applying to the members of any child resources. Disjoint with `multi-part`.|
	 *  | | **Range Behaviors** |
	 *  | `sequence` | Valid only on Ranges, where the Range is [referenced][prezi30-terminology] in the `structures` property of a Manifest. Ranges that have this behavior represent different orderings of the Canvases listed in the `items` property of the Manifest, and user interfaces that interact with this order _SHOULD_ use the order within the selected Range, rather than the default order of `items`. Disjoint with `thumbnail-nav` and `no-nav`.|
	 *  | `thumbnail-nav` | Valid only on Ranges. Ranges that have this behavior _MAY_ be used by the client to present an alternative navigation or overview based on thumbnails, such as regular keyframes along a timeline for a video, or sections of a long scroll. Clients _SHOULD NOT_ use them to generate a conventional table of contents. Child Ranges of a Range with this behavior _MUST_ have a suitable `thumbnail` property. Disjoint with `sequence` and `no-nav`.|
	 *  | `no-nav` | Valid only on Ranges. Ranges that have this behavior _MUST NOT_ be displayed to the user in a navigation hierarchy. This allows for Ranges to be present that capture unnamed regions with no interesting content, such as the set of blank pages at the beginning of a book, or dead air between parts of a performance, that are still part of the Manifest but do not need to be navigated to directly. Disjoint with `sequence` and `thumbnail-nav`.|
	 *  | | **Miscellaneous Behaviors** |
	 *  | `hidden` | Valid on Annotation Collections, Annotation Pages, Annotations, Specific Resources and Choices. If this behavior is provided, then the client _SHOULD NOT_ render the resource by default, but allow the user to turn it on and off. This behavior does not inherit, as it is not valid on Collections, Manifests, Ranges or Canvases. |
	 */
	behavior: SpecificationBehaviors[] | string[];
	/**
	 *  A mode associated with an Annotation that is to be applied to the rendering of any time-based media, or otherwise could be considered to have a duration, used as a body resource of that Annotation. Note that the association of `timeMode` with the Annotation means that different resources in the body cannot have different values. This specification defines the values specified in the table below. Others may be defined externally as an [extension][prezi30-ldce].
	 *
	 *  The value _MUST_ be a string.
	 *
	 *  * An Annotation _MAY_ have the `timeMode` property.<br/>
	 *  Clients _SHOULD_ process `timeMode` on an Annotation.
	 *
	 */
	timeMode: SpecificationTimeMode | string | null;
	/**
	 *  This specification defines two values for the Web Annotation property of `motivation`, or `purpose` when used on a Specific Resource or Textual Body.
	 *
	 *  While any resource _MAY_ be the `target` of an Annotation, this specification defines only motivations for Annotations that target Canvases. These motivations allow clients to determine how the Annotation should be rendered, by distinguishing between Annotations that provide the content of the Canvas, from ones with externally defined motivations which are typically comments about the Canvas.
	 *
	 *  Additional motivations may be added to the Annotation to further clarify the intent, drawn from [extensions][prezi30-ldce] or other sources. Clients _MUST_ ignore motivation values that they do not understand. Other motivation values given in the Web Annotation specification _SHOULD_ be used where appropriate, and examples are given in the [Presentation API Cookbook][annex-cookbook].
	 *
	 *  > | Value | Description |
	 *  | ----- | ----------- |
	 *  | `painting` | Resources associated with a Canvas by an Annotation that has the `motivation` value `painting`  _MUST_ be presented to the user as the representation of the Canvas. The content can be thought of as being _of_ the Canvas. The use of this motivation with target resources other than Canvases is undefined. For example, an Annotation that has the `motivation` value `painting`, a body of an Image and the target of the Canvas is an instruction to present that Image as (part of) the visual representation of the Canvas. Similarly, a textual body is to be presented as (part of) the visual representation of the Canvas and not positioned in some other part of the user interface.|
	 *  | `supplementing` | Resources associated with a Canvas by an Annotation that has the `motivation` value `supplementing`  _MAY_ be presented to the user as part of the representation of the Canvas, or _MAY_ be presented in a different part of the user interface. The content can be thought of as being _from_ the Canvas. The use of this motivation with target resources other than Canvases is undefined. For example, an Annotation that has the `motivation` value `supplementing`, a body of an Image and the target of part of the Canvas is an instruction to present that Image to the user either in the Canvas's rendering area or somewhere associated with it, and could be used to present an easier to read representation of a diagram. Similarly, a textual body is to be presented either in the targeted region of the Canvas or otherwise associated with it, and might be OCR, a manual transcription or a translation of handwritten text, or captions for what is being said in a Canvas with audio content. |
	 */
	motivation: string | null;
};
export declare type Reference<T = string> = {
	type: T;
	id: string;
};
export type PolyEntity = Reference | string;
export declare type Required<T> = T extends object ? {
	[P in keyof T]-?: NonNullable<T[P]>;
} : T;
export declare type SomeRequired<T, K extends keyof T> = (T extends object ? {
	[P in K]-?: NonNullable<T[P]>;
} : T) & Partial<Pick<Required<T>, Exclude<keyof T, K>>>;
export declare type OmitProperties<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;
export declare type JsonLDContext = {
	"@context"?: string | string[];
};
export declare type IdOrAtId<T> = {
	id: T;
} | {
	"@id": T;
};
export declare type AuthAccessTokenService = IdOrAtId<string> & {
	profile: "http://iiif.io/api/auth/1/token" | "AuthTokenService1";
};
export declare type AuthAccessTokenServiceResponse = {
	accessToken: string;
	expiresIn?: number;
};
export declare type AuthAccessTokenServiceError = {
	error: "invalidRequest" | "missingCredentials" | "invalidCredentials" | "invalidOrigin" | "unavailable";
	description?: string;
};
export type AuthAbstractService = IdOrAtId<string> & {
	label: string;
	confirmLabel?: string;
	header?: string;
	description?: string;
	failureHeader?: string;
	failureDescription?: string;
};
export declare type AuthClickThroughService = IdOrAtId<string> & {
	profile: "http://iiif.io/api/auth/1/clickthrough";
	service: AuthAccessTokenService;
};
export declare type AuthLogoutService = AuthAbstractService & {
	profile: "http://iiif.io/api/auth/1/logout" | "AuthLogoutService1";
};
export declare type AuthLoginService = AuthAbstractService & {
	profile: "http://iiif.io/api/auth/1/login" | "AuthCookieService1";
	service: Array<AuthLoginService | AuthLogoutService>;
};
export declare type AuthKioskService = AuthAbstractService & {
	profile: "http://iiif.io/api/auth/1/kiosk";
	service: AuthAccessTokenService;
};
export declare type AuthExternalService = AuthAbstractService & {
	profile: "http://iiif.io/api/auth/1/external";
	service: AuthAccessTokenService;
};
export declare type AuthService = AuthLoginService | AuthClickThroughService | AuthKioskService | AuthExternalService;
export declare type GeoJsonService = {
	"@context": "http://geojson.org/geojson-ld/geojson-context.jsonld";
	profile: never;
} & ({
	"@id": string;
} | {
	id: string;
}) & Partial<import("geojson").GeoJSON>;
export declare type ImageServiceProfile = "http://library.stanford.edu/iiif/image-api/compliance.html#level0" | "http://library.stanford.edu/iiif/image-api/compliance.html#level1" | "http://library.stanford.edu/iiif/image-api/compliance.html#level2" | "http://library.stanford.edu/iiif/image-api/conformance.html#level0" | "http://library.stanford.edu/iiif/image-api/conformance.html#level1" | "http://library.stanford.edu/iiif/image-api/conformance.html#level2" | "http://library.stanford.edu/iiif/image-api/1.1/compliance.html#level0" | "http://library.stanford.edu/iiif/image-api/1.1/compliance.html#level1" | "http://library.stanford.edu/iiif/image-api/1.1/compliance.html#level2" | "http://library.stanford.edu/iiif/image-api/1.1/conformance.html#level0" | "http://library.stanford.edu/iiif/image-api/1.1/conformance.html#level1" | "http://library.stanford.edu/iiif/image-api/1.1/conformance.html#level2" | "http://iiif.io/api/image/1/level0.json" | "http://iiif.io/api/image/1/profiles/level0.json" | "http://iiif.io/api/image/1/level1.json" | "http://iiif.io/api/image/1/profiles/level1.json" | "http://iiif.io/api/image/1/level2.json" | "http://iiif.io/api/image/1/profiles/level2.json" | "http://iiif.io/api/image/2/level0.json" | "http://iiif.io/api/image/2/profiles/level0.json" | "http://iiif.io/api/image/2/level1.json" | "http://iiif.io/api/image/2/profiles/level1.json" | "http://iiif.io/api/image/2/level2.json" | "http://iiif.io/api/image/2/profiles/level2.json" | "http://iiif.io/api/image/3/level0.json" | "http://iiif.io/api/image/3/level1.json" | "http://iiif.io/api/image/3/level2.json" | "level0" | "level1" | "level2";
export declare type ImageSize = {
	width: number;
	height: number;
};
export declare type ImageTile = {
	width: number;
	height?: number;
	scaleFactors: number[];
	maxWidth?: number;
	maxHeight?: number;
};
export declare type ImageProfile = ImageServiceProfile | {
	"@context"?: string;
	"@type"?: "iiif:ImageProfile";
	type?: "ImageProfile";
	formats?: string[];
	qualities?: string[];
	supports?: string[];
	maxArea?: number;
	maxHeight?: number;
	maxWidth?: number;
};
export interface ImageService2 {
	"@context"?: string | string[];
	"@id": string;
	"@type": "ImageService2";
	profile: ImageProfile | ImageProfile[];
	protocol?: string;
	width?: number | null;
	height?: number | null;
	attribution?: string;
	sizes?: ImageSize[];
	tiles?: ImageTile[];
	logo?: ContentResource | ContentResource[]; // Presentation 2 service may have non-array.
	service?: Service[];
}
export interface ImageService3 {
	"@context"?: string | string[];
	id: string;
	type: "ImageService1" | "ImageService2" | "ImageService3";
	profile: "level0" | "level1" | "level2";
	protocol?: string;
	width?: number | null;
	height?: number | null;
	maxWidth?: number | null;
	maxHeight?: number | null;
	maxArea?: number | null;
	attribution?: string;
	sizes?: ImageSize[];
	tiles?: ImageTile[];
	logo?: ContentResource[]; // Presentation 2 service may have non-array.
	extraFormats?: string[];
	extraQualities?: string[];
	extraFeatures?: string[];
	service?: Service[];
}
export interface ImageService {
	"@context"?: string | string[];
	"@id"?: string;
	id: string;
	type?: "ImageService1" | "ImageService2" | "ImageService3";
	"@type"?: "ImageService1" | "ImageService2" | "ImageService3";
	profile: ImageProfile | ImageProfile[];
	protocol?: string;
	width?: number | null;
	height?: number | null;
	maxWidth?: number | null;
	maxHeight?: number | null;
	maxArea?: number | null;
	attribution?: string;
	sizes?: ImageSize[];
	tiles?: ImageTile[];
	logo?: ContentResource[]; // Presentation 2 service may have non-array.
	extraFormats?: string[];
	extraQualities?: string[];
	extraFeatures?: string[];
	service?: Service[];
}
export declare type SearchService = IdOrAtId<string> & {
	"@context": "http://iiif.io/api/search/1/context.json";
	profile: "http://iiif.io/api/search/1/search" | "SearchService1";
};
export declare type SearchServiceQueryParams = {
	q?: string;
	motivation?: string;
	date?: string;
	user?: string;
};
export declare type SearchServiceAutocomplete = IdOrAtId<string> & {
	profile: "http://iiif.io/api/search/1/autocomplete" | "AutoCompleteService1";
};
export declare type SearchServiceAutocompleteQueryParams = SearchServiceQueryParams & {
	q: string;
	min?: number;
};
export declare type SearchServiceAutocompleteResponse = IdOrAtId<string> & {
	"@context": "http://iiif.io/api/search/1/context.json";
	"@type": "search:TermList";
	ignored: string[];
	terms: Array<{
		match: string;
		url: string;
		count?: number;
		label?: string;
	}>;
};
export declare type SearchServiceSearchResponse = {
	"@context": "http://iiif.io/api/presentation/3/context.json" | string[];
	"@id": string;
	"@type": "sc:AnnotationList";
	resources: Array<{
		"@id": string;
		"@type": "oa:Annotation";
		motivation: string;
		resource: SearchServiceCommonResources | any; // this is broad.
		on: SearchServiceSearchCommonSelectors | any | Array<SearchServiceSearchCommonSelectors> | Array<any>;
		hits?: Array<{
			"@type": "search:Hit";
			annotations: string[];
			selectors: Array<SearchServiceCommonHitSelectors>;
			match?: string;
			before?: string;
			after?: string;
		}>;
	}>;
};
export declare type SearchServiceCommonHitSelectors = {
	"@type": "oa:TextQuoteSelector";
	exact: string;
	prefix?: string;
	suffix?: string;
};
export declare type SearchServiceSearchCommonSelectors = string | {
	"@id": string;
	within: {
		"@id": string;
		type: string;
		label: string;
	};
};
export declare type SearchServiceCommonResources = {
	"@type": "cnt:ContentAsText";
	chars: string;
};
export type Service = AuthService | GeoJsonService | ImageService | SearchService;
export declare type ServiceNormalized = Service;
export declare type IIIFExternalWebResource = ExternalWebResource & {
	type: ExternalResourceTypes | string;
	height?: number;
	width?: number;
	service?: Service[];
	duration?: number;
};
export declare type ContentResourceString = string;
export declare type ContentResource = EmbeddedResource | ExternalWebResource | SpecificResource | IIIFExternalWebResource;
export declare type ResourceProvider = {
	id: string;
	type: "Agent";
	label: InternationalString;
	homepage?: ContentResource[];
	logo?: ContentResource[];
	seeAlso?: ContentResource[];
};
export declare type ResourceProviderNormalized = {
	id: string;
	type: "Agent";
	label: InternationalString;
	homepage: Array<Reference<"ContentResource">>;
	logo: Array<Reference<"ContentResource">>;
	seeAlso: Array<Reference<"ContentResource">>;
};
export declare type InternationalString = {
	[language: string]: string[] | undefined;
};
export declare type MetadataItem = {
	label: InternationalString;
	value: InternationalString;
};
export declare type DescriptiveProperties = {
	/**
	 * Label
	 *
	 *   - A human readable label, name or title. The label property is intended to be displayed as a short, textual surrogate for the resource if a human needs to make a distinction between it and similar resources, for example between objects, pages, or options for a choice of images to display. The label property can be fully internationalized, and each language can have multiple values. This pattern is described in more detail in the {@link InternationalString} section.
	 *  The value of the property must be a JSON object, as described in the {@link InternationalString} section.
	 *
	 *   - A {@link Collection} must have the label property with at least one entry.
	 *   - Clients must render label on a Collection.
	 *   - A {@link Manifest} must have the label property with at least one entry.
	 *   - Clients must render label on a Manifest.
	 *   - A {@link Canvas} should have the label property with at least one entry.
	 *   - Clients must render label on a Canvas, and should generate a label for Canvases that do not have them.
	 *   - A {@link ContentResource} may have the label property with at least one entry. If there is a Choice of content resource for the same Canvas, then they should each have at least the label property with at least one entry.
	 *   - Clients may render label on content resources, and should render them when part of a Choice.
	 *   - A {@link Range} should have the label property with at least one entry.
	 *   - Clients must render label on a Range.
	 *   - An {@link AnnotationCollection} should have the label property with at least one entry.
	 *   - Clients should render label on an {@link AnnotationCollection}.
	 *   - Other types of resource may have the label property with at least one entry.
	 *   - Clients may render label on other types of resource.
	 *
	 */
	label: InternationalString | null;
	/**
	 * Metadata
	 *
	 * An ordered list of descriptions to be displayed to the user when they interact with the resource, given as pairs of human readable `label` and `value` entries. The content of these entries is intended for presentation only; descriptive semantics _SHOULD NOT_ be inferred. An entry might be used to convey information about the creation of the object, a physical description, ownership information, or other purposes.
	 *
	 * The value of the `metadata` property _MUST_ be an array of JSON objects, where each item in the array has both `label` and `value` properties. The values of both `label` and `value` _MUST_ be JSON objects, as described in the {@link InternationalString} section.
	 *
	 *   * A {@link Collection} _SHOULD_ have the `metadata` property with at least one item.
	 *   * Clients _MUST_ render `metadata` on a Collection.
	 *   * A {@link Manifest} _SHOULD_ have the `metadata` property with at least one item.
	 *   * Clients _MUST_ render `metadata` on a Manifest.
	 *   * A {@link Canvas} _MAY_ have the `metadata` property with at least one item.
	 *   * Clients _SHOULD_ render `metadata` on a Canvas.
	 *   * Other types of resource _MAY_ have the `metadata` property with at least one item.
	 *   * Clients _MAY_ render `metadata` on other types of resource.
	 *
	 *   Clients _SHOULD_ display the entries in the order provided. Clients _SHOULD_ expect to encounter long texts in the `value` property, and render them appropriately, such as with an expand button, or in a tabbed interface.
	 */
	metadata: MetadataItem[];
	/**
	 * Summary
	 *
	 * A short textual summary intended to be conveyed to the user when the `metadata` entries for the resource are not being displayed. This could be used as a brief description for item level search results, for small-screen environments, or as an alternative user interface when the `metadata` property is not currently being rendered. The `summary` property follows the same pattern as the `label` property described above.
	 *
	 * The value of the property _MUST_ be a JSON object, as described in the {@link InternationalString} section.
	 *
	 *   * A {@link Collection} _SHOULD_ have the `summary` property with at least one entry.
	 *   * Clients _SHOULD_ render `summary` on a Collection.
	 *   * A {@link Manifest} _SHOULD_ have the `summary` property with at least one entry.
	 *   * Clients _SHOULD_ render `summary` on a Manifest.
	 *   * A {@link Canvas} _MAY_ have the `summary` property with at least one entry.
	 *   * Clients _SHOULD_ render `summary` on a Canvas.
	 *   * Other types of resource _MAY_ have the `summary` property with at least one entry.
	 *   * Clients _MAY_ render `summary` on other types of resource.
	 */
	summary: InternationalString | null;
	/**
	 * Required statement
	 *
	 * Text that _MUST_ be displayed when the resource is displayed or used. For example, the `requiredStatement` property could be used to present copyright or ownership statements, an acknowledgement of the owning and/or publishing institution, or any other text that the publishing organization deems critical to display to the user. Given the wide variation of potential client user interfaces, it will not always be possible to display this statement to the user in the client's initial state. If initially hidden, clients _MUST_ make the method of revealing it as obvious as possible.
	 *
	 *    The value of the property _MUST_ be a JSON object, that has the `label` and `value` properties, in the same way as a `metadata` property entry. The values of both `label` and `value` _MUST_ be JSON objects, as described in the [languages][prezi30-languages] section.
	 *
	 *    * Any resource type _MAY_ have the `requiredStatement` property.
	 *    * Clients _MUST_ render `requiredStatement` on every resource type.
	 */
	requiredStatement: MetadataItem | null;
	/**
	 * A string that identifies a license or rights statement that applies to the content of the resource, such as the JSON of a Manifest or the pixels of an image. The value _MUST_ be drawn from the set of [Creative Commons][org-cc-licenses] license URIs, the [RightsStatements.org][org-rs-terms] rights statement URIs, or those added via the [extension][prezi30-ldce] mechanism. The inclusion of this property is informative, and for example could be used to display an icon representing the rights assertions.
	 *
	 * If displaying rights information directly to the user is the desired interaction, or a publisher-defined label is needed, then it is _RECOMMENDED_ to include the information using the `requiredStatement` property or in the `metadata` property.
	 *
	 * The value _MUST_ be a string. If the value is drawn from Creative Commons or RightsStatements.org, then the string _MUST_ be a URI defined by that specification.
	 *
	 *   * Any resource type _MAY_ have the `rights` property.
	 *   * Clients _MAY_ render `rights` on any resource type.
	 */
	rights: string | null;
	/**
	 * Nav date
	 *
	 * A date that clients may use for navigation purposes when presenting the resource to the user in a date-based user interface, such as a calendar or timeline. More descriptive date ranges, intended for display directly to the user, _SHOULD_ be included in the `metadata` property for human consumption. If the resource contains Canvases that have the `duration` property, the datetime given corresponds to the navigation datetime of the start of the resource. For example, a Range that includes a Canvas that represents a set of video content recording a historical event, the `navDate` is the datetime of the first moment of the recorded event.
	 *
	 * The value _MUST_ be an XSD dateTime literal. The value _MUST_ have a timezone, and _SHOULD_ be given in UTC with the `Z` timezone indicator, but _MAY_ instead be given as an offset of the form `+hh:mm`.
	 *
	 *  * A {@link Collection} _MAY_ have the `navDate` property.
	 *  * Clients _MAY_ render `navDate` on a Collection.
	 *  * A {@link Manifest} _MAY_ have the `navDate` property.
	 *  * Clients _MAY_ render `navDate` on a Manifest.
	 *  * A {@link Range} _MAY_ have the `navDate` property.
	 *  * Clients _MAY_ render `navDate` on a Range.
	 *  * A {@link Canvas} _MAY_ have the `navDate` property.
	 *  * Clients _MAY_ render `navDate` on a Canvas.
	 *  * Other types of resource _MUST NOT_ have the `navDate` property.
	 *  * Clients _SHOULD_ ignore `navDate` on other types of resource.
	 */
	navDate: string | null;
	/**
	 *  The language or languages used in the content of this external resource. This property is already available from the Web Annotation model for content resources that are the body or target of an Annotation, however it _MAY_ also be used for resources [referenced][prezi30-terminology] from `homepage`, `rendering`, and `partOf`.
	 *
	 *  The value _MUST_ be an array of strings. Each item in the array _MUST_ be a valid language code, as described in the [languages section][prezi30-languages].
	 *
	 *  * An external resource _SHOULD_ have the `language` property with at least one item.<br/>
	 *  * Clients _SHOULD_ process the `language` of external resources.
	 *  * Other types of resource _MUST NOT_ have the `language` property.<br/>
	 *  * Clients _SHOULD_ ignore `language` on other types of resource.
	 *
	 */
	language: string[];
	thumbnail: ContentResource[];
	provider: ResourceProvider[];
	/**
	 * A single Canvas that provides additional content for use before the main content of the resource that has the `placeholderCanvas` property is rendered, or as an advertisement or stand-in for that content. Examples include images, text and sound standing in for video content before the user initiates playback; or a film poster to attract user attention. The content provided by `placeholderCanvas` differs from a thumbnail: a client might use `thumbnail` to summarize and navigate multiple resources, then show content from `placeholderCanvas` as part of the initial presentation of a single resource. A placeholder Canvas is likely to have different dimensions to those of the Canvas(es) of the resource that has the `placeholderCanvas` property.
	 *   *
	 *   Clients _MAY_ display the content of a linked placeholder Canvas when presenting the resource. When more than one such Canvas is available, for example if `placeholderCanvas` is provided for the currently selected Range and the current Manifest, the client _SHOULD_ pick the one most specific to the content. Publishers _SHOULD NOT_ assume that the placeholder Canvas will be processed by all clients. Clients _SHOULD_ take care to avoid conflicts between time-based media in the rendered placeholder Canvas and the content of the resource that has the `placeholderCanvas` property.
	 *
	 *   The value _MUST_ be a JSON object with the `id` and `type` properties, and _MAY_ have other properties of Canvases. The value of `type` _MUST_ be the string `Canvas`. The object _MUST NOT_ have the `placeholderCanvas` property, nor the `accompanyingCanvas` property.
	 *
	 *   * A {@link Collection} _MAY_ have the `placeholderCanvas` property.
	 *   * Clients _MAY_ render `placeholderCanvas` on a Collection.
	 *   * A {@link Manifest} _MAY_ have the `placeholderCanvas` property.
	 *   * Clients _MAY_ render `placeholderCanvas` on a Manifest.
	 *   * A {@link Canvas} _MAY_ have the `placeholderCanvas` property.
	 *   * Clients _MAY_ render `placeholderCanvas` on a Canvas.
	 *   * A {@link Range} _MAY_ have the `placeholderCanvas` property.
	 *   * Clients _MAY_ render `placeholderCanvas` on a Range.
	 *   * Other types of resource _MUST NOT_ have the `placeholderCanvas` property.
	 *   * Clients _SHOULD_ ignore `placeholderCanvas` on other types of resource.
	 *
	 */
	placeholderCanvas: Canvas;
	/**
	 * A single Canvas that provides additional content for use while rendering the resource that has the `accompanyingCanvas` property. Examples include an image to show while a duration-only Canvas is playing audio; or background audio to play while a user is navigating an image-only Manifest.
	 *
	 *  Clients _MAY_ display the content of an accompanying Canvas when presenting the resource. As with `placeholderCanvas` above, when more than one accompanying Canvas is available, the client _SHOULD_ pick the one most specific to the content. Publishers _SHOULD NOT_ assume that the accompanying Canvas will be processed by all clients. Clients _SHOULD_ take care to avoid conflicts between time-based media in the accompanying Canvas and the content of the resource that has the `accompanyingCanvas` property.
	 *
	 *  The value _MUST_ be a JSON object with the `id` and `type` properties, and _MAY_ have other properties of Canvases. The value of `type` _MUST_ be the string `Canvas`. The object _MUST NOT_ have the `placeholderCanvas` property, nor the `accompanyingCanvas` property.
	 *
	 *  * A {@link Collection} _MAY_ have the `accompanyingCanvas` property.
	 *  * Clients _MAY_ render `accompanyingCanvas` on a Collection.
	 *  * A {@link Manifest} _MAY_ have the `accompanyingCanvas` property.
	 *  * Clients _MAY_ render `accompanyingCanvas` on a Manifest.
	 *  * A {@link Canvas} _MAY_ have the `accompanyingCanvas` property.
	 *  * Clients _MAY_ render `accompanyingCanvas` on a Canvas.
	 *  * A {@link Range} _MAY_ have the `accompanyingCanvas` property.
	 *  * Clients _MAY_ render `accompanyingCanvas` on a Range.
	 *  * Other types of resource _MUST NOT_ have the `accompanyingCanvas` property.
	 *  * Clients _SHOULD_ ignore `accompanyingCanvas` on other types of resource.
	 */
	accompanyingCanvas: Canvas;
	/**
	 * @deprecated since 3.0-beta - use placeholderCanvas or accompanyingCanvas
	 */
	posterCanvas: Canvas;
};
export declare type DescriptiveNormalized = OmitProperties<DescriptiveProperties, "provider" | "thumbnail" | "accompanyingCanvas" | "placeholderCanvas" | "posterCanvas"> & {
	thumbnail: Array<Reference<"ContentResource">>;
	placeholderCanvas: Reference<"Canvas"> | null;
	accompanyingCanvas: Reference<"Canvas"> | null;
	provider: Array<Reference<"Agent">>;
	/**
	 * @deprecated since 3.0-beta - use placeholderCanvas or accompanyingCanvas
	 */
	posterCanvas: Reference<"Canvas"> | null;
};
export declare type ManifestItems = Canvas;
export type ManifestOmittedTechnical = "format" | "profile" | "height" | "width" | "duration" | "timeMode";
export type ManifestOmittedDescriptive = "language";
export type ManifestOmittedLinking = "supplementary";
export type ManifestTechnical = OmitProperties<TechnicalProperties, ManifestOmittedTechnical>;
export type ManifestDescriptive = OmitProperties<DescriptiveProperties, ManifestOmittedDescriptive>;
export type ManifestStructural = StructuralProperties<ManifestItems>;
export type ManifestLinking = OmitProperties<LinkingProperties, ManifestOmittedLinking>;
export interface Manifest extends SomeRequired<ManifestTechnical, "id" | "type">, SomeRequired<ManifestDescriptive, "label">, SomeRequired<ManifestStructural, "items">, Partial<ManifestLinking>, JsonLDContext {
}
export type ManifestItemSchemas = "Canvas";
export declare type ManifestNormalized = OmitProperties<TechnicalProperties, ManifestOmittedTechnical> & OmitProperties<DescriptiveNormalized, ManifestOmittedDescriptive> & StructuralNormalized<Reference<ManifestItemSchemas>, ManifestItemSchemas> & OmitProperties<LinkingNormalized, ManifestOmittedLinking> & {
	type: "Manifest";
};
export declare type CollectionItems = Collection | Manifest;
export type CollectionOmittedTechnical = "format" | "profile" | "height" | "width" | "duration" | "timeMode";
export type CollectionOmittedDescriptive = "language";
export type CollectionOmittedStructural = "structures";
export type CollectionOmittedLinking = "start" | "supplementary";
export type CollectionTechnical = OmitProperties<TechnicalProperties, CollectionOmittedTechnical>;
export type CollectionDescriptive = OmitProperties<DescriptiveProperties, CollectionOmittedDescriptive>;
export type CollectionStructural = OmitProperties<StructuralProperties<CollectionItems>, CollectionOmittedStructural>;
export type CollectionLinking = OmitProperties<LinkingProperties, CollectionOmittedLinking>;
export interface Collection extends SomeRequired<CollectionTechnical, "id" | "type">, SomeRequired<CollectionDescriptive, "label">, SomeRequired<CollectionStructural, "items">, Partial<CollectionLinking>, JsonLDContext {
}
export declare type CollectionItemSchemas = "Collection" | "Manifest";
export declare type CollectionNormalized = OmitProperties<TechnicalProperties, CollectionOmittedTechnical> & OmitProperties<DescriptiveNormalized, CollectionOmittedDescriptive> & OmitProperties<StructuralNormalized<Reference<CollectionItemSchemas>, CollectionItemSchemas>, CollectionOmittedStructural> & OmitProperties<LinkingNormalized, CollectionOmittedLinking> & {
	type: "Collection";
};
export type AnnotationCollectionOmittedTechnical = "type" | "format" | "profile" | "height" | "width" | "duration" | "viewingDirection" | "timeMode";
export type AnnotationCollectionOmittedDescriptive = "posterCanvas" | "accompanyingCanvas" | "placeholderCanvas" | "navDate" | "language";
export type AnnotationCollectionOmittedLinking = "services" | "partOf" | "start" | "supplementary";
export type AnnotationCollectionTechnical = OmitProperties<TechnicalProperties, AnnotationCollectionOmittedTechnical>;
export type AnnotationCollectionDescriptive = OmitProperties<DescriptiveProperties, AnnotationCollectionOmittedDescriptive>;
export type AnnotationCollectionLinking = OmitProperties<LinkingProperties, AnnotationCollectionOmittedLinking>;
export declare type W3CAnnotationCollection = {
	"@context"?: string;
	id: string;
	type: "AnnotationCollection";
	label: string | string[];
	total?: number;
	first?: string | OmitProperties<W3CAnnotationPage, "partOf">;
	last?: string | OmitProperties<W3CAnnotationPage, "partOf">;
};
export interface AnnotationCollection extends SomeRequired<AnnotationCollectionTechnical, "id">, Partial<AnnotationCollectionDescriptive>, Partial<AnnotationCollectionLinking>, OmitProperties<W3CAnnotationCollection, "label"> {
	partOf: Array<Collection | Manifest | string>;
}
export interface AnnotationCollectionNormalized extends OmitProperties<TechnicalProperties, AnnotationCollectionOmittedTechnical>, OmitProperties<DescriptiveNormalized, AnnotationCollectionOmittedDescriptive>, OmitProperties<LinkingNormalized, AnnotationCollectionOmittedLinking> {
}
export type AnnotationPageOmittedTechnical = "type" | "format" | "profile" | "height" | "width" | "duration" | "viewingDirection" | "timeMode";
export type AnnotationPageOmittedDescriptive = "posterCanvas" | "accompanyingCanvas" | "placeholderCanvas" | "navDate" | "language";
export type AnnotationPageOmittedLinking = "services" | "partOf" | "start" | "supplementary";
export type AnnotationPageOmittedStructural = "annotations" | "structures";
export type AnnotationPageTechnical = OmitProperties<TechnicalProperties, AnnotationPageOmittedTechnical>;
export type AnnotationPageDescriptive = OmitProperties<DescriptiveProperties, AnnotationPageOmittedDescriptive>;
export type AnnotationPageLinking = OmitProperties<LinkingProperties, AnnotationPageOmittedLinking>;
export type AnnotationPageStructural = OmitProperties<StructuralProperties<Annotation>, AnnotationPageOmittedStructural>;
export declare type W3CAnnotationPage = {
	"@context"?: string;
	type: "AnnotationPage";
	partOf?: SomeRequired<W3CAnnotationCollection, "id"> | string;
	items?: Annotation[];
	next?: string;
	prev?: string;
	startIndex?: number;
};
export interface AnnotationPage extends SomeRequired<AnnotationPageTechnical, "id">, Partial<AnnotationPageDescriptive>, Partial<AnnotationPageLinking>, Partial<AnnotationPageStructural>, SomeRequired<OmitProperties<W3CAnnotationPage, "partOf" | "items">, "type"> {
	partOf?: Array<SomeRequired<AnnotationCollection, "id">>;
}
export type AnnotationPageItemSchemas = "Annotation";
export declare type AnnotationPageNormalized = OmitProperties<TechnicalProperties, AnnotationPageOmittedTechnical> & OmitProperties<DescriptiveNormalized, AnnotationPageOmittedDescriptive> & OmitProperties<StructuralNormalized<Reference<AnnotationPageItemSchemas>, AnnotationPageItemSchemas>, AnnotationPageOmittedStructural> & OmitProperties<LinkingNormalized, AnnotationPageOmittedLinking> & {
	type: "AnnotationPage";
};
export declare type RangeItems = Range | Canvas | string | SpecificResource<Reference<"Canvas">>;
export type RangeOmittedTechnical = "format" | "profile" | "height" | "width" | "duration" | "timeMode";
export type RangeOmittedDescriptive = "language";
export type RangeOmittedStructural = "structures";
export type RangeOmittedLinking = "services";
export type RangeTechnical = OmitProperties<TechnicalProperties, RangeOmittedTechnical>;
export type RangeDescriptive = OmitProperties<DescriptiveProperties, RangeOmittedDescriptive>;
export type RangeStructural = OmitProperties<StructuralProperties<RangeItems>, RangeOmittedStructural>;
export type RangeLinking = OmitProperties<LinkingProperties, RangeOmittedLinking>;
export interface Range extends SomeRequired<RangeTechnical, "id" | "type">, SomeRequired<RangeDescriptive, "label">, Partial<RangeStructural>, Partial<RangeLinking> {
}
export type NormalisedRangeItems = Reference<"Range"> | Reference<"Canvas"> | SpecificResource<Reference<"Canvas">>;
export declare type RangeNormalized = OmitProperties<TechnicalProperties, RangeOmittedTechnical> & OmitProperties<StructuralProperties<NormalisedRangeItems>, RangeOmittedStructural> & OmitProperties<DescriptiveNormalized, RangeOmittedDescriptive> & OmitProperties<LinkingNormalized, RangeOmittedLinking> & {
	type: "Range";
};
export declare type StructuralProperties<T> = {
	items: T[];
	annotations: AnnotationPage[];
	structures: Range[];
};
export declare type StructuralNormalized<T extends Reference<P>, P> = {
	items: T[];
	annotations: Array<Reference<"AnnotationPage">>;
	structures: Array<Reference<"Range">>;
};
export declare type CanvasItems = AnnotationPage;
export type CanvasOmittedTechnical = "format" | "profile" | "viewingDirection" | "timeMode";
export type CanvasOmittedDescriptive = "language";
export type CanvasOmittedLinking = "services" | "start" | "supplementary";
export type CanvasOmittedStructural = "structures";
export type CanvasTechnical = OmitProperties<TechnicalProperties, CanvasOmittedTechnical>;
export type CanvasDescriptive = OmitProperties<DescriptiveProperties, CanvasOmittedDescriptive>;
export type CanvasStructural = OmitProperties<StructuralProperties<CanvasItems>, CanvasOmittedStructural>;
export type CanvasLinking = OmitProperties<LinkingProperties, CanvasOmittedLinking>;
export interface Canvas extends SomeRequired<CanvasTechnical, "id" | "type">, Partial<CanvasDescriptive>, Partial<CanvasStructural>, Partial<CanvasLinking> {
	"@context"?: string | string[];
}
export type CanvasItemSchemas = "AnnotationPage";
export declare type CanvasNormalized = OmitProperties<TechnicalProperties, CanvasOmittedTechnical> & OmitProperties<DescriptiveNormalized, CanvasOmittedDescriptive> & OmitProperties<StructuralNormalized<Reference<CanvasItemSchemas>, CanvasItemSchemas>, CanvasOmittedStructural> & OmitProperties<LinkingNormalized, CanvasOmittedLinking> & {
	type: "Canvas";
};
export declare type LinkingProperties = {
	seeAlso: ContentResource[];
	service: Service[];
	services: Service[];
	rendering: ContentResource[];
	partOf: Array<ContentResource | Canvas | AnnotationCollection>;
	start: Canvas | null;
	supplementary: ContentResource[];
	/**
	 * @deprecated since 3.0-beta - use provider.logo
	 */
	logo: ContentResource[];
	homepage: ContentResource[];
};
export declare type LinkingNormalized = {
	seeAlso: Array<Reference<"ContentResource">>;
	service: Array<ServiceNormalized>;
	services: Array<ServiceNormalized>;
	rendering: Array<Reference<"ContentResource">>;
	partOf: Array<Reference<"Collection" | "Manifest">>;
	start: Reference<"Canvas" | "Selector"> | SpecificResource<Reference<"Canvas">> | null;
	supplementary: Reference<"AnnotationCollection"> | null;
	/**
	 * @deprecated since 3.0-beta - use provider.logo
	 */
	logo: Array<Reference<"ContentResource">>;
	homepage: Array<Reference<"ContentResource">>;
};
export type AnnotationOmittedTechnical = "format" | "profile" | "height" | "width" | "duration" | "viewingDirection" | "motivation";
export type AnnotationOmittedDescriptive = "posterCanvas" | "accompanyingCanvas" | "placeholderCanvas" | "navDate" | "language" | "rights";
export type AnnotationOmittedLinking = "services" | "start" | "supplementary";
export type AnnotationTechnical = OmitProperties<TechnicalProperties, AnnotationOmittedTechnical>;
export type AnnotationDescriptive = OmitProperties<DescriptiveProperties, AnnotationOmittedDescriptive>;
export type AnnotationLinking = OmitProperties<LinkingProperties, AnnotationOmittedLinking>;
export declare type W3CMotivation = "assessing" | "bookmarking" | "classifying" | "commenting" | "describing" | "editing" | "highlighting" | "identifying" | "linking" | "moderating" | "questioning" | "replying" | "tagging";
export declare type AnyMotivation = W3CMotivation | string;
export declare type LinkedResource = string | {
	id: string;
} | any;
export declare type OtherProperties = {
	// Lifecycle properties.
	created?: string;
	generated?: string;
	modified?: string;
	creator?: Creator;
	generator?: Creator;
	// Intended audience
	audience?: Audience | Audience[];
	accessibility?: string | string[];
	motivation?: AnyMotivation | AnyMotivation[];
	// Rights
	rights?: string | string[];
	// Other identities
	canonical?: string;
	via?: string | string[];
};
export declare type OtherPropertiesNormalized = {
	// Lifecycle properties.
	created: string | null;
	generated: string | null;
	modified: string | null;
	creator: CreatorNormalized;
	generator: CreatorNormalized;
	// Intended audience
	audience: Audience[];
	accessibility: string[];
	motivation: AnyMotivation[];
	// Rights
	rights: string[];
	// Other identities
	canonical: string | null;
	via: string[];
};
export declare type ResourceBaseProperties = OtherProperties & {
	role?: string;
};
export declare type ExternalResourceTypes = "Dataset" | "Image" | "Video" | "Sound" | "Text";
export declare type ExternalWebResource = ResourceBaseProperties & {
	id?: string;
	type: "Dataset" | "Image" | "Video" | "Sound" | "Text";
	format?: string;
	language?: string | string[];
	processingLanguage?: string;
	textDirection?: "ltr" | "rtl" | "auto";
};
export declare type EmbeddedResource = ResourceBaseProperties & {
	id?: string;
	type: "TextualBody";
	purpose?: string | string[];
	value?: string;
	language?: string | string[];
	format?: string;
};
export declare type SpecificResource<Type = LinkedResource> = ResourceBaseProperties & {
	id?: string;
	type?: "SpecificResource";
	state?: State | State[];
	purpose?: AnyMotivation | AnyMotivation[];
	source?: Type;
	selector?: Selector | Selector[];
	styleClass?: string;
	renderedVia?: Agent | Agent[];
	scope?: LinkedResource;
};
export declare type Body = string | EmbeddedResource | ExternalWebResource | SpecificResource;
export declare type Target = string | ExternalWebResource | SpecificResource;
export declare type RefinedBy = {
	refinedBy?: string | FragmentSelector | CssSelector | XPathSelector | TextQuoteSelector | TextPositionSelector | DataPositionSelector | SvgSelector;
};
export declare type FragmentSelector = RefinedBy & {
	type: "FragmentSelector";
	value: string;
	conformsTo?: string;
};
export declare type CssSelector = RefinedBy & {
	type: "CssSelector";
	value: string;
};
export declare type XPathSelector = RefinedBy & {
	type: "XPathSelector";
	value: string;
};
export declare type TextQuoteSelector = RefinedBy & {
	type: "TextQuoteSelector";
	exact: string;
	prefix?: string;
	suffix?: string;
};
export declare type TextPositionSelector = RefinedBy & {
	type: "TextPositionSelector";
	start: number;
	end: number;
};
export declare type DataPositionSelector = RefinedBy & {
	type: "DataPositionSelector";
	start: number;
	end: number;
};
export declare type SvgSelector = (RefinedBy & {
	type: "SvgSelector";
	value: string;
}) | {
	type: "SvgSelector";
	id: string;
};
export declare type RangeSelector<T> = {
	type: "RangeSelector";
	startSelector: T;
	endSelector: T;
};
/**
 * The Image API Selector is used to describe the operations available via the Image API in order to retrieve a
 * particular image representation. In this case the resource is the abstract image as identified by the IIIF Image
 * API base URI plus identifier, and the retrieval process involves adding the correct parameters after that base URI.
 * For example, the top left hand quadrant of an image has the region parameter of pct:0,0,50,50 which must be put into
 * the requested URI to obtain the appropriate representation.
 *
 * In order to make this as easy as possible for the situations when a IIIF Image API endpoint exists, we introduce a
 * new Selector class called ImageApiSelector. It has properties that give the parameter values needed to fill out the
 * URL structure in the request. If the property is not given, then a default should be used.
 *
 * One use of this is within the IIIF Presentation API, when a Canvas is being painted by part of an image, or an image
 * that requires rotation before display.
 */
export type ImageApiSelector = {
	type: "ImageApiSelector";
	/**
	 * The string to put in the region parameter of the URI.
	 * Default: "full"
	 */
	region?: string;
	/**
	 * The string to put in the size parameter of the URI.
	 * Default: "full"
	 */
	size?: string;
	/**
	 * The string to put in the rotation parameter of the URI. Note that this must be a string in order to allow
	 * mirroring, for example “!90”.
	 * Default: "0"
	 */
	rotation?: string;
	/**
	 * The string to put in the quality parameter of the URI.
	 * Default: "default"
	 */
	quality?: string;
	/**
	 * The string to put in the format parameter of the URI. Note that the ‘.’ character is not part of the format,
	 * just the URI syntax.
	 * Default: "jpg"
	 */
	format?: string;
};
/**
 * There are common use cases in which a point, rather than a range or area, is the target of the Annotation. For
 * example, putting a pin in a map should result in an exact point, not a very small rectangle. Points in time are not
 * very short durations, and user interfaces should also treat these differently. This is particularly important when
 * zooming in (either spatially or temporally) beyond the scale of the frame of reference. Even if the point takes up a
 * 10 by 10 pixel square at the user’s current resolution, it is not a rectangle bounding an area.
 *
 * It is not possible to select a point using URI Fragments with the Media Fragment specification, as zero-sized
 * fragments are not allowed. In order to fulfill the use cases, this specification defines a new Selector class
 * called PointSelector.
 */
export type PointSelector = {
	type: "PointSelector";
	/**
	 * Optional. An integer giving the x coordinate of the point, relative to the dimensions of the target resource.
	 */
	x?: number;
	/**
	 * Optional. An integer giving the y coordinate of the point, relative to the dimensions of the target resource.
	 */
	y?: number;
	/**
	 * Optional. A floating point number giving the time of the point in seconds, relative to the duration of the target
	 * resource.
	 */
	t?: number;
};
export type AudioContentSelector = {
	type: "AudioContentSelector";
};
export type VisualContentSelector = {
	type: "VisualContentSelector";
};
export declare type Selector = string | FragmentSelector | CssSelector | XPathSelector | TextQuoteSelector | TextPositionSelector | DataPositionSelector | SvgSelector | ImageApiSelector | PointSelector | AudioContentSelector | VisualContentSelector | RangeSelector<FragmentSelector> | RangeSelector<CssSelector> | RangeSelector<XPathSelector> | RangeSelector<TextQuoteSelector> | RangeSelector<TextPositionSelector> | RangeSelector<DataPositionSelector> | RangeSelector<SvgSelector> | RangeSelector<PointSelector>;
export declare type State = BasicState | TimeState | RequestHeaderState;
export declare type BasicState = RefinedByState & {
	id: string;
};
export declare type RefinedByState = {
	refinedBy?: FragmentSelector | CssSelector | XPathSelector | TextQuoteSelector | TextPositionSelector | DataPositionSelector | SvgSelector | State;
};
export declare type TimeState = (RefinedByState & {
	type: "TimeState";
	sourceDate: string | string[];
	cached?: string | string[];
}) | (RefinedByState & {
	type: "TimeState";
	sourceDateStart: string;
	sourceDateEnd: string;
	cached?: string | string[];
});
export declare type RequestHeaderState = RefinedByState & {
	type: "HttpRequestState";
	value: string;
};
export declare type Stylesheet = {
	id: string;
	type: "CssStylesheet";
} | {
	type: "CssStylesheet";
	format?: string;
	value?: string | string[];
};
export declare type ChoiceBody = {
	id?: string;
	type: "Choice";
	items: Body[];
};
export declare type ChoiceTarget = {
	type: "Choice";
	items: Target[];
};
export declare type Creator = string | string[] | Agent | Agent[];
export declare type CreatorNormalized = string[] | Agent[];
export declare type W3CAnnotationBody = Body | ChoiceBody;
export declare type W3CAnnotationTarget = Target | ChoiceTarget | TargetComposite | TargetList | TargetIndependents;
export declare type AnnotationBody = ChoiceBody | ContentResource | ContentResourceString;
export declare type AnnotationTarget = W3CAnnotationTarget | ContentResource | ContentResourceString;
export declare type TargetComposite = {
	type: "Composite";
	items: Array<Target | string>;
};
export declare type TargetList = {
	type: "List";
	items: Array<Target | string>;
};
export declare type TargetIndependents = {
	type: "Independents";
	items: Array<Target | string>;
};
export declare type Audience = {
	id: string;
	type: "Audience" | string;
	[T: string]: string;
};
export declare type Agent = {
	id?: string;
	type?: "Person" | "Organisation" | "Software";
	name?: string | string[];
	nickname?: string;
	account?: string;
	email?: string;
	email_sha1?: string;
	homepage?: string | string[];
	// ?
	"schema:softwareVersion"?: any;
};
export declare type AnnotationW3C = OtherProperties & {
	"@context"?: "http://www.w3.org/ns/anno.jsonld";
	body?: W3CAnnotationBody | W3CAnnotationBody[];
	bodyValue?: string;
	target?: W3CAnnotationTarget | W3CAnnotationTarget[];
	canonical?: string;
	via?: string;
	stylesheet?: string | Stylesheet;
};
export declare type AnnotationW3cNormalised = JsonLDContext & Partial<OtherPropertiesNormalized> & {
	body: Array<Reference<"ContentResource">>;
	bodyValue?: string | null;
	// Removed until normalisation is resolved.
	// target: Array<Reference<'ContentResource'>>;
	target?: W3CAnnotationTarget | W3CAnnotationTarget[];
	stylesheet?: Stylesheet | null;
};
export interface Annotation extends SomeRequired<AnnotationTechnical, "id" | "type">, Partial<AnnotationDescriptive>, Partial<AnnotationLinking>, Partial<OmitProperties<AnnotationW3C, "body" | "target">> {
	body?: AnnotationBody | AnnotationBody[];
	target?: AnnotationTarget | AnnotationTarget[];
}
export interface AnnotationNormalized extends SomeRequired<OmitProperties<TechnicalProperties, AnnotationOmittedTechnical>, "id" | "type">, Partial<OmitProperties<DescriptiveNormalized, AnnotationOmittedDescriptive>>, Partial<OmitProperties<LinkingNormalized, AnnotationOmittedLinking>>, AnnotationW3cNormalised {
}

export {};
