import * as typesafe_actions from 'typesafe-actions';
import { ActionType } from 'typesafe-actions';
import { CollectionNormalized, ManifestNormalized, CanvasNormalized, AnnotationPageNormalized, AnnotationCollection, AnnotationNormalized, ContentResource, RangeNormalized, ServiceNormalized, Selector, ResourceProviderNormalized } from '@iiif/presentation-3';

declare const ADD_MAPPING = "@iiif/ADD_MAPPING";
declare const ADD_MAPPINGS = "@iiif/ADD_MAPPINGS";
declare const addMapping: typesafe_actions.PayloadActionCreator<"@iiif/ADD_MAPPING", {
    id: string;
    type: string;
}>;
declare const addMappings: typesafe_actions.PayloadActionCreator<"@iiif/ADD_MAPPINGS", {
    mapping: {
        [id: string]: string;
    };
}>;
declare const mappingActions: {
    addMapping: typesafe_actions.PayloadActionCreator<"@iiif/ADD_MAPPING", {
        id: string;
        type: string;
    }>;
    addMappings: typesafe_actions.PayloadActionCreator<"@iiif/ADD_MAPPINGS", {
        mapping: {
            [id: string]: string;
        };
    }>;
};
declare type MappingActions = ActionType<typeof mappingActions>;

declare const SET_META_VALUE = "@iiif/SET_META_VALUE";
declare const SET_META_VALUE_DYNAMIC = "@iiif/SET_META_VALUE_DYNAMIC";
declare const UNSET_META_VALUE = "@iiif/UNSET_META_VALUE";
declare const metaActions: {
    setMetaValue: typesafe_actions.PayloadActionCreator<"@iiif/SET_META_VALUE", {
        id: string;
        meta: string;
        key: string;
        value: any;
    }>;
    setMetaValueDynamic: typesafe_actions.PayloadActionCreator<"@iiif/SET_META_VALUE_DYNAMIC", {
        id: string;
        meta: string;
        key: string;
        updateValue: (oldValue: any) => any;
    }>;
    unsetMetaValue: typesafe_actions.PayloadActionCreator<"@iiif/UNSET_META_VALUE", {
        id: string;
        meta: string;
        key: string;
    }>;
};
declare type MetaActions = ActionType<typeof metaActions>;

declare const RESOURCE_ERROR = "RESOURCE_ERROR";
declare const RESOURCE_LOADING = "RESOURCE_LOADING";
declare const RESOURCE_READY = "RESOURCE_READY";
declare const REQUEST_RESOURCE = "@iiif/REQUEST_RESOURCE";
declare const REQUEST_ERROR = "@iiif/REQUEST_ERROR";
declare const REQUEST_MISMATCH = "@iiif/REQUEST_MISMATCH";
declare const REQUEST_COMPLETE = "@iiif/REQUEST_COMPLETE";
declare const REQUEST_OFFLINE_RESOURCE = "@iiif/REQUEST_OFFLINE_RESOURCE";
declare const requestResource: typesafe_actions.PayloadActionCreator<"@iiif/REQUEST_RESOURCE", {
    id: string;
}>;
declare const requestError: typesafe_actions.PayloadActionCreator<"@iiif/REQUEST_ERROR", {
    id: string;
    message: string;
}>;
declare const requestMismatch: typesafe_actions.PayloadActionCreator<"@iiif/REQUEST_MISMATCH", {
    requestId: string;
    actualId: string;
}>;
declare const requestComplete: typesafe_actions.PayloadActionCreator<"@iiif/REQUEST_COMPLETE", {
    id: string;
}>;
declare const requestOfflineResource: typesafe_actions.PayloadActionCreator<"@iiif/REQUEST_OFFLINE_RESOURCE", {
    id: string;
    entity: unknown;
}>;
declare const requestActions: {
    requestResource: typesafe_actions.PayloadActionCreator<"@iiif/REQUEST_RESOURCE", {
        id: string;
    }>;
    requestError: typesafe_actions.PayloadActionCreator<"@iiif/REQUEST_ERROR", {
        id: string;
        message: string;
    }>;
    requestMismatch: typesafe_actions.PayloadActionCreator<"@iiif/REQUEST_MISMATCH", {
        requestId: string;
        actualId: string;
    }>;
    requestComplete: typesafe_actions.PayloadActionCreator<"@iiif/REQUEST_COMPLETE", {
        id: string;
    }>;
    requestOfflineResource: typesafe_actions.PayloadActionCreator<"@iiif/REQUEST_OFFLINE_RESOURCE", {
        id: string;
        entity: unknown;
    }>;
};
declare type RequestActions = ActionType<typeof requestActions>;

declare type MetaState = Record<string, Record<string, Record<string, any>>>;
declare type RequestState = {
    [id: string]: {
        loadingState: 'RESOURCE_ERROR' | 'RESOURCE_LOADING' | 'RESOURCE_READY';
        uriMismatch: boolean;
        requestUri: string;
        resourceUri: string;
        error?: string;
    };
};
declare type Entities = {
    Collection: {
        [id: string]: CollectionNormalized;
    };
    Manifest: {
        [id: string]: ManifestNormalized;
    };
    Canvas: {
        [id: string]: CanvasNormalized;
    };
    AnnotationPage: {
        [id: string]: AnnotationPageNormalized;
    };
    AnnotationCollection: {
        [id: string]: AnnotationCollection;
    };
    Annotation: {
        [id: string]: AnnotationNormalized;
    };
    ContentResource: {
        [id: string]: ContentResource;
    };
    Range: {
        [id: string]: RangeNormalized;
    };
    Service: {
        [id: string]: ServiceNormalized;
    };
    Selector: {
        [id: string]: Selector;
    };
    Agent: {
        [id: string]: ResourceProviderNormalized;
    };
};
declare type EntityStore<Meta extends MetaState = MetaState> = {
    entities: Entities;
    mapping: Record<string, string>;
    requests: RequestState;
    meta: Meta;
};
declare type AllActions = MappingActions | RequestActions | EntityActions | MetaActions;

declare const IMPORT_ENTITIES = "@iiif/IMPORT_ENTITIES";
declare const MODIFY_ENTITY_FIELD = "@iiif/MODIFY_ENTITY_FIELD";
declare const REORDER_ENTITY_FIELD = "@iiif/REORDER_ENTITY_FIELD";
declare const ADD_REFERENCE = "@iiif/ADD_REFERENCE";
declare const REMOVE_REFERENCE = "@iiif/REMOVE_REFERENCE";
declare const importEntities: typesafe_actions.PayloadActionCreator<"@iiif/IMPORT_ENTITIES", {
    entities: Partial<Entities>;
}>;
declare const modifyEntityField: typesafe_actions.PayloadActionCreator<"@iiif/MODIFY_ENTITY_FIELD", {
    type: keyof Entities;
    id: string;
    key: string;
    value: any;
}>;
declare const reorderEntityField: typesafe_actions.PayloadActionCreator<"@iiif/REORDER_ENTITY_FIELD", {
    type: keyof Entities;
    id: string;
    key: string;
    startIndex: number;
    endIndex: number;
}>;
declare const addReference: typesafe_actions.PayloadActionCreator<"@iiif/ADD_REFERENCE", {
    type: keyof Entities;
    id: string;
    key: string;
    index?: number | undefined;
    reference: {
        id: string;
        type: string;
    } & any;
}>;
declare const removeReference: typesafe_actions.PayloadActionCreator<"@iiif/REMOVE_REFERENCE", {
    type: keyof Entities;
    id: string;
    key: string;
    index?: number | undefined;
    reference: {
        id: string;
        type: string;
    } & any;
}>;
declare const entityActions: {
    importEntities: typesafe_actions.PayloadActionCreator<"@iiif/IMPORT_ENTITIES", {
        entities: Partial<Entities>;
    }>;
    modifyEntityField: typesafe_actions.PayloadActionCreator<"@iiif/MODIFY_ENTITY_FIELD", {
        type: keyof Entities;
        id: string;
        key: string;
        value: any;
    }>;
    reorderEntityField: typesafe_actions.PayloadActionCreator<"@iiif/REORDER_ENTITY_FIELD", {
        type: keyof Entities;
        id: string;
        key: string;
        startIndex: number;
        endIndex: number;
    }>;
    addReference: typesafe_actions.PayloadActionCreator<"@iiif/ADD_REFERENCE", {
        type: keyof Entities;
        id: string;
        key: string;
        index?: number | undefined;
        reference: {
            id: string;
            type: string;
        } & any;
    }>;
    removeReference: typesafe_actions.PayloadActionCreator<"@iiif/REMOVE_REFERENCE", {
        type: keyof Entities;
        id: string;
        key: string;
        index?: number | undefined;
        reference: {
            id: string;
            type: string;
        } & any;
    }>;
};
declare type EntityActions = ActionType<typeof entityActions>;

declare const BATCH_ACTIONS = "@iiif/BATCH";
declare const BATCH_IMPORT = "@iiif/BATCH_IMPORT";
declare const batchActions: typesafe_actions.PayloadActionCreator<"@iiif/BATCH", {
    actions: AllActions[];
}>;
declare const batchImport: typesafe_actions.PayloadActionCreator<"@iiif/BATCH_IMPORT", {
    state: EntityStore;
}>;
declare type BatchAction = ActionType<typeof batchActions | typeof batchImport>;

export { ADD_MAPPING, ADD_MAPPINGS, ADD_REFERENCE, BATCH_ACTIONS, BATCH_IMPORT, BatchAction, EntityActions, IMPORT_ENTITIES, MODIFY_ENTITY_FIELD, MappingActions, MetaActions, REMOVE_REFERENCE, REORDER_ENTITY_FIELD, REQUEST_COMPLETE, REQUEST_ERROR, REQUEST_MISMATCH, REQUEST_OFFLINE_RESOURCE, REQUEST_RESOURCE, RESOURCE_ERROR, RESOURCE_LOADING, RESOURCE_READY, RequestActions, SET_META_VALUE, SET_META_VALUE_DYNAMIC, UNSET_META_VALUE, addMapping, addMappings, addReference, batchActions, batchImport, entityActions, importEntities, mappingActions, metaActions, modifyEntityField, removeReference, reorderEntityField, requestActions, requestComplete, requestError, requestMismatch, requestOfflineResource, requestResource };
