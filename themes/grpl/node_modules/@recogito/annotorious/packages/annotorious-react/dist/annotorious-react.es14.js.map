{"version":3,"file":"annotorious-react.es14.js","sources":["../src/openseadragon/OpenSeadragonPopup.tsx"],"sourcesContent":["import { ReactNode, useEffect, useRef, useState } from 'react';\nimport { ImageAnnotation } from '@annotorious/annotorious';\nimport OpenSeadragon from 'openseadragon';\nimport { AnnotoriousPopupProps, Draggable } from '../AnnotoriousPopup';\nimport { useViewer } from './OpenSeadragonAnnotator';\nimport { useSelection } from '../Annotorious';\nimport { setPosition } from './setPosition';\n\nexport type OpenSeadragonPopupProps = AnnotoriousPopupProps & {\n\n  viewer: OpenSeadragon.Viewer\n\n}\n\nexport type OpenSeadragonPopupContainerProps = {\n\n  popup(props: OpenSeadragonPopupProps): ReactNode\n\n}\n\nexport const OpenSeadragonPopup = (props: OpenSeadragonPopupContainerProps) => {\n\n  const el = useRef<HTMLDivElement>(null);\n\n  const viewer = useViewer();\n\n  const { selected } = useSelection<ImageAnnotation>();\n\n  const [selectedIds, setSelectedIds] = useState<string[]>([]);\n\n  const [dragged, setDragged] = useState(false);\n\n  const onDragStart = () => setDragged(true);\n\n  const updatePosition = () => {\n    // Note: this popup only supports a single selection\n    const annotation = selected[0].annotation;\n    setPosition(viewer, annotation, el.current);\n  }\n\n  const equal = (a: string[], b: string[]) => \n    a.every(str => b.includes(str)) && b.every(str => a.includes(str));\n\n  useEffect(() => {\n    // Reset drag flag if selected IDs have changed\n    const nextIds = selected.map(({ annotation }) => annotation.id);\n\n    if (!equal(selectedIds, nextIds)) {\n      setDragged(false);\n      setSelectedIds(nextIds);\n    }\n  }, [selected]);\n\n  useEffect(() => {\n    if (!el.current) return;\n\n    if (!dragged) updatePosition();\n\n    const onUpdateViewport = () => {\n      if (!dragged) updatePosition();\n    }\n\n    viewer.addHandler('update-viewport', onUpdateViewport);\n\n    return () => {\n      viewer.removeHandler('update-viewport', onUpdateViewport);\n    }\n  }, [selected, dragged]);\n  \n  return selected.length > 0 ? (\n    <Draggable \n      ref={el} \n      key={selected.map(({ annotation }) => annotation.id).join('-')} \n      className=\"a9s-popup a9s-osd-popup\" \n      onDragStart={onDragStart}>\n\n      {props.popup({ viewer, selected })}\n      \n    </Draggable>\n  ) : null;\n\n}"],"names":["OpenSeadragonPopup","props","el","useRef","viewer","useViewer","selected","useSelection","selectedIds","setSelectedIds","useState","dragged","setDragged","onDragStart","updatePosition","annotation","setPosition","equal","a","b","str","useEffect","nextIds","onUpdateViewport","jsx","Draggable"],"mappings":";;;;;;AAoBa,MAAAA,IAAqB,CAACC,MAA4C;AAEvE,QAAAC,IAAKC,EAAuB,IAAI,GAEhCC,IAASC,KAET,EAAE,UAAAC,MAAaC,KAEf,CAACC,GAAaC,CAAc,IAAIC,EAAmB,CAAE,CAAA,GAErD,CAACC,GAASC,CAAU,IAAIF,EAAS,EAAK,GAEtCG,IAAc,MAAMD,EAAW,EAAI,GAEnCE,IAAiB,MAAM;AAErB,UAAAC,IAAaT,EAAS,CAAC,EAAE;AACnB,IAAAU,EAAAZ,GAAQW,GAAYb,EAAG,OAAO;AAAA,EAAA,GAGtCe,IAAQ,CAACC,GAAaC,MAC1BD,EAAE,MAAM,OAAOC,EAAE,SAASC,CAAG,CAAC,KAAKD,EAAE,MAAM,OAAOD,EAAE,SAASE,CAAG,CAAC;AAEnE,SAAAC,EAAU,MAAM;AAER,UAAAC,IAAUhB,EAAS,IAAI,CAAC,EAAE,YAAAS,QAAiBA,EAAW,EAAE;AAE9D,IAAKE,EAAMT,GAAac,CAAO,MAC7BV,EAAW,EAAK,GAChBH,EAAea,CAAO;AAAA,EACxB,GACC,CAAChB,CAAQ,CAAC,GAEbe,EAAU,MAAM;AACd,QAAI,CAACnB,EAAG;AAAS;AAEjB,IAAKS,KAAwBG;AAE7B,UAAMS,IAAmB,MAAM;AAC7B,MAAKZ,KAAwBG;IAAA;AAGxB,WAAAV,EAAA,WAAW,mBAAmBmB,CAAgB,GAE9C,MAAM;AACJ,MAAAnB,EAAA,cAAc,mBAAmBmB,CAAgB;AAAA,IAAA;AAAA,EAC1D,GACC,CAACjB,GAAUK,CAAO,CAAC,GAEfL,EAAS,SAAS,IACvB,gBAAAkB;AAAA,IAACC;AAAA,IAAA;AAAA,MACC,KAAKvB;AAAA,MAEL,WAAU;AAAA,MACV,aAAAW;AAAA,MAEC,UAAMZ,EAAA,MAAM,EAAE,QAAAG,GAAQ,UAAAE,GAAU;AAAA,IAAA;AAAA,IAJ5BA,EAAS,IAAI,CAAC,EAAE,YAAAS,EAAA,MAAiBA,EAAW,EAAE,EAAE,KAAK,GAAG;AAAA,EAO7D,IAAA;AAEN;"}