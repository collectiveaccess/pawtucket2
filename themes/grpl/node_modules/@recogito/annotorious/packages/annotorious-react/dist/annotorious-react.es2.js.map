{"version":3,"file":"annotorious-react.es2.js","sources":["../src/Annotorious.tsx"],"sourcesContent":["import { createContext, forwardRef, ReactNode} from 'react';\nimport { useContext, useEffect, useImperativeHandle, useState } from 'react';\nimport { Annotation, Annotator, Store, StoreChangeEvent } from '@annotorious/core';\nimport { useDebounce } from './useDebounce';\n\ninterface Selection<T extends Annotation = Annotation> {\n\n  selected: { annotation: T, editable?: boolean }[];\n\n  pointerEvent?: PointerEvent;\n\n}\n\nexport interface AnnotoriousContextState {\n\n  anno: Annotator;\n\n  setAnno(anno: Annotator<Annotation, unknown>): void;\n\n  annotations: Annotation[];\n\n  selection: Selection;\n\n}\n\nexport const AnnotoriousContext = createContext({ \n\n  anno: undefined, \n\n  setAnno: undefined, \n\n  annotations: [], \n\n  selection: { selected: [] }\n\n});\n\nexport const Annotorious = forwardRef<Annotator, { children: ReactNode }>((props: { children: ReactNode }, ref) => {\n\n  const [anno, setAnno] = useState<Annotator>(null);\n\n  const [annotations, setAnnotations] = useState<Annotation[]>([]);\n\n  const [selection, setSelection] = useState<Selection>({ selected: [] });\n\n  useImperativeHandle(ref, () => anno);\n\n  useEffect(() => {\n    if (anno) {\n      const { selection, store } = anno.state;\n\n      // Components below <Annotorious /> may have\n      // loaded annotations into the store already! \n      if (store.all().length > 0)\n        setAnnotations(store.all());\n\n      // Keeps annotations in sync with a React state,\n      // so clients can render components the usual React way.\n      const onStoreChange = (event: StoreChangeEvent<Annotation>) =>\n        setAnnotations(() => store.all());\n\n      store.observe(onStoreChange);\n\n      // Keep selection in sync with a react state, and resolve them\n      // from IDs to annotations automatically, for convenience\n      let selectionStoreObserver: (event: StoreChangeEvent<Annotation>) => void;\n\n      const unsubscribeSelection = selection.subscribe(({ selected, pointerEvent }) => {\n        if (selectionStoreObserver) \n          store.unobserve(selectionStoreObserver);\n\n        const resolved = (selected || [])\n          .map(({ id, editable }) => ({ annotation: store.getAnnotation(id), editable }));\n\n        setSelection({ selected: resolved, pointerEvent });\n\n        selectionStoreObserver = event => {\n          const { updated } = event.changes;\n\n          setSelection(({ selected }) => ({\n            selected: selected.map(({ annotation, editable }) => {\n              const next = updated.find(u => u.oldValue.id === annotation.id);\n              return next ? { annotation: next.newValue, editable } : { annotation, editable };\n            })\n          }));\n        }\n\n        store.observe(selectionStoreObserver, { annotations: selected.map(({ id }) => id) });\n      });\n\n      return () => {\n        store.unobserve(onStoreChange);\n        unsubscribeSelection();\n      }\n    }\n  }, [anno]);\n\n  return (\n    <AnnotoriousContext.Provider value={{ \n      anno, \n      setAnno,\n      annotations, \n      selection \n    }}>\n       {props.children}\n    </AnnotoriousContext.Provider>\n  )\n\n});\n\nexport const useAnnotator = <T extends Annotator<any, unknown>>() => {\n  const { anno } = useContext(AnnotoriousContext);\n  return anno as T;\n}\n\nexport const useAnnotationStore = <T extends Store<Annotation>>() => {\n  const { anno } = useContext(AnnotoriousContext);\n  return anno?.state.store as T | undefined;\n}\n\nconst _useAnnotations = <T extends Annotation>() => {\n  const { annotations } = useContext(AnnotoriousContext);\n  return annotations as T[];\n}\n\nconst _useAnnotationsDebouced = <T extends Annotation>(debounce: number) => {\n  const { annotations } = useContext(AnnotoriousContext);\n  return useDebounce(annotations, debounce) as T[];\n}\n\nexport const useAnnotations = <T extends Annotation>(debounce?: number) =>\n  debounce ? _useAnnotationsDebouced<T>(debounce) : _useAnnotations<T>();\n\nexport const useSelection = <T extends Annotation>() => {\n  const { selection } = useContext(AnnotoriousContext);\n  return selection as Selection<T>;\n}\n\nexport const useAnnotatorUser = () => {\n  const { anno } = useContext(AnnotoriousContext);\n  return anno?.getUser();\n}\n\nconst _useViewportState = <T extends Annotation>() => {\n  const { anno } = useContext(AnnotoriousContext);\n\n  const [inViewport, setInViewport] = useState<T[]>([]);\n\n  useEffect(() => {\n    if (anno) {\n      const { store, viewport} = anno.state;\n\n      if (!viewport)\n        return;\n\n      // Keep viewport annotations in sync with a react state, and resolve them\n      // from IDs to annotations automatically, for convenience\n      let viewportStoreObserver: (event: StoreChangeEvent<T>) => void;\n\n      const unsubscribeViewport = viewport.subscribe(ids => {\n        if (viewportStoreObserver) \n          store.unobserve(viewportStoreObserver);\n\n        const resolved = ids.map(id => store.getAnnotation(id)) as T[];\n        setInViewport(resolved);\n\n        viewportStoreObserver = event => {\n          const { updated } = event.changes;\n\n          setInViewport(annotations => annotations.map(annotation => {\n            const next = updated.find(u => u.oldValue.id === annotation.id);\n            return next ? next.newValue : annotation;\n          }));\n        }\n\n        store.observe(viewportStoreObserver, { annotations: ids });\n      });\n\n      return () => {\n        unsubscribeViewport();\n      }\n    }\n  }, [anno]);\n\n  return inViewport;\n}\n\nconst _useViewportStateDebounced =  <T extends Annotation>(debounce: number) => {\n  const inViewport = _useViewportState();\n  return useDebounce(inViewport, debounce) as T[];\n}\n\nexport const useViewportState =  <T extends Annotation>(debounce?: number) =>\n  debounce ? _useViewportStateDebounced<T>(debounce) : _useViewportState<T>();\n"],"names":["AnnotoriousContext","createContext","Annotorious","forwardRef","props","ref","anno","setAnno","useState","annotations","setAnnotations","selection","setSelection","useImperativeHandle","useEffect","store","onStoreChange","event","selectionStoreObserver","unsubscribeSelection","selected","pointerEvent","resolved","id","editable","updated","annotation","next","u","jsx","useAnnotator","useContext","useAnnotationStore","_useAnnotations","_useAnnotationsDebouced","debounce","useDebounce","useAnnotations","useSelection","useAnnotatorUser","_useViewportState","inViewport","setInViewport","viewport","viewportStoreObserver","unsubscribeViewport","ids","_useViewportStateDebounced","useViewportState"],"mappings":"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"}