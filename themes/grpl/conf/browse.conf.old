cache_timeout = 0

#
#
#
browseTypes = {
	images = {
		displayName = _(Images),
		labelSingular = _("image"),
 		labelPlural = _("images"),
		table = ca_objects,

		restrictToTypes = [image],
#		dontExpandTypesHierarchically = true,
		availableFacets = [],

		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			images = {},
			list = {},
			map = {
				data = ca_objects.address_info.geocode_coord,
				width = 100%,
				height = 600px,
				minZoomLevel = 2,
				maxZoomLevel = 18,
				display = {
					labelTemplate = <l>^ca_objects.preferred_labels.name</l> (^ca_objects.idno),
					contentTemplate = <div style='float:left; margin:0px 10px 10px 0px;'>^ca_object_representations.media.icon</div><p>^ca_objects.description</p>
				}
			},
			timeline = {
				data = ca_objects.creation_date,
				display = {
					title_template = <l>^ca_objects.preferred_labels.name</l> (^ca_objects.idno),
					description_template = <p>^ca_objects.description</p>,
					credit_template = ^ca_objects.rightsStatement.rightsStatement_text,
					caption_template = <em>^ca_objects.caption</em>,
					image = ^ca_object_representations.media.small,
					icon = ^ca_object_representations.media.icon
				}
			}
		},
		sortBy = {
			Identifier = ca_objects.idno,
			Title = ca_object_labels.name
		},
		# --- default sort direction for the sortBy options
		sortDirection = {
			Identifier = asc,
			Title = desc
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown,
		options = {
			selectMediaUsingRelationshipTypes = [relationshipType],
			selectMediaUsingTypes = [objectType],
			extendedInformationTemplate = ^ca_objects.description
		}
	},

	publications = {
		displayName = _(Publications),
		labelSingular = _("publication"),
 		labelPlural = _("publications"),
		table = ca_objects,

		restrictToTypes = [publication],
#		dontExpandTypesHierarchically = true,
		availableFacets = [],

		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			images = {},
			list = {},
			map = {
				data = ca_objects.address_info.geocode_coord,
				width = 100%,
				height = 600px,
				minZoomLevel = 2,
				maxZoomLevel = 18,
				display = {
					labelTemplate = <l>^ca_objects.preferred_labels.name</l> (^ca_objects.idno),
					contentTemplate = <div style='float:left; margin:0px 10px 10px 0px;'>^ca_object_representations.media.icon</div><p>^ca_objects.description</p>
				}
			},
			timeline = {
				data = ca_objects.creation_date,
				display = {
					title_template = <l>^ca_objects.preferred_labels.name</l> (^ca_objects.idno),
					description_template = <p>^ca_objects.description</p>,
					credit_template = ^ca_objects.rightsStatement.rightsStatement_text,
					caption_template = <em>^ca_objects.caption</em>,
					image = ^ca_object_representations.media.small,
					icon = ^ca_object_representations.media.icon
				}
			}
		},
		sortBy = {
			Identifier = ca_objects.idno,
			Title = ca_object_labels.name
		},
		# --- default sort direction for the sortBy options
		sortDirection = {
			Identifier = asc,
			Title = desc
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown,
#		options = {
#			selectMediaUsingRelationshipTypes = [relationshipType],
#			selectMediaUsingTypes = [objectType],
#			extendedInformationTemplate = ^ca_objects.description
#		}
	},

	objects = {
		displayName = _(All Objects),
		labelSingular = _("all objects"),
 		labelPlural = _("all objects"),
		table = ca_objects,

		restrictToTypes = [],
#		dontExpandTypesHierarchically = true,
		availableFacets = [],

		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			images = {},
			list = {},
			map = {
				data = ca_objects.address_info.geocode_coord,
				width = 100%,
				height = 600px,
				minZoomLevel = 2,
				maxZoomLevel = 18,
				display = {
					labelTemplate = <l>^ca_objects.preferred_labels.name</l> (^ca_objects.idno),
					contentTemplate = <div style='float:left; margin:0px 10px 10px 0px;'>^ca_object_representations.media.icon</div><p>^ca_objects.description</p>
				}
			},
			timeline = {
				data = ca_objects.creation_date,
				display = {
					title_template = <l>^ca_objects.preferred_labels.name</l> (^ca_objects.idno),
					description_template = <p>^ca_objects.description</p>,
					credit_template = ^ca_objects.rightsStatement.rightsStatement_text,
					caption_template = <em>^ca_objects.caption</em>,
					image = ^ca_object_representations.media.small,
					icon = ^ca_object_representations.media.icon
				}
			}
		},
		sortBy = {
			Identifier = ca_objects.idno,
			Title = ca_object_labels.name
		},
		# --- default sort direction for the sortBy options
		sortDirection = {
			Identifier = asc,
			Title = desc
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown,
#		options = {
#			selectMediaUsingRelationshipTypes = [relationshipType],
#			selectMediaUsingTypes = [objectType],
#			extendedInformationTemplate = ^ca_objects.description
#		}
	},
	collections = {
		displayName = _(Collections),
		labelSingular = _("collection"),
 		labelPlural = _("collections"),
		table = ca_collections,
		restrictToTypes = [],

		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			images = {},
			list = {}
		},

		sortBy = {
			Relevance = _natural,
			Identifier = ca_collections.idno,
			Name = ca_collection_labels.name
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown
	},
	entities = {
		displayName = _(People/Orgs),
		labelSingular = _("person"),
 		labelPlural = _("people"),
		table = ca_entities,
		restrictToTypes = [],
		showLetterBarFrom = ca_entity_labels.surname,
		showLetterBarSorts = [ca_entity_labels.surname;ca_entity_labels.forename],

		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			images = {},
			list = {}
		},

		sortBy = {
			Relevance = _natural,
			Identifier = ca_entities.idno,
			Name = ca_entity_labels.surname;ca_entity_labels.forename
		},
		# --- sortControlType = dropdown or list
#		sortControlType = dropdown,
#		options = {
#			selectMediaUsingRelationshipTypes = [relationshipType],
#			selectMediaUsingTypes = [objectType]
#		}
	},
#	occurrences = {
#		displayName = _(Works),
#		labelSingular = _("work"),
# 		labelPlural = _("works"),
#		table = ca_occurrences,
#		restrictToTypes = [],
#		showLetterBarFrom = ca_occurrence_labels.name,
#		showLetterBarSorts = [ca_occurrence_labels.name],

		# formats available for display of results
		# possible values are: images, list, timeline, map
#		views = {
#			list = {}
#		},

#		sortBy = {
#			Relevance = _natural,
#			Identifier = ca_occurrences.idno,
#			Name = ca_occurrence_labels.name
#		},
		# --- sortControlType = dropdown or list
#		sortControlType = dropdown,
#		options = {
#			selectMediaUsingRelationshipTypes = [relationshipType],
#			selectMediaUsingTypes = [objectType]
#		}
#	}
}

views = {
	images = {
		icon = glyphicon-th
	},
	list = {
		icon = glyphicon-list
	},
	timeline = {
		icon = glyphicon-time
	},
	map = {
		icon = glyphicon-globe
	}
}

# --- text for Browse menu item, default is "Browse"
browse_menu_button_text =

# --- default number of results per page/ajax load
defaultHitsPerBlock = 36

# --- set to list to show dropdown with links to each configured browse or a single Browse nav link when one browse is configured
browseMenuFormat =

# --- set if you don't want the browse menu to be preloaded with facets for the first browse type on open
dontPreloadBrowseMenu = 1

# --- refine_col_class -> boostrap col class to assign to refine col - defaults to: col-sm-8 col-md-8 col-lg-8
result_col_class =

# --- refine_col_class -> boostrap col class to assign to refine col - defaults to: col-sm-4 col-md-3 col-md-offset-1 col-lg-3 col-lg-offset-1
refine_col_class =

# --------------------------------------------
# Configuration for OBJECT browse
# --------------------------------------------
ca_objects = {
	facets = {
	serial_facet = {
		type = attribute,
		element_code = serial_name,

		restrict_to_types = [publication,periodical],

		group_mode = none,

		label_singular = _("series title"),
		label_plural = _("series titles"),
		description = _("Title of the periodical or newspaper."),
	},
	decade_facet = {
		type = normalizedDates,
		element_code = date.date_value,
		# 'normalization' can be: days, months, years, decades, centuries
		normalization = decades,

		group_mode = none,

		label_singular = _("date"),
		label_plural = _("dates")
	},
		type_facet = {
		type = fieldList,
		field = type_id,

		group_mode = none,
		order_by_label_fields = [name_plural],

		label_singular = _("type"),
		label_plural = _("types")
	},

	subject_facet = {
		type = attribute,
		element_code = tgm_terms,

		group_mode = alphabetical,

		label_singular = _("TGM subject"),
		label_plural = _("TGM subjects"),
		description = _("TGM Subject Headings")
	},

	has_media_facet = {
		type = has,

		table = ca_object_representations,
		relationship_table = ca_objects_x_object_representations,
		restrict_to_types = [],
		restrict_to_relationship_types = [],

		#single_value = 1,
		group_mode = none,

		label_yes = _("Has media"),
		label_no = _("Has no media"),

		label_singular = _("has media"),
		label_plural = _("has media")
	},

	has_photo_facet = {
		type = has,
		table = ca_objects,
		relationship_table = ca_objects_x_objects,
		restrict_to_types = [],
		restrict_to_relationship_types = [index_relation],

		group_mode = none,

		indefinite_article = a,
		label_yes = _("Yes"),
		label_no = _("No"),

		label_singular = _("has related photograph"),
		label_plural = _("has related photographs")
	},
	collection_facet = {
		type = authority,
		table = ca_collections,
		relationship_table = ca_objects_x_collections,
		restrict_to_types = [],
		restrict_to_relationship_types = [],

		group_mode = alphabetical,

		indefinite_article = a,
		label_singular = _("collection"),
		label_plural = _("collections")
	},
	entity_facet = {
		# 'type' can equal authority, attribute, fieldList, normalizedDates
		type = authority,
		table = ca_entities,
		relationship_table = ca_objects_x_entities,
		restrict_to_types = [],
		restrict_to_relationship_types = [],
		individual_group_display = 0,

		groupings = {
			label = _("Name"),
			type = _("Type"),
			relationship_types = _("Role")
		},
		group_mode = alphabetical,
		order_by_label_fields = [name_sort],

		indefinite_article = a,
		label_singular = _("person or group"),
		label_plural = _("people or groups")
	},
	occurrence_facet = {
		type = authority,
		table = ca_occurrences,
		generate_facets_for_types = 1,
		relationship_table = ca_objects_x_occurrences,
		restrict_to_types = [],
		restrict_to_relationship_types = [],

		groupings = {
			label = _("Name"),
			type = _("Type"),
#				relationship_types = _("Role"),
			ca_attribute_dates_value:years = _("Years"),
			ca_attribute_dates_value:decades = _("Decades")
		},

		group_mode = alphabetical,

		label_singular = _("occurrence"),
		label_plural = _("occurrences")
	},
		term_facet = {
			type = authority,
			table = ca_list_items,
			relationship_table = ca_objects_x_vocabulary_terms,
			restrict_to_types = [image],
			restrict_to_relationship_types = [],

			group_mode = none,

			# Set to non-zero value to display hierarchy on items in this facet
			show_hierarchy =1,

			# Character(s) to place between elements of the hierarchy
			hierarchical_delimiter = &nbsp; ⬅ &nbsp;,

			# Number of items to trim off the top (leave blank or set to 0 to trim nothing)
			remove_first_items = ,

			# Maximum length of hierarchy to display (leave blank to return hierarchy unabridged)
			hierarchy_limit = 3,

			# can be ASC or DESC (default is DESC)
			hierarchy_order  = DESC,

			label_singular = _("local subject"),
			label_plural = _("local subjects")
		}
	}
}

# --------------------------------------------
# Configuration for ENTITY browse
# --------------------------------------------
ca_entities = {
	facets = {
		type_facet = {
			type = fieldList,
			field = type_id,

			group_mode = none,
			order_by_label_fields = [name_plural],

			label_singular = _("type"),
			label_plural = _("types")
		},
		occurrence_facet = {
			type = authority,
			table = ca_occurrences,
			relationship_table = ca_entities_x_occurrences,
			restrict_to_types = [],
			restrict_to_relationship_types = [],

			group_mode = alphabetical,

			indefinite_article = an,
			label_singular = _("occurrence"),
			label_plural = _("occurrences")
		},
		term_facet = {
			type = authority,
			table = ca_list_items,
			relationship_table = ca_entities_x_vocabulary_terms,
			restrict_to_types = [],
			restrict_to_relationship_types = [],

			group_mode = alphabetical,

			label_singular = _("term"),
			label_plural = _("terms")
		},
		has_media_facet = {
			type = has,

			table = ca_object_representations,
			relationship_table = ca_entities_x_object_representations,
			restrict_to_types = [],
			restrict_to_relationship_types = [],

			#single_value = 1,
			group_mode = none,

			label_yes = _("Has media"),
			label_no = _("Has no media"),

			label_singular = _("has media"),
			label_plural = _("has media")
		}
	}
}

# --------------------------------------------
# Configuration for COLLECTION browse
# --------------------------------------------
ca_collections = {
	facets = {
		type_facet = {
			type = fieldList,
			field = type_id,
	#			single_value = 1,
			group_mode = none,
			order_by_label_fields = [name_plural],

			label_singular = _("type"),
			label_plural = _("types")
		},
		term_facet = {
			type = authority,
			table = ca_list_items,
			relationship_table = ca_collections_x_vocabulary_terms,
			restrict_to_types = [],
			restrict_to_relationship_types = [],

			group_mode = alphabetical,

			label_singular = _("term"),
			label_plural = _("terms")
		},
		has_media_facet = {
			type = has,

			table = ca_object_representations,
			relationship_table = ca_collections_x_object_representations,
			restrict_to_types = [],
			restrict_to_relationship_types = [],

			#single_value = 1,
			group_mode = none,

			label_yes = _("Has media"),
			label_no = _("Has no media"),

			label_singular = _("has media"),
			label_plural = _("has media")
		}
	}
}
