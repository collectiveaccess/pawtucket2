cache_timeout = 0
#
# 
#
browseTypes = {
	objects = {
		displayName = _(Artworks),
		labelSingular = _("artwork"),
 		labelPlural = _("artworks"),
		table = ca_objects,
		
		restrictToTypes = [],
		availableFacets = [],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			images = {},
			list = {},
			timeline = {
				data = ca_objects.creation_date,
				display = {
					title_template = <l>^ca_objects.preferred_labels.name</l> (^ca_objects.idno),
					description_template = <p>^ca_objects.description</p>,
					credit_template = ^ca_objects.rightsStatement.rightsStatement_text,
					caption_template = <em>^ca_objects.caption</em>,
					image = ^ca_object_representations.media.small,
					icon = ^ca_object_representations.media.icon
				}
			}
		},
		sortBy = {
			Identifier = ca_objects.idno,
			Title = ca_object_labels.name
		},
		# --- default sort direction for the sortBy options
		sortDirection = {
			Identifier = asc,
			Title = desc
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown,
		
		options = {
			extendedInformationTemplate = <ifdef code='ca_objects.creation_date'>, ^ca_objects.creation_date</ifdef><ifcount code='ca_entities' restrictToRelationshipTypes='creator' min='1'><unit relativeTo='ca_entities' restrictToRelationshipTypes='creator'><br/><l>^ca_entities.preferred_labels.name</l> <ifdef code='ca_entities.dob_dod|ca_entities.nationality'>(</ifdef><ifdef code='ca_entities.nationality'>^ca_entities.nationality</ifdef><ifdef code='ca_entities.dob_dod,ca_entities.nationality'>, </ifdef>^ca_entities.dob_dod<ifdef code='ca_entities.dob_dod|ca_entities.nationality'>)</ifdef></unit></ifcount>
		}
	},
	entities = {
		displayName = _(People/Orgs),
		labelSingular = _("person"),
 		labelPlural = _("people"),
		table = ca_entities,
		restrictToTypes = [],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			images = {}, 
			list = {}
		},
		
		sortBy = {
			Relevance = _natural,
			Identifier = ca_entities.idno,
			Name = ca_entity_labels.surname;ca_entity_labels.forename
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown
	},
	collections = {
		displayName = _(Collections),
		labelSingular = _("collection"),
 		labelPlural = _("collections"),
		table = ca_collections,
		restrictToTypes = [],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = { 
			images = {}, 
			list = {}
		},
		
		sortBy = {
			Relevance = _natural,
			Identifier = ca_collections.idno,
			Name = ca_collection_labels.name
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown
	}
}

views = {
	images = {
		icon = glyphicon-th
	},
	list = {
		icon = glyphicon-list
	},
	timeline = {
		icon = glyphicon-time
	},
	map = {
		icon = glyphicon-globe
	}
}

# --- default number of results per page/ajax load
defaultHitsPerBlock = 36

# --- set to list to show dropdown with links to each configured browse or a single Browse nav link when one browse is configured
browse_menu_format = list

# --- refine_col_class -> boostrap col class to assign to refine col - defaults to: col-sm-8 col-md-8 col-lg-8
result_col_class =

# --- refine_col_class -> boostrap col class to assign to refine col - defaults to: col-sm-4 col-md-3 col-md-offset-1 col-lg-3 col-lg-offset-1
refine_col_class =

cache_timeout = 0

# Configuration for object browse
ca_objects = {
	name = _("Objects"),
	facets = {
		type_facet = {
			type = fieldList,
			field = type_id,
			
			group_mode = alphabetical,
			order_by_label_fields = [name_sort],

			label_singular = _("type"),
			label_plural = _("types"),
			description = _("Find objects according to the Types defined in your collection profile."),
		},
		fine_art_types_facet = {
			type = attribute,
			element_code = fine_art_types,
			
			group_mode = none,
			requires = [x],
			label_singular = _("Subtype"),
			label_plural = _("Subtype"),
			description = _("Find objects by Subtype."),			
		},
		documentation_types_facet = {
			type = attribute,
			element_code = documentation_types,
			
			group_mode = none,
			requires = [x],
			label_singular = _("Subtype"),
			label_plural = _("Subtype"),
			description = _("Find objects by Subtype."),			
		},
		decorative_types_facet = {
			type = attribute,
			element_code = decorative_types,
			
			group_mode = none,
			requires = [x],
			label_singular = _("Subtype"),
			label_plural = _("Subtype"),
			description = _("Find objects by Subtype."),			
		},	
		creator_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_entities,
			relationship_table = ca_objects_x_entities,
			restrict_to_types = [],
			restrict_to_relationship_types = [creator],
			
			individual_group_display = 1,
			
			groupings = {
				label = _("Name"), 
				relationship_types = _("Role"),
				type = _("Type")
			},
			group_mode = alphabetical,
			order_by_label_fields = [surname, forename, middlename],
			
			indefinite_article = an,
			label_singular = _("creator"),
			label_plural = _("creators"),
			description = _("Find objects byt he arist that created the object."),
		},
		decade_facet = {
			type = normalizedDates,
			element_code = creation_date,
			normalization = decades,
			
			group_mode = none,
			include_unknown = 1,
			
			label_singular = _("decade"),
			label_plural = _("decades"),
			description = _("Find objects according to associated dates.  You can normalize these dates by year&#44; decade or century."),			
		},
		dimensions_width_facet = {
			type = normalizedLength,
			element_code = dimensions_width,
			
			# 
			minimum_dimension = 1 in,
			maximum_dimension = 500 in,
			increment = 12 in,
			units = in,
			
			group_mode = none,
			
			label_singular = _("width"),
			label_plural = _("width"),
			description = _("xxx"),			
		},
		dimensions_height_facet = {
			type = normalizedLength,
			element_code = dimensions_height,
			
			# 
			minimum_dimension = 1 in,
			maximum_dimension = 500 in,
			increment = 12 in,
			units = in,
			
			group_mode = none,
			
			label_singular = _("height"),
			label_plural = _("height"),
			description = _("xxx"),			
		},
		color_facet = {
			type = attribute,
			element_code = colors,
			
			group_mode = none,
			
			label_singular = _("color"),
			label_plural = _("colors"),
			description = _("Find objects by color."),			
		},
		styles_movement_facet = {
			type = attribute,
			element_code = styles_movement,
			
			group_mode = none,
			
			label_singular = _("Style/Movement"),
			label_plural = _("Style/Movement"),
			description = _("Find objects by Style/Movement."),			
		},
		theme_facet = {
			type = attribute,
			element_code = steelcase_themes,
			
			group_mode = hierarchical,
			show_hierarchy = 1,
			
			label_singular = _("Theme"),
			label_plural = _("Theme"),
			description = _("Find objects by theme."),			
		},
		material_facet = {
			type = attribute,
			element_code = material,
			
			group_mode = none,
			requires=x,
			
			label_singular = _("Material"),
			label_plural = _("Material"),
			description = _("Find objects by Material."),			
		},
		collection_facet = {
			type = authority,
			table = ca_collections,
			relationship_table = ca_objects_x_collections,
			restrict_to_types = [],
			
			group_mode = alphabetical,
			order_by_label_fields = [name],
			show_description_when_first_facet = description,

			label_singular = _("collection"),
			label_plural = _("collections"),
			description = _("Find objects according to the Collections they belong to."),
		},
#		on_display_facet = {
#			type = has,
#			
#			table = ca_storage_locations,
#			relationship_table = ca_objects_x_storage_locations,
#			restrict_to_types = [],
#			restrict_to_relationship_types = [display],
#			
#			label_yes = _("On display"),
#			label_no = _("In storage"),
#			
#			single_value = 1,
#			
#			label_singular = _("On display"),
#			label_plural = _("On display"),
#			description = _("Find objects on display."),
#		},	
		current_location = {
			type = current_value,
			restrict_to_types = [],
			policy = current_location,
			
			group_mode = hierarchical, 
			
			display = {
				ca_storage_locations = {
					__default__ = { template = ^ca_storage_locations.hierarchy.preferred_labels.name%delimiter=_&gt;_ }
				}
			},
			
			include_none_option = No location specified,
			
			label_singular = _("current location"),
			label_plural = _("current locations")
		},
#		current_location = {
#			type = location,
#			restrict_to_types = [],
#			
#			group_mode = none,
#			
#			display = {
#				ca_storage_locations = {
#					storage = { template = ^ca_storage_locations.hierarchy.preferred_labels%delimiter=_âžœ_ (storage) }
#				}
#			},
#			
#			include_none_option = No location specified,
#			
#			label_singular = _("current location"),
#			label_plural = _("current location")
#		}
	}
}
ca_collections = {
	name = _("Collections"),
	facets = {
		entity_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_entities,
			relationship_table = ca_objects_x_entities,
			restrict_to_types = [individual],
			restrict_to_relationship_types = [],
			
			individual_group_display = 1,
			
			groupings = {
				label = _("Name"), 
				relationship_types = _("Role"),
				type = _("Type")
			},
			group_mode = alphabetical,
			order_by_label_fields = [surname, forename, middlename],
			
			indefinite_article = an,
			label_singular = _("person"),
			label_plural = _("people"),
			description = _("Find collection people related to them."),
		},
		org_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_entities,
			relationship_table = ca_objects_x_entities,
			restrict_to_types = [organization],
			restrict_to_relationship_types = [],
			
			individual_group_display = 1,
			
			groupings = {
				label = _("Name"), 
				relationship_types = _("Role"),
				type = _("Type")
			},
			group_mode = alphabetical,
			order_by_label_fields = [displayname],
			
			indefinite_article = an,
			label_singular = _("organization"),
			label_plural = _("organizations"),
			description = _("Find collection organizations related to them."),
		}
	}
}

ca_entities = {
	name = _("Collections"),
	facets = {
		styles_movement_facet = {
			type = attribute,
			element_code = styles_movement,
			
			group_mode = none,
			
			label_singular = _("Style/Movement"),
			label_plural = _("Style/Movement"),
			description = _("Find objects by Style/Movement."),			
		},
		collection_facet = {
			type = authority,
			table = ca_collections,
			relationship_table = ca_objects_x_collections,
			restrict_to_types = [],
			
			group_mode = none,

			label_singular = _("collection"),
			label_plural = _("collections"),
			description = _("Find objects according to the Collections they belong to."),
		}
	}
}