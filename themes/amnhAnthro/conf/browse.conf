cache_timeout = 0

#
# 
#
browseTypes = {
	objects = {
		displayName = _("Collection Items"),
		labelSingular = _("item"),
 		labelPlural = _("items"),
		table = ca_objects,
		
		restrictToTypes = [collection_item],
		#dontExpandTypesHierarchically = true,
		availableFacets = [],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			images = {},
			list = {}
		},
		sortBy = {
			Identifier = ca_objects.idno,
			Name = ca_object_labels.name
		},
		# --- default sort direction for the sortBy options
		sortDirection = {
			Identifier = asc,
			Name = asc
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown,
#		options = {
#			selectMediaUsingRelationshipTypes = [relationshipType],
#			selectMediaUsingTypes = [objectType],
#			extendedInformationTemplate = ^ca_objects.description
#		}
	}
}

views = {
	images = {
		icon = glyphicon-th
	},
	list = {
		icon = glyphicon-list
	},
	timeline = {
		icon = glyphicon-time
	},
	map = {
		icon = glyphicon-globe
	}
}

# --- text for Browse menu item, default is "Browse" 
browse_menu_button_text = 

# --- default number of results per page/ajax load
defaultHitsPerBlock = 36

# --- set to list to show dropdown with links to each configured browse or a single Browse nav link when one browse is configured
browseMenuFormat = list

# --- set if you don't want the browse menu to be preloaded with facets for the first browse type on open
dontPreloadBrowseMenu = 1

# --- refine_col_class -> boostrap col class to assign to refine col - defaults to: col-sm-8 col-md-8 col-lg-8
result_col_class =

# --- refine_col_class -> boostrap col class to assign to refine col - defaults to: col-sm-4 col-md-3 col-md-offset-1 col-lg-3 col-lg-offset-1
refine_col_class =



# Configuration for object browse
ca_objects = {
	facets = {
		collection_area_facet = {
			type = attribute,
			element_code = collection_area,
			
			group_mode = none,
			
			multiple = 1,
			exclude_values = [null],
			
			label_singular = _("collection area"),
			label_plural = _("collection areas")
		},
		subtype = {
			type = attribute,
			element_code = subtype,
			
			group_mode = none,
			
			multiple = 1,
			exclude_values = [null],
			
			label_singular = _("Collection Type"),
			label_plural = _("Collection Types")
		},
		country_facet = {
			type = attribute,
			element_code = country.country_country,
			
			group_mode = none,
			
			multiple = 1,
			exclude_values = [null],
			
			label_singular = _("country"),
			label_plural = _("countries")
		},
		culture_facet = {
			type = attribute,
			element_code = culture.culture_culture,
			
			group_mode = none,
			
			multiple = 1,
			exclude_values = [null],
			
			label_singular = _("culture"),
			label_plural = _("cultures")
		},
		locale_facet = {
			type = attribute,
			element_code = locale.locale_locale,
			
			group_mode = none,
			
			multiple = 1,
			exclude_values = [null],
			
			label_singular = _("locale"),
			label_plural = _("locales")
		},
		keywords_facet = {
			type = attribute,
			element_code = keywords,
			
			group_mode = none,
			
			multiple = 1,
			exclude_values = [null],
			
			label_singular = _("keywords"),
			label_plural = _("keywords")
		},
		period_facet = {
			type = attribute,
			element_code = period_period,
			
			group_mode = none,
			
			multiple = 1,
			exclude_values = [null],
			
			label_singular = _("period"),
			label_plural = _("periods")
		},
		technique_facet = {
			type = attribute,
			element_code = technique,
			
			group_mode = none,
			
			multiple = 1,
			exclude_values = [null],			
			label_singular = _("technique"),
			label_plural = _("techniques")
		},
		collector_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_entities,
			relationship_table = ca_objects_x_entities,
			restrict_to_types = [],
			restrict_to_relationship_types = [collector],
			individual_group_display = 0,
			
			
			group_mode = alphabetical,
			order_by_label_fields = [name_sort],
			
			indefinite_article = an,
			label_singular = _("collector"),
			label_plural = _("collectors")
		},		
		archives_type_facet = {
			type = attribute,
			element_code = archives_subject,
			
			group_mode = none,
			
			multiple = 1,
			exclude_values = [null],
			
			label_singular = _("Subject"),
			label_plural = _("Subjects")
		},
		archives_type_facet = {
			type = attribute,
			element_code = archives_type,
			
			group_mode = none,
			
			multiple = 1,
			exclude_values = [null],
			
			label_singular = _("Archive Type"),
			label_plural = _("Archive Types")
		},
		locale_archives_facet = {
			type = attribute,
			element_code = archives_locale,
			
			group_mode = none,
			
			multiple = 1,
			exclude_values = [null],
			
			label_singular = _("locale (archives)"),
			label_plural = _("locales (archives)")
		},
		culture_archives_facet = {
			type = attribute,
			element_code = archives_culture,
			
			group_mode = none,
			
			multiple = 1,
			exclude_values = [null],
			
			label_singular = _("culture (archives)"),
			label_plural = _("cultures (archives)")
		},
		archives_date_facet = {
			type = normalizedDates,
			element_code = date,
			# 'normalization' can be: days, months, years, decades, centuries
			normalization = years,
			
			group_mode = none,
			#single_value = 1950,
			
			label_singular = _("year (archives)"),
			label_plural = _("years (archives)")
		},
		has_media_facet = {
			type = has,
			
			table = ca_object_representations,
			relationship_table = ca_objects_x_object_representations,
			restrict_to_types = [],
			restrict_to_relationship_types = [],
			
			#single_value = 1,
			group_mode = none,
			
			label_yes = _("Has media"),
			label_no = _("Has no media"),
			
			label_singular = _("has media"),
			label_plural = _("has media")
		}
	}
}