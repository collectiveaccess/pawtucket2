cache_timeout = 0

#
# 
#
browseTypes = {
	objects = {
		displayName = _(Objects),
		labelSingular = _("Object"),
 		labelPlural = _("Objects"),
		table = ca_objects,
		
		restrictToTypes = [],
		#dontExpandTypesHierarchically = true,
		availableFacets = [],
		facetGroup = all,
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			images = {},
			list = {},
			timeline = {
				data = ca_objects.creation_date,
				display = {
					title_template = <l>^ca_objects.preferred_labels.name</l> (^ca_objects.idno),
					description_template = <p>^ca_objects.description</p>,
					credit_template = ^ca_objects.rightsStatement.rightsStatement_text,
					caption_template = <em>^ca_objects.caption</em>,
					image = ^ca_object_representations.media.small,
					icon = ^ca_object_representations.media.icon
				}
			}
		},
		sortBy = {
			Title = ca_object_labels.name,
			Identifier = ca_objects.idno
		},
		# --- default sort direction for the sortBy options
		sortDirection = {
			Identifier = asc,
			Title = asc
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown
	},
	manuscripts = {
		displayName = _(Manuscripts),
		labelSingular = _("Manuscript"),
 		labelPlural = _("Manuscripts"),
		table = ca_objects,
		
		restrictToTypes = [manuscript],
		#dontExpandTypesHierarchically = true,
		availableFacets = [],
		facetGroup = manuscript,
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			list = {},
			map = {
				data = ca_places.georeference,
				width = 100%,
				height = 600px,
				minZoomLevel = 2,
				maxZoomLevel = 15,
				display = {
					contentTemplate = "<h3><unit relativeTo='ca_places' delimiter=','> ^ca_places.preferred_labels</unit></h3><l>^ca_objects.preferred_labels.name%truncate=75&ellipsis=1</l><p><ifdef code='ca_objects.date_composition'><strong>Date: </strong>^ca_objects.date_composition</ifdef></p>"
				}
			},
			timeline = {
				data = ca_objects.timeline_date,
				display = {
					title_template = <l>^ca_objects.preferred_labels.name%truncate=75&ellipsis=1</l>,
					description_template = <p>^ca_objects.general_notes%truncate=400&ellipsis=1 <l>More</l></p>
				}
			}
		},
		sortBy = {
			Title = ca_object_labels.name,
			Identifier = ca_objects.idno
		},
		# --- default sort direction for the sortBy options
		sortDirection = {
			Title = asc,
			Identifier = asc
			
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown
	},
	utensils = {
		displayName = _(Utensils),
		labelSingular = _("Kitchen Artifact"),
 		labelPlural = _("Kitchen Artifacts"),
		table = ca_objects,
		
		restrictToTypes = [kitchen_utensil],
		#dontExpandTypesHierarchically = true,
		availableFacets = [],
		facetGroup = utensil,
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			images = {},
			list = {},
			timeline = {
				data = ca_objects.utensil_date,
				display = {
					title_template = <l>^ca_objects.preferred_labels.name%truncate=75&ellipsis=1</l>,
					description_template = <ifdef code="ca_object_representations"><div class="tl-embed-media">^ca_object_representations.media.small</div></ifdef><ifdef code="ca_objects.utensil_description"><p>^ca_objects.utensil_description%truncate=400&ellipsis=1</p></ifdef><ifdef code="ca_objects.purpose"><p>Purpose<br/>^ca_objects.purpose</p></ifdef>,
					icon = ^ca_object_representations.media.icon
				}
			}
		},
		sortBy = {
			Title = ca_object_labels.name,
			Identifier = ca_objects.idno
		},
		# --- default sort direction for the sortBy options
		sortDirection = {
			Title = asc
			Identifier = asc
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown
	},
	collections = {
		displayName = _(Collections),
		labelSingular = _("Institution"),
 		labelPlural = _("Institutions"),
		table = ca_collections,
		restrictToTypes = [],
		facetGroup = None,
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = { 
			list = {},
			map = {
				data = ca_collections.georeference,
				minZoomLevel = 2,
				maxZoomLevel = 15,
				display = {
					title_template = <l>^ca_collections.preferred_labels.name</l>
				}
			},
		},
		
		sortBy = {
			Name = ca_collection_labels.name,
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown
	},
	entities = {
		displayName = _(People/Orgs),
		labelSingular = _("person"),
 		labelPlural = _("people"),
		table = ca_entities,
		restrictToTypes = [],
		showLetterBarFrom = ca_entity_labels.surname,
		showLetterBarSorts = [ca_entity_labels.surname;ca_entity_labels.forename],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			images = {}, 
			list = {}
		},
		
		sortBy = {
			Relevance = _natural,
			Identifier = ca_entities.idno,
			Name = ca_entity_labels.surname;ca_entity_labels.forename
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown
	},
	occurrences = {
		displayName = _(Works),
		labelSingular = _("work"),
 		labelPlural = _("works"),
		table = ca_occurrences,
		restrictToTypes = [],
		showLetterBarFrom = ca_occurrence_labels.name,
		showLetterBarSorts = [ca_occurrence_labels.name],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			list = {}
		},
		
		sortBy = {
			Relevance = _natural,
			Identifier = ca_occurrences.idno,
			Name = ca_occurrence_labels.name
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown
	}
}

ca_objects = {
	name = _("Objects"),
	show_all_for_no_criteria_browse = 1,
	facets = {
		collection_facet = {
			type = authority,
			table = ca_collections,
			relationship_table = ca_objects_x_collections,
			restrict_to_types = [],
			facet_groups = [all,manuscript,utensil],
			order_by_label_fields = [name],
			group_mode = none,

			label_singular = _("Collection"),
			label_plural = _("Collections"),
			description = _("The insititutional collection&#40;s&#41; where these items are currently held")
		},
		manuscript_date_facet = {
			type = normalizedDates,
			element_code = ca_objects.date_index,
			restrict_to_types = [],
			facet_groups = [manuscript],	
		
			normalization = decades,
			sort = ASC,
			
			label_singular = _("Date Created"),
			label_plural = _("Date Created"),
			description = _("The date, or date range, on which these manuscripts were created")
		},
		place_facet = {
			type = authority,
			table = ca_places,
			relationship_table = ca_objects_x_places,
			restrict_to_types = [],
			facet_groups = [all,manuscript,utensil],

			individual_group_display = 0,

			group_mode = hierarchical,
			order_by_label_fields = [name],

			# Set to non-zero value to display hierarchy on items in this facet
			show_hierarchy = 1,
			
			# Character(s) to place between elements of the hierarchy
			#hierarchical_delimiter = &nbsp;â¬…&nbsp;,
			
			# Number of items to trim off the top (leave blank or set to 0 to trim nothing)
			remove_first_items = 0,
			# Maximum length of hierarchy to display (leave blank to return hierarchy unabridged)
			# hierarchy_limit = , 
			# can be ASC or DESC (default is DESC)
			hierarchy_order  = DESC,
			indefinite_article = a,
			label_singular = _("Place"),
			label_plural = _("Places"),
			description = _("The places where these manuscripts were created")
		},
		viewable_facet = {
			type = attribute,
			element_code = ca_objects.viewable,
			
			suppress = [no],
			restrict_to_types = [],
			facet_groups = [all,manuscript],

			label_singular = _("Availabile Online?"),
			label_plural = _("Availabile Online?"),
			description = _("Select this to view only records where digitized copies of the manuscript are available")
		},
		date_facet = {
			type = normalizedDates,
			element_code = ca_objects.utensil_date,
			restrict_to_types = [],
			facet_groups = [utensil],	
		
			normalization = decades,
			sort = ASC,
			
			label_singular = _("Date Created"),
			label_plural = _("Date Created"),
			description = _("The decade in which the kitchen artifacts was created")
			
		},
		materials_facet = {
			type = attribute,
			element_code = ca_objects.materials,
			
			suppress = [],
			restrict_to_types = [],
			facet_groups = [utensil],

			label_singular = _("Materials"),
			label_plural = _("Materials"),
			description = _("The manufacturing materials for kitchen artifacts")
		},
		utensil_type_facet = {
			type = attribute,
			element_code = ca_objects.utensil_type,
			
			suppress = [],
			restrict_to_types = [],
			facet_groups = [utensil],

			label_singular = _("Kitchen Artifact Type"),
			label_plural = _("Kitchen Artifact Types"),
			description = _("Broad categories of kitchen artifacts")
		},
		has_media_facet = {
                        type = has,

                        table = ca_object_representations,
                        relationship_table = ca_objects_x_object_representations,
                        restrict_to_types = [],
                        restrict_to_relationship_types = [],
			facet_groups = [utensil],

                        single_value = 1,
                        group_mode = none,
                        indefinite_article = ,
                        label_yes = _("Has Image(s)"),
                        label_no = _("Does not have image(s)"),

                        label_singular = _("has image"),
                        label_plural = _("has images")
                }
	}
}		
views = {
	images = {
		icon = glyphicon-th
	},
	list = {
		icon = glyphicon-list
	},
	timeline = {
		icon = glyphicon-time
	},
	map = {
		icon = glyphicon-globe
	}
}

# --- text for Browse menu item, default is "Browse" 
browse_menu_button_text = 

# --- default number of results per page/ajax load
defaultHitsPerBlock = 36

# --- set to list to show dropdown with links to each configured browse or a single Browse nav link when one browse is configured
browseMenuFormat =

# --- set if you don't want the browse menu to be preloaded with facets for the first browse type on open
dontPreloadBrowseMenu = 1

# --- refine_col_class -> boostrap col class to assign to refine col - defaults to: col-sm-8 col-md-8 col-lg-8
result_col_class =

# --- refine_col_class -> boostrap col class to assign to refine col - defaults to: col-sm-4 col-md-3 col-md-offset-1 col-lg-3 col-lg-offset-1
refine_col_class =
