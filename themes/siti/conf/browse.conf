cache_timeout = 0

#
# 
#
browseTypes = {
	works = {
		displayName = _("Works"),
		labelSingular = _("work"),
 		labelPlural = _("works"),
		table = ca_occurrences,
		restrictToTypes = [work],
		showLetterBarFrom = ca_occurrence_labels.name,
		showLetterBarSorts = [ca_occurrence_labels.name],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			list = {
				result_caption = "<l>^ca_occurrences.preferred_labels</l>",
			}
		},
		sortBy = {
			Title = ca_occurrence_labels.name_sort
		},
		sortDirection = {
			Name = asc
		},
		# --- sortControlType = dropdown or list
		sortControlType = list,
		options = {
			selectMediaUsingRelationshipTypes = [feature],
#			selectMediaUsingTypes = [objectType]
		},
		facetGroup = work
	},
	productions = {
		displayName = _("Productions"),
		labelSingular = _("Production"),
 		labelPlural = _("Productions"),
		table = ca_occurrences,
		restrictToTypes = [production],
		#showLetterBarFrom = ca_occurrence_labels.name,
		#showLetterBarSorts = [ca_occurrence_labels.name],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			list = {
				result_caption = "<small><l>^ca_occurrences.type_id</l></small><br/><l>^ca_occurrences.preferred_labels</l><l><ifdef code='ca_occurrences.date'><div class='small'>^ca_occurrences.date</div></ifdef><ifcount code='ca_occurrences.related' restrictToTypes='venue' min='1'><div class='small'><unit relativeTo='ca_occurrences.related' restrictToTypes='venue' delimiter='<br/>'>^ca_occurrences.preferred_labels.name</unit></div></ifcount></l>",
			}
		},
		
		sortBy = {
			Name = ca_occurrence_labels.name_sort,
			Date = ca_occurrences.date
		},
		sortDirection = {
			Name = asc,
			Date = desc
		},
		# --- sortControlType = dropdown or list
		sortControlType = list,
		options = {
			selectMediaUsingRelationshipTypes = [feature],
#			selectMediaUsingTypes = [objectType]
		},
		facetGroup = production
	},
	trainings = {
		displayName = _("Trainings"),
		labelSingular = _("Training"),
 		labelPlural = _("Trainings"),
		table = ca_occurrences,
		restrictToTypes = [training],
		#showLetterBarFrom = ca_occurrence_labels.name,
		#showLetterBarSorts = [ca_occurrence_labels.name],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			list = {
				result_caption = "<small><l>^ca_occurrences.type_id</l></small><br/><l>^ca_occurrences.preferred_labels</l><l><ifdef code='ca_occurrences.training_date'><div class='small'>^ca_occurrences.training_date</div></ifdef></l>",
			}
		},
		
		sortBy = {
			Name = ca_occurrence_labels.name_sort,
			Date = ca_occurrences.training_date
		},
		sortDirection = {
			Name = asc,
			Date = desc
		},
		# --- sortControlType = dropdown or list
		sortControlType = list,
		options = {
			selectMediaUsingRelationshipTypes = [feature],
#			selectMediaUsingTypes = [objectType]
		},
		facetGroup = training
	},
	events = {
		displayName = _("Special Events"),
		labelSingular = _("Special Event"),
 		labelPlural = _("Special Events"),
		table = ca_occurrences,
		restrictToTypes = [special_event],
		#showLetterBarFrom = ca_occurrence_labels.name,
		#showLetterBarSorts = [ca_occurrence_labels.name],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			list = {
				result_caption = "<small><l>^ca_occurrences.type_id</l></small><br/><l>^ca_occurrences.preferred_labels</l><l><ifdef code='ca_occurrences.eventDate'><div class='small'>^ca_occurrences.eventDate</div></ifdef></l>",
			}
		},
		
		sortBy = {
			Name = ca_occurrence_labels.name_sort,
			Date = ca_occurrences.eventDate
		},
		sortDirection = {
			Name = asc,
			Date = desc
		},
		# --- sortControlType = dropdown or list
		sortControlType = list,
		options = {
			selectMediaUsingRelationshipTypes = [feature],
#			selectMediaUsingTypes = [objectType]
		},
		facetGroup = event
	},
	entities = {
		displayName = _("Collaborators"),
		labelSingular = _("Collaborator"),
 		labelPlural = _("Collaborators"),
		table = ca_entities,
		restrictToTypes = [],
		showLetterBarFrom = ca_entity_labels.surname,
		showLetterBarSorts = [ca_entity_labels.surname;ca_entity_labels.forename],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			list = {
				result_caption = "<l>^ca_entities.preferred_labels</l>",
			}
		},
		sortBy = {
			Name = ca_entity_labels.surname;ca_entity_labels.forename
		},
		sortDirection = {
			Name = asc
		},
		# --- sortControlType = dropdown or list
		sortControlType = list,
		options = {
			selectMediaUsingRelationshipTypes = [feature],
#			selectMediaUsingTypes = [objectType]
		}
	},
	media = {
		displayName = _(Media),
		labelSingular = _("media"),
 		labelPlural = _("media"),
		table = ca_objects,
		
		restrictToTypes = [],
		#dontExpandTypesHierarchically = true,
		availableFacets = [],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			images = {
				result_caption = "<small><l>^ca_objects.type_id</l></small><br/><l>^ca_objects.preferred_labels</l>",
			}
		},
		sortBy = {
			Date = ca_objects.date,
			Title = ca_object_labels.name
		},
		sortDirection = {
			Date = desc,
			Title = asc
		},
		# --- sortControlType = dropdown or list
		sortControlType = list,
#		options = {
#			selectMediaUsingRelationshipTypes = [relationshipType],
#			selectMediaUsingTypes = [objectType],
#			extendedInformationTemplate = ^ca_objects.description
#		}
	},
}

views = {
	images = {
		icon = glyphicon-th
	},
	list = {
		icon = glyphicon-list
	},
	timeline = {
		icon = glyphicon-time
	},
	map = {
		icon = glyphicon-globe
	}
}

# --- text for Browse menu item, default is "Browse" 
browse_menu_button_text = 

# --- default number of results per page/ajax load
defaultHitsPerBlock = 36

# --- set to list to show dropdown with links to each configured browse or a single Browse nav link when one browse is configured
browseMenuFormat = list

# --- set if you don't want the browse menu to be preloaded with facets for the first browse type on open
dontPreloadBrowseMenu = 1

# --- refine_col_class -> boostrap col class to assign to refine col - defaults to: col-sm-8 col-md-8 col-lg-8
result_col_class =

# --- refine_col_class -> boostrap col class to assign to refine col - defaults to: col-sm-4 col-md-3 col-md-offset-1 col-lg-3 col-lg-offset-1
refine_col_class =

# --------------------------------------------------------------------
# Configuration for occurrence browse
ca_occurrences = {
	name = _("Other authorities"),
	facets = {
		producer_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_entities,
			relationship_table = ca_entities_x_occurrences,
			restrict_to_relationship_types = [producer],
			
			group_mode = alphabetical,
			
			facet_groups = [work],
			
			natural_sort = 0,
			order_by_label_fields = [surname, forename, middlename],
			
			indefinite_article = an,
			label_singular = _("Produced By"),
			label_plural = _("Produced By")
		},
		work_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_occurrences,
			relationship_table = ca_occurrences_x_occurrences,
			restrict_to_types = [work],
			
			group_mode = alphabetical,
			
			facet_groups = [production, training, event],
			natural_sort = 0,
			order_by_label_fields = [name],
			
			indefinite_article = an,
			label_singular = _("work"),
			label_plural = _("works")
		},
		decade_facet = {
			type = normalizedDates,
			element_code = date,
			normalization = decades,
			
			group_mode = alphabetical,
			
			facet_groups = [production],
			label_singular = _("decade"),
			label_plural = _("decades")
		},
		year_facet = {
			type = normalizedDates,
			element_code = date,
			normalization = years,
			
			group_mode = alphabetical,
			requires = decade_facet,
			
			facet_groups = [production],
			
			label_singular = _("year"),
			label_plural = _("years")
		},
		training_decade_facet = {
			type = normalizedDates,
			element_code = training_date,
			normalization = decades,
			
			group_mode = alphabetical,
			
			facet_groups = [training],
			label_singular = _("decade"),
			label_plural = _("decades")
		},
		training_year_facet = {
			type = normalizedDates,
			element_code = training_date,
			normalization = years,
			
			group_mode = alphabetical,
			requires = training_decade_facet,
			
			facet_groups = [training],
			
			label_singular = _("year"),
			label_plural = _("years")
		},
		event_decade_facet = {
			type = normalizedDates,
			element_code = eventDate,
			normalization = decades,
			
			group_mode = alphabetical,
			
			facet_groups = [event],
			label_singular = _("decade"),
			label_plural = _("decades")
		},
		event_year_facet = {
			type = normalizedDates,
			element_code = eventDate,
			normalization = years,
			
			group_mode = alphabetical,
			requires = event_decade_facet,
			
			facet_groups = [event],
			
			label_singular = _("year"),
			label_plural = _("years")
		},
		director_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_entities,
			relationship_table = ca_entities_x_occurrences,
			restrict_to_relationship_types = [director],
			
			group_mode = alphabetical,
			
			facet_groups = [production, training, event],
			
			natural_sort = 0,
			order_by_label_fields = [surname, forename, middlename],
			
			indefinite_article = an,
			label_singular = _("director"),
			label_plural = _("directors")
		},
		actor_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_entities,
			relationship_table = ca_entities_x_occurrences,
			restrict_to_relationship_types = [actor],
			
			group_mode = alphabetical,
			
			facet_groups = [production, training, event],
			
			natural_sort = 0,
			order_by_label_fields = [surname, forename, middlename],
			
			indefinite_article = an,
			label_singular = _("actor"),
			label_plural = _("actors")
		},
		entity_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_entities,
			relationship_table = ca_entities_x_occurrences,
			exclude_relationship_types = [actor, director],
			
			group_mode = alphabetical,
			
			facet_groups = [production, training, event],
			
			natural_sort = 0,
			order_by_label_fields = [surname, forename, middlename],
			
			indefinite_article = an,
			label_singular = _("collaborator"),
			label_plural = _("collaborators")
		},
		venue_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_occurrences,
			relationship_table = ca_occurrences_x_occurrences,
			restrict_to_types = [venue],
			
			group_mode = alphabetical,
			
			facet_groups = [production, training, event],
			
			natural_sort = 0,
			order_by_label_fields = [name],
			
			indefinite_article = an,
			label_singular = _("venue"),
			label_plural = _("venues")
		},
		decade_created_facet = {
			type = normalizedDates,
			element_code = created_dateType,
			normalization = decades,
			
			group_mode = alphabetical,
			
			facet_groups = [work],
			label_singular = _("decade created"),
			label_plural = _("decades created")
		},
		year_created_facet = {
			type = normalizedDates,
			element_code = created_dateType,
			normalization = years,
			
			group_mode = alphabetical,
			requires = decade_created_facet,
			
			facet_groups = [work],
			
			label_singular = _("year created"),
			label_plural = _("years created")
		},
		creator_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_entities,
			relationship_table = ca_entities_x_occurrences,
			restrict_to_relationship_types = [created_by],
			
			group_mode = alphabetical,
			
			facet_groups = [work],
			
			natural_sort = 0,
			order_by_label_fields = [surname, forename, middlename],
			
			indefinite_article = an,
			label_singular = _("creator"),
			label_plural = _("creators")
		},
		work_general_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_occurrences,
			relationship_table = ca_occurrences_x_occurrences,
			restrict_to_types = [work],
			
			group_mode = alphabetical,
			
			requires = x,
			natural_sort = 0,
			order_by_label_fields = [name],
			
			indefinite_article = an,
			label_singular = _("work"),
			label_plural = _("works")
		},
		production_general_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_occurrences,
			relationship_table = ca_occurrences_x_occurrences,
			restrict_to_types = [production],
			
			group_mode = alphabetical,
			
			requires = x,
			natural_sort = 0,
			order_by_label_fields = [name],
			
			indefinite_article = an,
			label_singular = _("production, training, event"),
			label_plural = _("productions, trainings, events")
		},
		entity_general_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_entities,
			relationship_table = ca_entities_x_occurrences,
			
			group_mode = alphabetical,
			
			requires = x,
			
			natural_sort = 0,
			order_by_label_fields = [surname, forename, middlename],
			
			indefinite_article = an,
			label_singular = _("Entity"),
			label_plural = _("Entities")
		},
		object_general_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_objects,
			relationship_table = ca_objects_x_occurrences,
			
			group_mode = alphabetical,
			
			requires = x,
			
			natural_sort = 0,
			
			indefinite_article = an,
			label_singular = _("Object"),
			label_plural = _("Objects")
		},
		
	}
}
# --------------------------------------------------------------------
# Configuration for entity browse
ca_entities = {
	name = _("Entities"),
	facets = {
		role_facet = {
	        type = relationship_types,
	        table = ca_occurrences,
	        restrict_to_relationship_types = [actor, adapted_by, artistic_director, choreographer, company_manager, composer, conceived_by, conductor, costume_designer, created_by, dancer, director, dramaturg, inspired_by, intern, lighting_designer, lyrics, moderator, music_director, performer, photographer, presenter, producer, production_manager, puppetry, set_designer, sound_designer, speaker, stage_manager, tour_manager, trainer],
			relationship_table = ca_entities_x_occurrences,
			
			label_singular = ,
			label_plural = 	
	    }
	}
}
# --------------------------------------------------------------------
# Configuration for object browse
ca_objects = {
	name = _("Objects"),
	facets = {
		type_facet = {
			type = fieldList,
			field = type_id,
			
			group_mode = none,

			label_singular = _("Type"),
			label_plural = _("Types")
		},
		work_facet = {
			type = authority,
			table = ca_occurrences,
			relationship_table = ca_objects_x_occurrences,
			restrict_to_types = [work],
			
			group_mode = alphabetical,
			order_by_label_fields = [name_sort],
			
			label_singular = _("Work"),
			label_plural = _("Works")
		},
#		decade_facet = {
#			type = normalizedDates,
#			element_code = recording_date,
#			normalization = decades,
			
#			group_mode = none,
			
#			label_singular = _("Recording Date"),
#			label_plural = _("Recording Dates")			
#		},
#		creation_date_facet = {
#			type = normalizedDates,
#			element_code = sourceDate,
#			normalization = decades,
			
#			group_mode = none,
			
#			label_singular = _("Creation Date"),
#			label_plural = _("Creation Date")			
#		},
		decade_facet = {
			type = normalizedDates,
			element_code = date,
			normalization = decades,
			
			group_mode = none,
			
			label_singular = _("Decade"),
			label_plural = _("Decades")			
		},
		year_facet = {
			type = normalizedDates,
			element_code = date,
			normalization = years,
			
			requires = decade_facet,
			group_mode = none,
			
			label_singular = _("Year"),
			label_plural = _("Years")			
		},
		photographer_facet = {
			type = authority,
			table = ca_entities,
			relationship_table = ca_objects_x_entities,
			restrict_to_relationship_types = [photographer],
			
			group_mode = alphabetical,
			
			label_singular = _("Photographer"),
			label_plural = _("Photographers"),
			
			natural_sort = 0,
			order_by_label_fields = [surname]
		},
		videographer_facet = {
			type = authority,
			table = ca_entities,
			relationship_table = ca_objects_x_entities,
			restrict_to_relationship_types = [videographer],
			
			group_mode = alphabetical,
			
			label_singular = _("Videographer"),
			label_plural = _("Videographers"),
			
			natural_sort = 0,
			order_by_label_fields = [surname]
		},
		creator_facet = {
			type = authority,
			table = ca_entities,
			relationship_table = ca_objects_x_entities,
			restrict_to_relationship_types = [creator],
			
			group_mode = alphabetical,
			
			label_singular = _("Creator"),
			label_plural = _("Creators"),
			
			natural_sort = 0,
			order_by_label_fields = [surname]
		},
		entity_facet = {
			type = authority,
			table = ca_entities,
			relationship_table = ca_objects_x_entities,
			restrict_to_types = [],
			
			group_mode = alphabetical,
			
			label_singular = _("Person/Organization"),
			label_plural = _("People/Organization"),
			requires = x
		},
		venue_facet = {
			type = authority,
			table = ca_occurrences,
			relationship_table = ca_objects_x_occurrences,
			restrict_to_types = [venue],
			
			group_mode = alphabetical,
			
			label_singular = _("Venue"),
			label_plural = _("Venues"),
			requires = x
		},
		production_general_facet = {
			type = authority,
			table = ca_occurrences,
			relationship_table = ca_objects_x_occurrences,
			restrict_to_types = [production,special_event,training],
			
			group_mode = alphabetical,

			label_singular = _("production, training, event"),
			label_plural = _("productions, trainings, events"),
			requires = x
		},
		related_object_facet = {
			type = authority,
			table = ca_objects,
			relationship_table = ca_objects_x_objects,
			
			group_mode = alphabetical,
			
			label_singular = _("Object"),
			label_plural = _("Objects"),
			requires = x
		}
	}
}