
cache_timeout = 0

#
# 
#
browseTypes = {
	artworks = {
		displayName = _(Works),
		labelSingular = _("Work"),
 		labelPlural = _("Works"),
		table = ca_objects,
		
		restrictToTypes = [side],
		#dontExpandTypesHierarchically = false,
		availableFacets = [],
#		showLetterBarFrom = ca_object_labels.name_sort,
#		showLetterBarSorts = [ca_object_labels.name_sort;ca_objects.date_group],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			images = {},
#			list = {},
		},
		sortBy = {
#			Institution_Identifier = ca_objects.institutional_id;ca_objects.date_group,
			Title = ca_object_labels.name_sort;ca_objects.date_group,
			Date = ca_objects.creation_date;ca_objects.date_group
		},
		# --- default sort direction for the sortBy options
		sortDirection = {
			Catalog_Number = asc,
			Title = asc,
			Date = asc,
			
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown
	},
	worksInCollection = {
		displayName = _(Works in collection),
		labelSingular = _("Work"),
 		labelPlural = _("Works"),
		table = ca_objects,
		
		restrictToTypes = [side],
		expandResultsHierarchically = true,
		#dontExpandTypesHierarchically = false,
		availableFacets = [],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			images = {},
#			list = {},
		},
		sortBy = {
#			Institutional_Identifier = ca_objects.institutional_id;ca_objects.date_group,
			Title = ca_object_labels.name_sort;ca_objects.date_group,
			Date = ca_objects.creation_date;ca_objects.date_group
		},
		# --- default sort direction for the sortBy options
		sortDirection = {
			Catalog_Number = asc,
			Title = asc,
			Date = asc,
			
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown
	},
	worksInOccurrence = {
		displayName = _(Works in occurrence),
		labelSingular = _("Work"),
 		labelPlural = _("Works"),
		table = ca_objects,
		
		restrictToTypes = [side],
		expandResultsHierarchically = true,
		#dontExpandTypesHierarchically = false,
		availableFacets = [],
		menuWidth = 14,
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			images = {},
#			list = {},
		},
		sortBy = {
#			Institutional_Identifier = ca_objects.institutional_id;ca_objects.date_group,
			Title = ca_object_labels.name_sort;ca_objects.date_group,
			Date = ca_objects.creation_date;ca_objects.date_group
		},
		# --- default sort direction for the sortBy options
		sortDirection = {
			Catalog_Number = asc,
			Title = asc,
			Date = asc,
			
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown
	},
	provenance = {
		displayName = _(Provenance),
		labelSingular = _("Provenance"),
 		labelPlural = _("Provenance"),
		table = ca_collections,
		restrictToTypes = [collection,other],
#		showLetterBarFrom = ca_collection_labels.name_sort,
#		showLetterBarSorts = [ca_collection_labels.name],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {  
			list = {}
		},
		
		sortBy = {
			Name = ca_collection_labels.name_sort,
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown
	},	
	exhibitions = {
		displayName = _(Exhibitions),
		labelSingular = _("Exhibition"),
 		labelPlural = _("Exhibitions"),
		table = ca_occurrences,
		restrictToTypes = [exhibition],
#		showLetterBarFrom = ca_occurrence_labels.name_sort,
#		showLetterBarSorts = [ca_occurrence_labels.name_sort;ca_entities.preferred_labels.name_sort],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			list = {}
		},
		
		sortBy = {
			Title = ca_occurrence_labels.name_sort;ca_entities.preferred_labels.name_sort,
			Date = ca_occurrences.occurrence_dates,
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown
	}
	references = {
		displayName = _(References),
		labelSingular = _("Reference"),
 		labelPlural = _("References"),
		table = ca_occurrences,
		restrictToTypes = [reference],
#		showLetterBarFrom = ca_occurrence_labels.name_sort,
#		showLetterBarSorts = [ca_occurrence_labels.name_sort],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			list = {}
		},
		
		sortBy = {
			Name = ca_occurrence_labels.name_sort,
			Date = ca_occurrences.occurrence_dates,
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown
	}		
}

ca_objects = {
	name = _("Works"),
	facets = {
		decade_facet = {
			type = normalizedDates,
			element_code = creation_date,
			normalization = decades,
			width = ,
			column = 12,
			
			group_mode = none,
			multiple = 1,
			
			label_singular = _("decade"),
			label_plural = _("decades"),
			description = _("The year, or range of years if a precise date is unknown, when a work was made."),			
		},
		year_facet = {
			type = normalizedDates,
			element_code = creation_date,
			normalization = years,
			requires = decade_facet,
			column = 12,
			
			group_mode = none,
			
			multiple = 1,
			
			label_singular = _("year"),
			label_plural = _("years"),
			description = _("The year, or range of years if a precise date is unknown, when a work was made."),			
		},
		medium_facet = {
			type = attribute,
			element_code = medium_list,
			
			group_mode = alphabetical,
			exclude_values = [null],
			column = 12,
			
			multiple = 1,
			
			label_singular = _("medium"),
			label_plural = _("medium"),
			description = _("Description, based on physical examination, of the materials used to create a work."),			
		},	
		paper_facet = {
			type = attribute,
			element_code = paper,
			
			relative_to = ca_objects.parent_id,
			dont_expand_hierarchically = 0,	
			column = 12,
			width = ,		
			
			group_mode = alphabetical,
			exclude_values = [null],
			
			multiple = 1,
			
			label_singular = _("support"),
			label_plural = _("support"),
			description = _("Description of the type of paper to which medium has been applied."),			
		},
		watermark_facet = {
			type = attribute,
			element_code = watermark_list,
			column = 12,
			
			relative_to = ca_objects.parent_id,
			group_mode = alphabetical,
			exclude_values = [null],
			
			multiple = 1,
			
			label_singular = _("watermark"),
			label_plural = _("watermarks"),
			description = _("Documentation of any portion of a watermark (a design formed during the papermaking process that usually includes the manufacturer’s name or trademark) visible in the paper support."),			
		},		
		mount_facet = {
			type = attribute,
			element_code = mount,
			
			relative_to = ca_objects.parent_id,
			dont_expand_hierarchically = 0,
			column = 12,
			width = ,
			
			group_mode = alphabetical,
			exclude_values = [null],
			
			multiple = 1,
			
			label_singular = _("mount"),
			label_plural = _("mounts"),
			description = _("Description of the material characteristics of a secondary support—original, of aesthetic integrity, and/or historical significance—to which a work has been attached."),			
		},
		term_facet = {
			type = authority,
			table = ca_list_items,
			relationship_table = ca_objects_x_vocabulary_terms,
			restrict_to_types = [],
			
			individual_group_display = 0,
			
			group_mode = alphabetical,
			
			# Set to non-zero value to display hierarchy on items in this facet
			show_hierarchy = 1,
			width = ,
			column = 12,
			left = 1,
			
			order_by_label_fields = [name_plural],
			
			# Character(s) to place between elements of the hierarchy
			hierarchical_delimiter =  &nbsp;⬅&nbsp;,
			
			# Number of items to trim off the top (leave blank or set to 0 to trim nothing)
			remove_first_items = ,
			
			# Maximum length of hierarchy to display (leave blank to return hierarchy unabridged)
			hierarchy_limit = 3,
			
			multiple = 1,
			
			# can be ASC or DESC (default is DESC)
			hierarchy_order  = DESC,
			
			label_singular = _("tags"),
			label_plural = _("tags"),
			description = _("Browse keywords and vocabulary terms.")
		},		
		exhibited_facet = {
			type = has,
			table = ca_occurrences,
			relationship_table = ca_objects_x_occurrences,
			restrict_to_types = [exhibition],
			column = 12,
			show_only = 1,
			multiple = 1,
			
			label_yes = _("exhibited"),
			label_no = _("not exhibited"),
			
			single_value = 1,
			
			label_singular = _("exhibited"),
			label_plural = _("exhibited"),
			description = _("A work that has been on view in an exhibition."),			
		},
		published_facet = {
			type = has,
			table = ca_occurrences,
			relationship_table = ca_objects_x_occurrences,
			restrict_to_types = [reference],
			column = 12,
			show_only = 1,
			multiple = 1,
			
			label_yes = _("published"),
			label_no = _("not published"),
			
			single_value = 1,
			
			label_singular = _("published"),
			label_plural = _("published"),
			description = _("A work that has been illustrated or referred to in a publication."),			
		},
		double_facet = {
			type = attribute,
			element_code = double_sided,
			
			relative_to = ca_objects.parent_id,
			dont_expand_hierarchically = 0,	
			column = 12,
			show_only = 1,
			multiple = 1,
			
			group_mode = alphabetical,
			exclude_values = [null],
			
			label_singular = _("double sided"),
			label_plural = _("double sided"), 
			description = _("Description of the type of paper to which medium has been applied."),			
		},	
		collection = {
			type = authority,
			table = ca_collections,
			relationship_table = ca_objects_x_collections,
			restrict_to_types = [collection,other],
			restrict_to_relationship_types = [],
			
			group_mode = alphabetical,
			
			label_singular = _("collection"),
			label_plural = _("collections")
		},
		past_collection = {
			type = authority,
			table = ca_collections,
			relationship_table = ca_objects_x_collections,
			restrict_to_types = [collection,other],
			restrict_to_relationship_types = [],
			
			filter_on_interstitial = {
				current_collection = [previous]
			},
			
			group_mode = alphabetical,
			
			label_singular = _("past collection"),
			label_plural = _("past collections")
		},
		current_collection = {
			type = authority,
			table = ca_collections,
			relationship_table = ca_objects_x_collections,
			restrict_to_types = [collection,other],
			restrict_to_relationship_types = [],
			
			filter_on_interstitial = {
				current_collection = [current]
			},
			
			group_mode = alphabetical,
			
			label_singular = _("current collection"),
			label_plural = _("current collections")
		},
		exhibition = {
			type = authority,
			table = ca_occurrences,
			relationship_table = ca_objects_x_occurrences,
			restrict_to_types = [exhibition],
			restrict_to_relationship_types = [],
			
			requires = [hide],
			
			group_mode = alphabetical,
			
			label_singular = _("exhibition"),
			label_plural = _("exhibitions")
		},
		reference = {
			type = authority,
			table = ca_occurrences,
			relationship_table = ca_objects_x_occurrences,
			restrict_to_types = [reference],
			restrict_to_relationship_types = [],
			
			requires = [hide],
			
			group_mode = alphabetical,
			
			label_singular = _("reference"),
			label_plural = _("references")
		},
	}
}

ca_occurrences = {
	name = _("Other authorities"),
	facets = {
		decade_facet = {
			type = normalizedDates,
			element_code = occurrence_dates,
			normalization = decades,
			width = ,
			column = 12,
			
			group_mode = none,
			
			multiple = 1,
			
			label_singular = _("decade"),
			label_plural = _("decades")
		},	
		year_facet = {
			type = normalizedDates,
			element_code = occurrence_dates,
			normalization = years,
			requires = decade_facet,
			column = 12,
			width = ,
			
			group_mode = alphabetical,
			
			multiple = 1,
			
			label_singular = _("year"),
			label_plural = _("years")
		},	
		place_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_places,
			relationship_table = ca_places_x_occurrences,
			restrict_to_types = [],
			restrict_to_relationship_types = [],
			
			group_mode = hierarchical,
			
			multiple = 1,
			width = ,
			column = 6,
			
			order_by_label_fields = [name_sort],
			
			indefinite_article = an,
			label_singular = _("location"),
			label_plural = _("location")
		},		
		entity_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_entities,
			relationship_table = ca_entities_x_occurrences,
			restrict_to_types = [],
			restrict_to_relationship_types = [venue],
			
			group_mode = alphabetical,
			column = 12,
			width = ,
			
			multiple = 1,
			natural_sort = 1,
			
			order_by_label_fields = [surname, forename, middlename],
			
			indefinite_article = an,
			label_singular = _("venue"),
			label_plural = _("venues")
		},
		author_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_entities,
			relationship_table = ca_entities_x_occurrences,
			restrict_to_types = [],
			restrict_to_relationship_types = [author, editor],
			
			group_mode = alphabetical,
			
			multiple = 1,
			column = 12,
			width = ,
			
			order_by_label_fields = [surname, forename, middlename],
			
			indefinite_article = an,
			label_singular = _("author/editor"),
			label_plural = _("authors/editors")
		},		
		venue_facet = {
			type = attribute,
			element_code = exhibition_venue_type,
			
			group_mode = alphabetical,
			column = 12,
			width = ,
			
			multiple = 1,
			
			label_singular = _("Venue Type"),
			label_plural = _("Venue Types")
		},
		reference_facet = {
			type = attribute,
			element_code = reference_type,
			
			group_mode = alphabetical,
			column = 12,
			width = ,
			
			multiple = 1,
			
			label_singular = _("Type"),
			label_plural = _("Types")
		},
		group_facet = {
			type = attribute,
			element_code = exhibition_type,
			
			group_mode = alphabetical,
			show_only = 1,
			multiple = 1,
			column = 12,
			width = ,
			
			label_singular = _("Group/Solo"),
			label_plural = _("Group/Solo")
		},			
	}
}
ca_collections = {
	name = _("Provenance"),
	facets = {
		place_facet = {
			type = authority,
			table = ca_places,
			relationship_table = ca_places_x_collections,
			restrict_to_types = [],
			
			group_mode = hierarchical,
			
			multiple = 1,
			width = ,
			column = 6,
			
			label_singular = _("location"),
			label_plural = _("locations")
		},
#		current_collection = {
#			type = has,
#			table = ca_objects,
#			relationship_table = ca_objects_x_collections,
#			restrict_to_types = [],
#			restrict_to_relationship_types = [],
			
#			filter_on_interstitial = {
#				current_collection = [yes]
#			},
			
#			group_mode = alphabetical,
			
#			label_singular = _("current collection"),
#			label_plural = _("current collections")
		}		
	}
}

views = {
	images = {
		icon = glyphicon-th
	},
	list = {
		icon = glyphicon-list
	},
	timeline = {
		icon = glyphicon-time
	},
	map = {
		icon = glyphicon-globe
	}
}

# --- text for Browse menu item, default is "Browse" 
browse_menu_button_text = 

# --- default number of results per page/ajax load
defaultHitsPerBlock = 36

# --- set to list to show dropdown with links to each configured browse or a single Browse nav link when one browse is configured
browseMenuFormat =

# --- set if you don't want the browse menu to be preloaded with facets for the first browse type on open
dontPreloadBrowseMenu = 1

# --- refine_col_class -> boostrap col class to assign to refine col - defaults to: col-sm-8 col-md-8 col-lg-8
result_col_class =

# --- refine_col_class -> boostrap col class to assign to refine col - defaults to: col-sm-4 col-md-3 col-md-offset-1 col-lg-3 col-lg-offset-1
refine_col_class =