cache_timeout = 0

#
# 
#
browseTypes = {
	objects = {
		displayName = _(Objects),
		labelSingular = _("Object"),
 		labelPlural = _("Objects"),
		table = ca_objects,
		
		restrictToTypes = [],
		#dontExpandTypesHierarchically = true,
		availableFacets = [],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			images = {},
			list = {},
			timeline = {
				data = ca_objects.issued,
				display = {
					title_template = <l>^ca_objects.preferred_labels.name</l>,
					description_template = <p>^ca_objects.description</p>,
					credit_template = ^ca_objects.rightsStatement.rightsStatement_text,
					caption_template = <em>^ca_objects.caption</em>,
					image = ^ca_object_representations.media.small,
					icon = ^ca_object_representations.media.icon
				}
			}
		},
		sortBy = {
			Date = ca_objects.issued,
			Title = ca_object_labels.name
		},
		# --- default sort direction for the sortBy options
		sortDirection = {
			Date = desc,
			Title = asc, 
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown,
		facetGroup = main
	},
	analytics = {
		displayName = _(Analytics),
		labelSingular = _("analytic browse"),
 		labelPlural = _("analytic browse"),
		table = ca_objects,
		
		restrictToTypes = [],
		#dontExpandTypesHierarchically = true,
		availableFacets = [analytics_locationOnBody_facet],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			images = {},
			list = {},
			timeline = {
				data = ca_objects.issued,
				display = {
					title_template = <l>^ca_objects.preferred_labels.name</l>,
					description_template = <p>^ca_objects.description</p>,
					credit_template = ^ca_objects.rightsStatement.rightsStatement_text,
					caption_template = <em>^ca_objects.caption</em>,
					image = ^ca_object_representations.media.small,
					icon = ^ca_object_representations.media.icon
				}
			}
		},
		sortBy = {
			Date = ca_objects.issued,
			Title = ca_object_labels.name
		},
		# --- default sort direction for the sortBy options
		sortDirection = {
			Date = desc,
			Title = asc, 
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown,
		facetGroup = analytics
	}
}
ca_objects = {
	name = _("Objects"),
	facets = {
		use_facet = {
			type = attribute,
			element_code = use,
			
			group_mode = none,
			indefinite_article = a,
			label_singular = _("HCI Platform"),
			label_plural = _("HCI Platform"),
			description = _("Browse the archive by how the depicted invention is being used. We are tracking inventions that can be carried, worn, implanted, and used bionically."),
			individual_group_display = 0,
			
			facet_groups = [main, analytics]
		},	
		classification_facet = {
			type = attribute,
			element_code = classification,
			
			group_mode = none,
			indefinite_article = a,
			label_singular = _("Discursive Type"),
			label_plural = _("Discursive Types"),
			description = _("Browse the archive by whether an artifact describes an Invention, the popular culture object of an Allusion made by an invention, or a Response to an invention. "),
			individual_group_display = 0,
			
			facet_groups = [main, analytics]
		},
		persuasive_facet = {
			type = attribute,
			element_code = persuasive_intention,
			
			group_mode = none,
			indefinite_article = a,
			label_singular = _("Persuasive Type"),
			label_plural = _("Persuasive Types"),
			description = _("Browse the archive by whether an artifact describes an Invention, the popular culture object of an Allusion made by an invention, or a Response to an invention. "),
			individual_group_display = 0,
			
			facet_groups = [main, analytics]
		},		
		media_type_facet = {
			type = attribute,
			element_code = media_type,
			
			group_mode = hierarchical,
			show_hierarchy = 1,
			
			indefinite_article = a,
			label_singular = _("Media Type"),
			label_plural = _("Media Types"),
			description = _("Browse the archive by whether an artifact describes an Invention, the popular culture object of an Allusion made by an invention, or a Response to an invention. "),
			individual_group_display = 0,
			
			facet_groups = [main, analytics]
		},				
		collection_facet = {
			type = authority,
			table = ca_collections,
			relationship_table = ca_objects_x_collections,
			restrict_to_types = [],
			
			group_mode = none,

			label_singular = _("collection"),
			label_plural = _("collections"),
			description = _("Find objects according to the Collections they belong to."),
			
			facet_groups = [main]
		},
#		occurrence_facet = {
#			type = authority,
#			table = ca_occurrences,
#			generate_facets_for_types = 0,
#			relationship_table = ca_objects_x_occurrences,
#			restrict_to_types = [production],
#			
#			individual_group_display = 0,
#			
#			show_all_when_first_facet = 0,
#			
#			group_mode = alphabetical,
#			order_by_label_fields = [name_sort],
#			
#			label_singular = _("Film"),
#			label_plural = _("Films"),
#			description = _("Find objects by Occurrences associated with your records&#44; such as historical events&#44; productions&#44; and other record types in your collection."),
#			
#			facet_groups = [main]
#		},		
		locationOnBody_facet = {
			type = attribute,
			element_code = locationOnBody,
			
			group_mode = alphabetical,
			indefinite_article = a,
			label_singular = _("Location on the Body"),
			label_plural = _("Locations on the Body"),
			description = _("Browse the archive by the location(s) on the body where artifacts are used, worn, or implanted."),
			individual_group_display = 0,
			
			facet_groups = [main]
		},
		augments_facet = {
			type = attribute,
			element_code = augments,
			
			group_mode = alphabetical,
			indefinite_article = "",
			label_singular = _("Augments"),
			label_plural = _("Augments"),
			description = _("Browse the archive by keywords that describe how inventions augment our lives and abilities. These keywords are expressed as action verbs. "),
			individual_group_display = 0,
			
			facet_groups = [main, analytics]
		},
		entity_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_entities,
			relationship_table = ca_objects_x_entities,
			restrict_to_types = [],
			
			individual_group_display = 1,
			
			groupings = {
				label = _("Name"), 
				relationship_types = _("Role"),
				type = _("Type")
			},
			group_mode = alphabetical,
			order_by_label_fields = [surname, forename, middlename],
			
			indefinite_article = an,
			label_singular = _("People/Companies/Related Entities"),
			label_plural = _("People/Companies/Related Entities"),
			description = _("Find objects according to the people associated with your records.  You can browse by name&#44; role&#44; or entity type according to your configuration."),
			
			facet_groups = [main]
		},									
		technology_keywords_facet = {
			type = attribute,
			element_code = technology,
			
			#requires = keywords_facet,
			group_mode = alphabetical,
			indefinite_article = a,
			label_singular = _("Technology"),
			label_plural = _("Technologies"),
			description = _("Browse the archive by the technologies depicted by artifacts."),
			individual_group_display = 0,
			
			facet_groups = [main, analytics]
		},
		marketing_keywords_facet = {
			type = attribute,
			element_code = marketing,
			
			#requires = keywords_facet,
			group_mode = alphabetical,
			indefinite_article = a,
			label_singular = _("Marketing"),
			label_plural = _("Marketing"),
			description = _("Browse the archive by the marketing terms that describe the artifacts."),
			individual_group_display = 0,
			
			facet_groups = [main, analytics]
		},
		keywords_facet = {
			type = attribute,
			element_code = keywords,
			
			group_mode = alphabetical,
			indefinite_article = a,
			label_singular = _("Keyword"),
			label_plural = _("Keywords"),
			description = _("Browse the archive by other keywords that describe the artifacts."),
			individual_group_display = 0,
			
			facet_groups = [main, analytics]
		},						
		
#		type_facet = {
#			type = fieldList,
#			field = type_id,
#			
#			group_mode = none,
#
#			label_singular = _("object type"),
#			label_plural = _("object types"),
#			description = _("Find objects according to the Types defined in your collection profile."),
#		},	
		place_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_places,
			relationship_table = ca_objects_x_places,
			restrict_to_types = [],
			
			individual_group_display = 1,
			
			group_mode = hierarchical,
			order_by_label_fields = [name],
			
			# Set to non-zero value to display hierarchy on items in this facet
			show_hierarchy = 1,
			
			# Character(s) to place between elements of the hierarchy
			hierarchical_delimiter = &nbsp;⬅&nbsp;,
			
			# Number of items to trim off the top (leave blank or set to 0 to trim nothing)
			remove_first_items = ,
			
			# Maximum length of hierarchy to display (leave blank to return hierarchy unabridged)
			hierarchy_limit = 3,
			
			# can be ASC or DESC (default is DESC)
			hierarchy_order  = DESC,
			
			indefinite_article = a,
			label_singular = _("place"),
			label_plural = _("places"),
			description = _("Find objects according to the place relationships in your collection.  You can choose to view the available places as a list or heirarchy of place names."),
			
			facet_groups = [main]
		},
		term_facet = {
			type = authority,
			table = ca_list_items,
			relationship_table = ca_objects_x_vocabulary_terms,
			restrict_to_types = [],
			
			individual_group_display = 0,
			
			group_mode = alphabetical,
			
			# Set to non-zero value to display hierarchy on items in this facet
			show_hierarchy = 1,
			
			# Character(s) to place between elements of the hierarchy
			hierarchical_delimiter =  &nbsp;⬅&nbsp;,
			
			# Number of items to trim off the top (leave blank or set to 0 to trim nothing)
			remove_first_items = ,
			
			# Maximum length of hierarchy to display (leave blank to return hierarchy unabridged)
			hierarchy_limit = 3,
			
			# can be ASC or DESC (default is DESC)
			hierarchy_order  = DESC,
			
			label_singular = _("term"),
			label_plural = _("terms"),
			description = _("Browse keywords and vocabulary terms you have associated with your records.  You can displays your keywords as a list or hierarchy of terms."),
			
			facet_groups = [main]
		},
		century_facet = {
			type = normalizedDates,
			element_code = creation_date,
			normalization = centuries,
			
			group_mode = none,
			
			label_singular = _("century"),
			label_plural = _("centuries"),
			description = _("Find objects according to associated dates.  You can normalize these dates by year&#44; decade or century."),
			
			facet_groups = [main]
		},
		decade_facet = {
			type = normalizedDates,
			element_code = creation_date,
			normalization = decades,
			
			group_mode = none,
			
			label_singular = _("decade"),
			label_plural = _("decades"),
			description = _("Find objects according to associated dates.  You can normalize these dates by year&#44; decade or century."),
			
			facet_groups = [main]		
		},
		year_facet = {
			type = normalizedDates,
			element_code = creation_date,
			normalization = years,
			
			group_mode = none,
			
			label_singular = _("year"),
			label_plural = _("years"),
			description = _("Find objects according to associated dates.  You can normalize these dates by year&#44; decade or century."),
			
			facet_groups = [main]			
		},
		label_facet = {
			type = label,
			preferred_labels_only = 1,
			
			group_mode = alphabetical,

			label_singular = _("title"),
			label_plural = _("title"),
			description = _("Find objects according to their title."),
			
			facet_groups = [main]
		},
#		has_media_facet = {
#			type = has,
#			
#			table = ca_object_representations,
#			relationship_table = ca_objects_x_object_representations,
#			restrict_to_types = [],
#			restrict_to_relationship_types = [],
#			
#			label_yes = _("Has media"),
#			label_no = _("Does not have media"),
#			
#			single_value = 1,
#			
#			label_singular = _("has media"),
#			label_plural = _("has media"),
#			description = _("Find objects that have associated media."),
#		},
		analytics_pub_title_facet = {
			type = attribute,
			element_code = publication_title_name,
			
			group_mode = none,
			indefinite_article = a,
			label_singular = _("Publication Title"),
			label_plural = _("Publication Title"),
			individual_group_display = 0,
			
			facet_groups = [main, analytics]
		},
		analytics_pub_date = {
			type = normalizedDates,
			element_code = issued,
			normalization = years,			
			group_mode = none,
			indefinite_article = a,
			label_singular = _("Publication year"),
			label_plural = _("Publication year"),
			individual_group_display = 0,
			
			facet_groups = [analytics]
		},
		analytics_has_related_objects_facet = {
			type = has,
			
			table = ca_objects,
			relationship_table = ca_objects_x_objects,
			restrict_to_types = [],
			restrict_to_relationship_types = [],
			
			label_yes = _("Has related objects"),
			label_no = _("Does not have related objects"),
			
			single_value = 1,
			
			label_singular = _("related objects"),
			label_plural = _("related objects"),
			
			facet_groups = [analytics]
		},
		analytics_has_related_entities_facet = {
			type = has,
			
			table = ca_entities,
			relationship_table = ca_objects_x_entities,
			restrict_to_types = [],
			restrict_to_relationship_types = [],
			
			label_yes = _("Has related entities"),
			label_no = _("Does not have related entities"),
			
			single_value = 1,
			
			label_singular = _("related entities"),
			label_plural = _("related entities"),
			
			facet_groups = [analytics]
		},
		analytics_locationOnBody_facet = {
			type = attribute,
			element_code = locationOnBody,
			
			group_mode = hierarchical,
			show_hierarchy = 1,
			indefinite_article = a,
			label_singular = _("Location on the Body"),
			label_plural = _("Locations on the Body"),
			description = _("Browse the archive by the location(s) on the body where artifacts are used, worn, or implanted."),
			individual_group_display = 0,
			
			facet_groups = [analytics]
		}
	}
}

views = {
	images = {
		icon = glyphicon-th
	},
	list = {
		icon = glyphicon-list
	},
	timeline = {
		icon = glyphicon-time
	},
	map = {
		icon = glyphicon-globe
	}
}

# --- text for Browse menu item, default is "Browse" 
browse_menu_button_text = 

# --- default number of results per page/ajax load
defaultHitsPerBlock = 36

# --- set to list to show dropdown with links to each configured browse or a single Browse nav link when one browse is configured
browseMenuFormat =

# --- set if you don't want the browse menu to be preloaded with facets for the first browse type on open
dontPreloadBrowseMenu = 1

# --- refine_col_class -> boostrap col class to assign to refine col - defaults to: col-sm-8 col-md-8 col-lg-8
result_col_class =

# --- refine_col_class -> boostrap col class to assign to refine col - defaults to: col-sm-4 col-md-3 col-md-offset-1 col-lg-3 col-lg-offset-1
refine_col_class =