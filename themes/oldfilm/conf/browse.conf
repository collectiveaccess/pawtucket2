cache_timeout = 86400

#
# 
#
browseTypes = {

	objects = {
		displayName = _(Objects),
		labelSingular = _("object"),
 		labelPlural = _("objects"),
		table = ca_objects,
		
		restrictToTypes = [],
		#dontExpandTypesHierarchically = true,
		availableFacets = [],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			list = {}
		},
		sortBy = {
			Title = ca_object_labels.name
		},
		# --- default sort direction for the sortBy options
		sortDirection = {
			Title = desc
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown,
		options = {
			resultTextLabel = ^ca_objects.preferred_labels.name,
			resultTextDescription = "<ifdef code='ca_objects.pbcoreFormatStandard'>^ca_objects.pbcoreFormatStandard; </ifdef><ifdef code='ca_objects.formatPhysical_nhf'>^ca_objects.formatPhysical_nhf; </ifdef><ifdef code='ca_objects.pbcoreFormatDuration'>^ca_objects.pbcoreFormatDuration; </ifdef><ifdef code='ca_objects.SoundSilent'>^ca_objects.SoundSilent; </ifdef><ifdef code='ca_objects.pbcoreFormatColors'>^ca_objects.pbcoreFormatColors; </ifdef>"	
		}
	},

	collections = {
		displayName = _(Collections),
		labelSingular = _("collection"),
 		labelPlural = _("collections"),
		table = ca_collections,
		restrictToTypes = [],
		showLetterBarFrom = ca_collection_labels.name,
		showLetterBarSorts = [ca_collection_labels.name],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = { 
			list = {}
		},
		
		sortBy = {
			Name = ca_collection_labels.name
		},
		# --- default sort direction for the sortBy options
		sortDirection = {
			Name = asc
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown,
		options = {
			resultTextLabel =
												<ifdef code='ca_collections.collection_still'>
													<div class='text-center bResultListItemImg'><l>^ca_collections.collection_still.icon</l></div>
												</ifdef>
												<l> 	
													^ca_collections.preferred_labels.name
												</l>
												,
			resultTextDescription =
		}
		
	},
	
	works = {
		displayName = _(Works),
		labelSingular = _("work"),
 		labelPlural = _("works"),
		table = ca_occurrences,
		restrictToTypes = [],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			list = {}
		},
		
		sortBy = {
			Identifer = ca_occurrences.idno_sort,
			Name = ca_occurrence_labels.name
		},
		# --- default sort direction for the sortBy options
		sortDirection = {
			Identifier = asc,
			Name = asc
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown,
		options = {
			resultTextLabel = "^ca_occurrences.idno <l>^ca_occurrences.preferred_labels.name</l>",
			resultTextDescription = "<ifdef code='ca_occurrences.pbcoreDescription.description_text'>
													^ca_occurrences.pbcoreDescription.description_text%truncate=180%ellipsis
												</ifdef>"
		},
	}
}

views = {
	images = {
		icon = glyphicon-th
	},
	list = {
		icon = glyphicon-list
	},
	timeline = {
		icon = glyphicon-time
	},
	map = {
		icon = glyphicon-globe
	}
}

# --- text for Browse menu item, default is "Browse" 
browse_menu_button_text = 

# --- default number of results per page/ajax load
defaultHitsPerBlock = 36

# --- set to list to show dropdown with links to each configured browse or a single Browse nav link when one browse is configured
browseMenuFormat = list

# --- set if you don't want the browse menu to be preloaded with facets for the first browse type on open
dontPreloadBrowseMenu = 1

# --- refine_col_class -> boostrap col class to assign to refine col - defaults to: col-sm-8 col-md-8 col-lg-8
result_col_class =

# --- refine_col_class -> boostrap col class to assign to refine col - defaults to: col-sm-4 col-md-3 col-md-offset-1 col-lg-3 col-lg-offset-1
refine_col_class =


# Configuration for object browse
ca_objects = {
	name = _("Objects"),
	facets = {
		type_facet = {
			type = fieldList,
			field = type_id,
			
			group_mode = none,

			label_singular = _("object type"),
			label_plural = _("object types"),
			description = _("Find objects according to the Types defined in your collection profile."),
		},	
		entity_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_entities,
			relationship_table = ca_objects_x_entities,
			restrict_to_types = [],
			
			individual_group_display = 1,
			
			groupings = {
				label = _("Name"), 
				relationship_types = _("Role"),
				type = _("Type")
			},
			group_mode = alphabetical,
			natural_sort = 0,
			order_by_label_fields = [surname, forename, middlename],
			
			indefinite_article = an,
			label_singular = _("person"),
			label_plural = _("people"),
			description = _("Find objects according to the people associated with your records.  You can browse by name&#44; role&#44; or entity type according to your configuration."),
		},

		decade_facet = {
			type = normalizedDates,
			element_code = creation_date,
			normalization = decades,
			
			group_mode = none,
			
			minimum_date = 1850,
			
			label_singular = _("decade"),
			label_plural = _("decades"),
			description = _("Find objects according to associated dates.  You can normalize these dates by year&#44; decade or century."),			
		},
		year_facet = {
			type = normalizedDates,
			element_code = creation_date,
			normalization = years,
			
			group_mode = none,
			
			minimum_date = 1850,
			
			label_singular = _("year"),
			label_plural = _("years"),
			description = _("Find objects according to associated dates.  You can normalize these dates by year&#44; decade or century."),			
		},
		occurrence_facet = {
			type = authority,
			table = ca_occurrences,
			generate_facets_for_types = 1,
			relationship_table = ca_objects_x_occurrences,
			restrict_to_types = [],
			
			individual_group_display = 1,
			
			show_all_when_first_facet = 0,
			
			groupings = {
				label = _("Name"), 
				ca_attribute_dates_value:years = _("Years")
			},
			
			group_mode = alphabetical,
			
			label_singular = _("occurrence"),
			label_plural = _("occurrences"),
			description = _("Find objects by Occurrences associated with your records&#44; such as historical events&#44; productions&#44; and other record types in your collection."),
		},
		collection_facet = {
			type = authority,
			table = ca_collections,
			relationship_table = ca_objects_x_collections,
			restrict_to_types = [],
			
			group_mode = none,

			label_singular = _("collection"),
			label_plural = _("collections"),
			description = _("Find objects according to the Collections they belong to."),
		},
#		media_facet = {
#			type = has,
#			element_code = ca_collections.collection_moving_image_media,
#			
#			group_mode = alphabetical,
#			
#			label_yes = _("yes"),
#			label_no = _("no"),
#			
#			label_singular = _("has video"),
#			label_plural = _("has video")
#		},
	}
}


# --------------------------------------------------------------------
# Configuration for collection browse
ca_collections = {
	name = _("Collections"),
	facets = {
		decade_facet = {
			type = normalizedDates,
			element_code = collection_datespan,
			normalization = decades,
			
			group_mode = none,
			
			label_singular = _(decade),
			label_plural = _(decades)
		},
		year_facet = {
			type = normalizedDates,
			element_code = collection_datespan,
			normalization = year,
			requires = [decade_facet],
			
			group_mode = none,
			
			minimum_date = 1850,
			
			label_singular = _(year),
			label_plural = _(years)
		},
		genre_facet = {
			type = authority,
			table = ca_list_items,
			relationship_table = ca_collections_x_vocabulary_terms,
			restrict_to_relationship_types = [genre],
			
			group_mode = alphabetical,
			order_by_label_fields = [name_singular],
			
			label_singular = _(genre),
			label_plural = _(genres)
		},
		subject_facet = {
			type = authority,
			table = ca_list_items,
			relationship_table = ca_collections_x_vocabulary_terms,
			restrict_to_relationship_types = [subject],
			
			group_mode = alphabetical,
			order_by_label_fields = [name_singular],
			
			label_singular = _(subject),
			label_plural = _(subjects)
		},
#		geoloc_facet = {
#			type = attribute,
#			element_code = georeference,
#			restrict_to_types = [],
			
#			group_mode = alphabetical,

#			label_singular = _(place),
#			label_plural = _(places)
#		},
		entity_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_entities,
			relationship_table = ca_entities_x_collections,
			restrict_to_types = [],
			
			group_mode = alphabetical,
			
			order_by_label_fields = [surname, forename],
			
			indefinite_article = an,
			label_singular = _(people and organizations),
			label_plural = _(people and organizations)
		},
#		media_facet = {
#			type = has,
#			element_code = ca_collections.collection_moving_image_media,
#			
#			group_mode = alphabetical,
#			
#			label_yes = _("yes"),
#			label_no = _("no"),
#			
#			label_singular = _("has video"),
#			label_plural = _("has video")
#		}
	}
}

# --------------------------------------------------------------------
# Configuration for occurrence browse
ca_occurrences = {
	name = _(Works),
	facets = {
		collection_facet = {
			type = authority,
			table = ca_collections,
			relationship_table = ca_objects_x_collections,
			restrict_to_types = [],
			
			group_mode = alphabetical,
			order_by_label_fields = [name],

			label_singular = _("collection"),
			label_plural = _("collections"),
		},
		decade_facet = {
			type = normalizedDates,
			element_code = occ_date,
			normalization = decades,
			
			group_mode = none,
			
			minimum_date = 1850,
			
			label_singular = _(decade),
			label_plural = _(decades)
		},
		year_facet = {
			type = normalizedDates,
			element_code = occ_date,
			normalization = year,
			requires = [decade_facet],
			
			group_mode = none,
			
			minimum_date = 1850,
			
			label_singular = _(year),
			label_plural = _(years)
		},		
#		date_coverage_facet = {
#			type = attribute,
#			element_code = coverage,
#			
#			group_mode = none,
#			
#			multiple = 1,
#			
#			label_singular = _(dates),
#			label_plural = _(dates)
#		},
		genre_facet = {
			type = attribute,
			element_code = genre_terms,
			group_mode = alphabetical,
			
			
			label_singular = _(genre),
			label_plural = _(genres)
		},
		subject_facet = {
			type = authority,
			table = ca_list_items,
			relationship_table = ca_occurrences_x_vocabulary_terms,
			restrict_to_relationship_types = [subject],
			
			group_mode = alphabetical,
			order_by_label_fields = [name_singular],
			
			multiple = 1,
			
			label_singular = _(subject),
			label_plural = _(subjects)
		},
#		geoloc_facet = {
#			type = attribute,
#			element_code = georeference,
#			restrict_to_types = [],
			
#			group_mode = alphabetical,
			
#			multiple = 1,

#			label_singular = _(place),
#			label_plural = _(places)
#		},
		entity_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_entities,
			relationship_table = ca_entities_x_collections,
			restrict_to_types = [],
			
			group_mode = alphabetical,
			
			order_by_label_fields = [surname, forename],
			
			indefinite_article = an,
			label_singular = _(people and organizations),
			label_plural = _(people and organizations)
		},
		media_facet = {
			type = has,
			relativeTo = ca_objects,
			table = ca_object_representations,
			relationship_table = ca_objects_x_object_representations,
			restrict_to_types = [],
			restrict_to_relationship_types = [],
			
			label_yes = _("Yes"),
			label_no = _("No"),
			
			single_value = 1,
			
			label_singular = _("has video"),
			label_plural = _("has video")
		}
	}
}
