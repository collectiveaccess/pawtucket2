# number of seconds to keep cached browses around
# set to 0 to disable caching
cache_timeout = 0
#
# 
#
browseTypes = {
	objects = {
		displayName = _(Objects),
		labelSingular = _("Artwork"),
 		labelPlural = _("Artworks"),
		table = ca_objects,
		sortControlType = list,
		
		restrictToTypes = [artwork],
		availableFacets = [],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			images = {},
			list = {},
			timeline = {
				data = ca_objects.work_date,
				display = {
					title_template = <l>^ca_objects.preferred_labels.name</l> (^ca_objects.idno),
					description_template = <p>^ca_objects.description</p>,
					caption_template = <em>^ca_objects.caption</em>,
					image = ^ca_object_representations.media.small,
					icon = ^ca_object_representations.media.icon
				}
			}
		},
		sortBy = {
			Identifier = ca_objects.idno,
			Title = ca_object_labels.name
		},
		# --- default sort direction for the sortBy options
		sortDirection = {
			Identifier = asc,
			Title = desc
		}
	},
	entities = {
		displayName = _(People/Orgs),
		labelSingular = _("artist"),
 		labelPlural = _("artists"),
		table = ca_entities,
		showLetterBarFrom = ca_entity_labels.surname,
        showLetterBarSorts = [ca_entity_labels.surname;ca_entity_labels.forename],
        sortControlType = list,
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			images = {}, 
			list = {}
		},
		
		sortBy = {
			Name = ca_entity_labels.surname;ca_entity_labels.forename,
			Relevance = _natural
		},
		baseCriteria = {
			has_artwork = 1,
		}
	},
	collections = {
		displayName = _(Collections),
		labelSingular = _("collections"),
 		labelPlural = _("collections"),
		table = ca_collections,
		sortControlType = list,
		restrictToTypes = [gallery_collection],
		
		
		views = { 
			list = {}
		},
		
		sortBy = {
			Name = ca_collection_labels.name,
			Relevance = _natural
		}
	},
	locations = {
		displayName = _(Locations),
		labelSingular = _("location"),
 		labelPlural = _("locations"),
		table = ca_storage_locations,
		restrictToTypes = [campus, building, floor],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = { 
			images = {}, 
			list = {}
		},
		
		sortBy = {
			Name = ca_storage_location_labels.name,
			Relevance = _natural,
			Identifier = ca_storage_locations.idno_sort,			
		}
	}
}

views = {
	images = {
		icon = glyphicon-th
	},
	list = {
		icon = glyphicon-list
	},
	timeline = {
		icon = glyphicon-time
	},
	map = {
		icon = glyphicon-globe
	}
}

# --- default number of results per page/ajax load
defaultHitsPerBlock = 36

placeholder_media_icon = <i class='fa fa-picture-o fa-2x'></i>

# --- set to list to show dropdown with links to each configured browse or a single Browse nav link when one browse is configured
browse_menu_format = list

# --- refine_col_class -> boostrap col class to assign to refine col - defaults to: col-sm-8 col-md-8 col-lg-8
result_col_class =

# --- refine_col_class -> boostrap col class to assign to refine col - defaults to: col-sm-4 col-md-3 col-md-offset-1 col-lg-3 col-lg-offset-1
refine_col_class =


ca_objects = {
	name = _("Artworks"),
	facets = {
		type_facet = {
			type = fieldList,
			field = type_id,
			
			group_mode = none,

			label_singular = _("object type"),
			label_plural = _("object types"),
			description = _("Find objects according to the Types defined in your collection profile."),
		},	
	#	entity_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
	#		type = authority,		
	#		table = ca_entities,
	#		relationship_table = ca_objects_x_entities,
	#		restrict_to_types = [],
	#		restrict_to_relationship_types = [creator],
			
	#		individual_group_display = 1,
			
	#		groupings = {
	#			label = _("Name"), 
	#			relationship_types = _("Role"),
	#			type = _("Type")
	#		},
	#		group_mode = alphabetical,
	#		order_by_label_fields = [surname, forename, middlename],
			
	#		indefinite_article = an,
	#		label_singular = _("person"),
	#		label_plural = _("people"),
	#		description = _("Find objects according to the people associated with your records.  You can browse by name&#44; role&#44; or entity type according to your configuration."),
	#	},
		lcsh_facet = {
				type = attribute,
				element_code = lcsh,
			
				group_mode = alphabetical,

				label_singular = _("Subject"),
				label_plural = _("Subjects")
		},
		date_facet = {
			type = normalizedDates,
			element_code = work_date,
			normalization = years,
			sort =  DESC,
			
			group_mode = none,
			
			label_singular = _("year"),
			label_plural = _("years")
		}
		term_facet = {
			type = authority,
			table = ca_list_items,
			relationship_table = ca_objects_x_vocabulary_terms,
			restrict_to_types = [],
			
			individual_group_display = 0,
			
			group_mode = alphabetical,
			
			# Set to non-zero value to display hierarchy on items in this facet
			show_hierarchy = 1,
			
			# Character(s) to place between elements of the hierarchy
			hierarchical_delimiter =  &nbsp;â¬…&nbsp;,
			
			# Number of items to trim off the top (leave blank or set to 0 to trim nothing)
			remove_first_items = ,
			
			# Maximum length of hierarchy to display (leave blank to return hierarchy unabridged)
			hierarchy_limit = 3,
			
			# can be ASC or DESC (default is DESC)
			hierarchy_order  = DESC,
			
			label_singular = _("term"),
			label_plural = _("terms"),
			description = _("Browse keywords and vocabulary terms you have associated with your records.  You can displays your keywords as a list or hierarchy of terms.")
		},
		collection_facet = {
			type = authority,
			table = ca_collections,
			relationship_table = ca_objects_x_collections,
			restrict_to_types = [],
			
			group_mode = none,

			label_singular = _("collection"),
			label_plural = _("collections"),
			description = _("Find objects according to the Collections they belong to."),
		},
		location_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_storage_locations,
			relationship_table = ca_objects_x_storage_locations,
			restrict_to_types = [],
			restrict_to_relationship_types = [],
			
			individual_group_display = 0,
			
			group_mode = hierarchical,
			show_hierarchy = 1,
			
			order_by_label_fields = [name],
			indefinite_article = an,
			label_singular = _("location"),
			label_plural = _("locations"),
		},
		lot_facet = {
			type = authority,
			table = ca_object_lots,
			relationship_table = ca_objects_x_object_lots,
			restrict_to_types = [],
			
			group_mode = none,

			label_singular = _("lot"),
			label_plural = _("lots")
		},
	#	has_media_facet = {
	#		type = has,
			
	#		table = ca_object_representations,
	#		relationship_table = ca_objects_x_object_representations,
	#		restrict_to_types = [],
	#		restrict_to_relationship_types = [],
			
	#		label_yes = _("Has media"),
	#		label_no = _("Does not have media"),
			
	#		single_value = 1,
			
	#		label_singular = _("has media"),
	#		label_plural = _("has media"),
	#		description = _("Find objects that have associated media."),
	#	}
	}
}
# --------------------------------------------------------------------
# Configuration for entity browse
ca_entities = {
	name = _("Artists"),
	facets = {
		entitytype_facet = {
			type = fieldList,
			field = type_id,

			label_singular = _("Type"),
			label_plural = _("Types"),
		},
		date_facet = {
			type = normalizedDates,
			element_code = work_date,
			relative_to = ca_objects,
			relationship_table = ca_entities_x_objects,
			normalization = years,
			sort =  DESC,
			
			group_mode = none,
			
			label_singular = _("year"),
			label_plural = _("years")
		},
		nationality_facet = {
			type = attribute,
			element_code = nationality,	
			label_singular = _("Nationality"),
			label_plural = _("Nationalities")
		},
		alumni_facet = {
			type = attribute,
			element_code = alumni_notes,	
			label_singular = _("Alumni"),
			label_plural = _("Alumni")
		},
		location_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_storage_locations,
			relative_to = ca_objects,
			relationship_table = ca_objects_x_storage_locations,
			restrict_to_types = [],
			restrict_to_relationship_types = [],
			
			individual_group_display = 0,
			
			group_mode = hierarchical,
			show_hierarchy = 1,
			
			order_by_label_fields = [name],
			indefinite_article = an,
			label_singular = _("location"),
			label_plural = _("locations"),
		},
		occurrence_facet = {
			type = authority,
			table = ca_occurrences,
			generate_facets_for_types = 1,
			relationship_table = ca_entities_x_occurrences,
			restrict_to_types = [],
			
			group_mode = alphabetical,
			
			indefinite_article = an,
			label_singular = _("occurrence"),
			label_plural = _("occurrences")
		},
		has_artwork = {
			type = has,
			
			table = ca_objects,
			relationship_table = ca_objects_x_entities,
			restrict_to_types = [],
			restrict_to_relationship_types = [creator],
			
			label_yes = _("Has artwork"),
			label_no = _("Does not have artwork"),
			
			single_value = 1,
			
			label_singular = _("has artwork"),
			label_plural = _("has artwork")
		}
	}
}
# --------------------------------------------------------------------
# Configuration for collection browse
ca_collections = {
	name = _("Collections"),
	facets = {
		entity_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_entities,
			relative_to = ca_objects,
			relationship_table = ca_objects_x_entities,
			restrict_to_types = [],
			
			group_mode = alphabetical,
			
			order_by_label_fields = [surname, forename, middlename],
			
			indefinite_article = an,
			label_singular = _("entity"),
			label_plural = _("entities")
		},
		location_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,	
			relative_to = ca_objects,	
			table = ca_storage_locations,
			relationship_table = ca_objects_x_storage_locations,
			restrict_to_types = [],
			restrict_to_relationship_types = [],
			
			individual_group_display = 0,
			
			group_mode = hierarchical,
			show_hierarchy = 1,
			
			order_by_label_fields = [name],
			indefinite_article = an,
			label_singular = _("location"),
			label_plural = _("locations"),
		},
	#	place_facet = {
	#		type = authority,
	#		table = ca_places,
	#		relationship_table = ca_places_x_collections,
	#		restrict_to_types = [],
			
	#		group_mode = alphabetical,
			
	#		label_singular = _("place"),
	#		label_plural = _("places")
	#	},
	#	occurrence_facet = {
	#		type = authority,
	#		table = ca_occurrences,
	#		generate_facets_for_types = 1,
	#		relationship_table = ca_occurrences_x_collections,
	#		restrict_to_types = [],
			
	#		group_mode = alphabetical,
			
	#		indefinite_article = an,
	#		label_singular = _("occurrence"),
	#		label_plural = _("occurrences")
	#	},
		term_facet = {
			type = authority,
			table = ca_list_items,
			relationship_table = ca_collections_x_vocabulary_terms,
			restrict_to_types = [],
			
			group_mode = alphabetical,
			
			label_singular = _("term"),
			label_plural = _("terms")
		},
		type_facet = {
			type = fieldList,
			field = type_id,
			
			group_mode = alphabetical,
			
			label_singular = _("type"),
			label_plural = _("types")
		},
	#	status_facet = {
	#		type = fieldList,
	#		field = status,
			
	#		group_mode = alphabetical,
			
	#		label_singular = _("status"),
	#		label_plural = _("statuses")
	#	},
	#	access_facet = {
	#		type = fieldList,
	#		field = access,
			
	#		group_mode = alphabetical,
			
	#		indefinite_article = an,
	#		label_singular = _("access status"),
	#		label_plural = _("access statuses")
	#	}
	}
}
# --------------------------------------------------------------------
# Configuration for storage location browse
ca_storage_locations = {
	name = _("Storage locations"),
	facets = {
		type_facet = {
			type = authority,
			field = ca_storage_location_labels.name,
			
			group_mode = hierarchical,
			show_hierarchy = 1,
			
			label_singular = _("type"),
			label_plural = _("types")
		},
		status_facet = {
			type = fieldList,
			field = status,
			
			group_mode = alphabetical,
			
			label_singular = _("status"),
			label_plural = _("statuses")
		}
	}
}
# --------------------------------------------------------------------