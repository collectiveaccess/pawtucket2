# Set this to disable the "classroom" feature
disable_classroom = 1
do_content_caching = 1
#
# Set this if you want urls that refer to specified items to use the identifier 
# rather than CollectiveAccess internal ID. The former is more descriptive but will
# not work if you have duplicate identifiers in your catalogue!
#
use_identifiers_in_urls = 0

dont_enforce_access_settings = 0

disable_pdf_output = 1
disable_export_output = 1

#
# Front page set code
#
front_page_set_code = frontPage

#
# Allow PHP code in content-managed site pages
#
# By default only value tags in the form {{{tag-name}}} are allowed in Pawtucket site page templates. 
# If you need the flexibility and power afforded by direct embedding of PHP code in your templates
# set this option to a non-zero value. Note that enabling this option will allow execution of ANY
# code embedded in the template on EVERY page load. Depending upon your point of view this is either a
# feature or a security hole. It doesn't have to be a problem, but keep it in mind...
#
allow_php_in_site_page_templates = 0

# -------------------
# Registered user features
# -------------------
dont_allow_registration_and_login = 0
dont_approve_logins_on_registration = 0
email_notification_for_new_registrations = 1
dont_moderate_comments = 0
dont_email_notification_for_new_comments = 0


# -----------------------
# Global template values
# -----------------------
# Globals are text values that may be set in the Pawtucket web UI and substituted
# into any view template, including headers and footers. Values defined here 
# will be editable in the "Global Values Editor" (available to users with the can_edit_theme_global_values priv)
# and usable in templates under their name (Eg. {{{operating_hours}}} in the example below).
#
# Options controlling how the editor displays the value may be set for each global. Width and height control the size 
# of the element; usewysiwygeditor enables a "wysiwyg" rich text editor for formatted text.
#
global_template_values = {
	home_intro_text = {
		name = Home Page Text,
		description = Text between slideshow and galleries on home page,
		width = 600px,
		height = 100px,
		usewysiwygeditor = 1 
	},
	collections_intro_text = {
		name = Collection Introduction Text,
		description = Introduction on collections landing page,
		width = 600px,
		height = 100px,
		usewysiwygeditor = 1 
	},
	collections_inventory_text = {
		name = Collection Inventory Text,
		description = Description of inventory download on collections landing page,
		width = 600px,
		height = 100px,
		usewysiwygeditor = 1 
	},
	collections_inventory_xls = {
		name = Collection Inventory EXCEL link,
		description = Link to collection inverntory EXCEL file,
		width = 600px,
		height = 30px,
		usewysiwygeditor = 0 
	},
	collections_inventory_pdf = {
		name = Collection Inventory PDF link,
		description = Link to collection inverntory PDF file,
		width = 600px,
		height = 30px,
		usewysiwygeditor = 0 
	},
	search_note = {
		name = Search Note,
		description = Note displayed under search and browse filters,
		width = 600px,
		height = 100px,
		usewysiwygeditor = 1 
	},
	request_image_link = {
		name = Reproduction and collections use policies link on Ask a Curator / Request an Image form,
		description = Reproduction and collections use policies link on Ask a Curator / Request an Image form,
		width = 600px,
		height = 100px,
		usewysiwygeditor = 1 
	}	
}

#
# Configuration for Excel (xlsx) and PowerPoint (pptx) export formats
# PDF formats are configured using templates in app/printTemplates
# (See http://docs.collectiveaccess.org/wiki/PDF_Output)
#

export_formats = {
	ca_objects = {
		basic_excel = {
			name = Excel,
			type = xlsx,
			columns = {
				Image = {
					template = ^ca_object_representations.media.large_watermark
				},
				Object = {
					template = ^ca_objects.preferred_labels.name (^ca_objects.idno)
				},
				Description = {
					template = ^ca_objects.description
				},
				Date = {
					template = ^ca_objects.date.dates_value
				}
			}
		}
	},
	ca_collections = {
		basic_excel = {
			name = Excel,
			type = xlsx,
			columns = {
				Collection = {
					template = ^ca_collections.preferred_labels.name (^ca_collections.idno)
				},
				Date = {
					template = ^ca_collections.collection_date2.collection_date_inclusive
				},
				"Historical Note" = {
					template = ^ca_collections.historical_note
				},
				"Scope and Content" = {
					template = ^ca_collections.scope_content
				}
			}
		}
	}
}


#
# Display template used to format information text at bottom of media overlay. Template is evaluated relative to the item with which the media is
# associated. If left blank preferred label + identifier of the item associated with the media is displayed.
#
media_overlay_titlebar_template =

#
# Representation versions to provide download option for in media viewer. If omitted then no download control is displayed
# (Uncomment the directive below to enable downloads)
#
#ca_object_representation_download_versions = [original]

#
# Configuration for image comparison interface. Set first key to table name (for now only ca_objects are supported)
# and second level keys to option names with values. 
# 
compare_images = {
	ca_objects = {
		# template to use when displaying object name within compare interface
		title_template = ^ca_objects.preferred_labels.name
	}
}

# 
# Configuration for registration security method
# This can either be set to sum_equation (for basic arithmetic challenge question: 4+7=?) or captcha, which implements a Google reCaptcha
# If you select reCaptcha, you will have to register the application and provide two API keys to allow google to process the captcha
# You can do so at https://www.google.com/recaptcha
#

registration_security = sum_equation
google_recaptcha_sitekey = 
google_recaptcha_secretkey = 
