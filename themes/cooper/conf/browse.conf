cache_timeout = 86400
#cache_timeout = 0

# 
# 
#
browseTypes = {
	projects = {
		displayName = _(Projects),
		labelSingular = _("project"),
 		labelPlural = _("projects"),
		table = ca_objects,
		
		restrictToTypes = [student_project],
		dontExpandTypesHierarchically = true,
		availableFacets = [],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			images = {}
		},
		sortBy = {
			Title = ca_object_labels.name,
			Date = ca_occurrences.preferred_labels.name//academic_year,
			#Date = ca_occurrence_labels.academic_year,
			Course = ca_occurrences.idno//course
		},
		# --- default sort direction for the sortBy options
		sortDirection = {
			Title = asc,
			Date = asc,
			Course = asc
		},
		# --- sortControlType = dropdown or list
		sortControlType = list
	},
	location = {
		displayName = _(Projects),
		labelSingular = _("project"),
 		labelPlural = _("projects"),
		table = ca_objects,
		
		restrictToTypes = [student_project],
		dontExpandTypesHierarchically = true,
		availableFacets = [],
		
		baseCriteria = {
		    has_georef = 1
		},
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			map = {
				data = ca_objects.georeference,
				width = 95%,
				height = 600px,
				minZoomLevel = 1,
				maxZoomLevel = 18,
				noWrap = 1,
				display = {
					labelTemplate = <l>^ca_objects.preferred_labels.name</l>,
					contentTemplate = "<div class='mapImage'><l><unit relativeTo='ca_objects.children' sort='ca_objects.idno' limit='1'>^ca_object_representations.media.widepreview%limit=1</unit></l></div>"
					#contentTemplate = <unit relativeTo='ca_objects.children' length='1'>^ca_object_representations.media.widepreview</unit><p>^ca_objects.abstract</p>
				}
			}
		},
		sortBy = {
		#	location = ca_objects.georeference,
		#	Date = ca_occurrences.preferred_labels.name//academic_year,
		#	Course = ca_occurrences.idno//course
		},
		# --- default sort direction for the sortBy options
		sortDirection = {
		#	location = desc,
		#	Date = asc,
		#	Course = asc
		},
		# --- sortControlType = dropdown or list
		sortControlType = list
	},
	people = {
		displayName = _(People),
		labelSingular = _("person"),
 		labelPlural = _("people"),
		table = ca_entities,
		restrictToTypes = [],
		showLetterBarFrom = ca_entity_labels.surname,
		showLetterBarSorts = [ca_entity_labels.surname;ca_entity_labels.forename],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			list = {}
		},
		
		sortBy = {
			Name = ca_entity_labels.surname;ca_entity_labels.forename
		},
		# --- default sort direction for the sortBy options
		sortDirection = {
			Name = asc
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown
	},
	courses = {
		displayName = _(Courses),
		labelSingular = _("course"),
 		labelPlural = _("courses"),
		table = ca_occurrences,
		restrictToTypes = [course],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			list = {}
		},
		
		sortBy = {
			Identifier = ca_occurrences.idno
		},
		sortDirection = {
			Identifier = asc
		}
		# --- sortControlType = dropdown or list
		sortControlType = dropdown
	}
}

views = {
	images = {
		icon = glyphicon-th
	},
	list = {
		icon = glyphicon-list
	},
	timeline = {
		icon = glyphicon-time
	},
	map = {
		icon = glyphicon-globe
	}
}

# --- text for Browse menu item, default is "Browse" 
browse_menu_button_text = 

# --- default number of results per page/ajax load
defaultHitsPerBlock = 36

# --- set to list to show dropdown with links to each configured browse or a single Browse nav link when one browse is configured
browseMenuFormat =

# --- set if you don't want the browse menu to be preloaded with facets for the first browse type on open
dontPreloadBrowseMenu = 1

# --- refine_col_class -> boostrap col class to assign to refine col - defaults to: col-sm-8 col-md-8 col-lg-8
result_col_class =col-sm-9 col-md-9 col-lg-9

# --- refine_col_class -> boostrap col class to assign to refine col - defaults to: col-sm-4 col-md-3 col-md-offset-1 col-lg-3 col-lg-offset-1
refine_col_class = col-sm-3 col-md-3 col-lg-3



# Configuration for object browse
ca_objects = {
	name = _("Objects"),
	facets = {
	    has_georef = {
			type = has,
			
			table = ca_objects,
			element_code = ca_objects.georeference,
			label_yes = _("has georeference"),
			label_no = _("does not have georeference"),
			
			single_value = 1,
			
			label_singular = _("Georeference?"),
			label_plural = _("Georeferences?"),
			description = _(""),
			requires = xxx
		},
	
	
		academic_year_facet = {
			type = authority,
			table = ca_occurrences,
			relationship_table = ca_objects_x_occurrences,
			restrict_to_types = [academic_year],
			
			group_mode = alphabetical,
			order_by_label_fields = [name],
			requires = decade_facet,
			
			label_singular = _("Academic Year"),
			label_plural = _("Academic Years")		
		},
		decade_facet = {
			type = normalizedDates,
			normalization = decades,
			element_code = academic_year,
			relative_to = ca_occurrences,
			
			group_mode = none,
			
			label_singular = _("Decade"),
			label_plural = _("Decades")		
		},
#		year_facet = {
#			type = normalizedDates,
#			normalization = years,
#			element_code = academic_year,
#			relative_to = ca_occurrences,
#			
#			group_mode = none,
#			requires = decade_facet,
#			
#			label_singular = _("Year"),
#			label_plural = _("Year")		
#		},
		semester_facet = {
			type = attribute,
			element_code = semester,
			
			group_mode = alphabetical,
			
			label_singular = _("Semester"),
			label_plural = _("Semesters")
		},
		course_facet = {
			type = authority,
			table = ca_occurrences,
			relationship_table = ca_objects_x_occurrences,
			restrict_to_types = [course],
			
			group_mode = alphabetical,
			order_by_label_fields = [idno],
			
			label_singular = _("Course"),
			label_plural = _("Courses"),
		},
		faculty_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_entities,
			relationship_table = ca_objects_x_entities,
			restrict_to_types = [],
			restrict_to_relationship_types = [faculty],
			
			group_mode = alphabetical,
			
			order_by_label_fields = [surname, forename, middlename],
			
			show_description_when_first_facet = biography,
			
			indefinite_article = an,
			label_singular = _("Faculty"),
			label_plural = _("Faculty")
		},
		author_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_entities,
			relationship_table = ca_objects_x_entities,
			restrict_to_types = [],
			restrict_to_relationship_types = [author],
			
			group_mode = alphabetical,
			
			order_by_label_fields = [surname, forename, middlename],
			
			show_description_when_first_facet = biography,
			requires = xxx,
			
			indefinite_article = an,
			label_singular = _("Author"),
			label_plural = _("Author")
		},
		photographer_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_entities,
			relationship_table = ca_objects_x_entities,
			restrict_to_types = [],
			restrict_to_relationship_types = [photographer],
			
			group_mode = alphabetical,
			
			order_by_label_fields = [surname, forename, middlename],
			
			show_description_when_first_facet = biography,
			requires = xxx,
			
			indefinite_article = an,
			label_singular = _("Photographer"),
			label_plural = _("Photographer")
		},
		individual_analyzed_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_entities,
			relationship_table = ca_objects_x_entities,
			restrict_to_types = [],
			restrict_to_relationship_types = [individual_analyzed],
			
			group_mode = alphabetical,
			
			order_by_label_fields = [surname, forename, middlename],
			
			show_description_when_first_facet = biography,
			requires = xxx,
			
			indefinite_article = an,
			label_singular = _("Individual Analyzed"),
			label_plural = _("Individual Analyzed")
		},
		problem_facet = {
			type = authority,
			table = ca_list_items,
			relationship_table = ca_objects_x_vocabulary_terms,
			#restrict_to_types = [problem_types],
			restrict_to_lists = [problem_types],
			
			individual_group_display = 0,
			
			group_mode = alphabetical,
			order_by_label_fields = [name_singular],
			
			label_singular = _("Problem"),
			label_plural = _("Problems")
		},
		item_type_facet = {
			type = attribute,
			relative_to = ca_objects,
			element_code = item_type,
			
			group_mode = alphabetical,
			
			label_singular = _("Item type"),
			label_plural = _("Item types")
		},
		entity_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_entities,
			relationship_table = ca_objects_x_entities,
			restrict_to_types = [],
			restrict_to_relationship_types = [],
			
			group_mode = alphabetical,
			
			order_by_label_fields = [surname, forename, middlename],
			
			show_description_when_first_facet = biography,
			
			requires = xxx,
			
			indefinite_article = an,
			label_singular = _("Person"),
			label_plural = _("People")
		},
		architectural_elements_facet = {
			type = authority,
			table = ca_list_items,
			relationship_table = ca_objects_x_vocabulary_terms,
			restrict_to_lists = [architectural_elements],
			
			individual_group_display = 0,
			
			group_mode = alphabetical,
			order_by_label_fields = [name_singular],
			
			requires = "x",
			
			label_singular = _("Architectural Element"),
			label_plural = _("Architectural Elements")
		},
		program_types_facet = {
			type = authority,
			table = ca_list_items,
			relationship_table = ca_objects_x_vocabulary_terms,
			restrict_to_lists = [program_types],
			
			individual_group_display = 0,
			
			group_mode = alphabetical,
			order_by_label_fields = [name_singular],
			
			requires = "x",
			
			label_singular = _("Program Types"),
			label_plural = _("Program Types")
		},
		student_project_subjects_facet = {
			type = authority,
			table = ca_list_items,
			relationship_table = ca_objects_x_vocabulary_terms,
			restrict_to_lists = [student_project_subjects],
			
			individual_group_display = 0,
			
			group_mode = alphabetical,
			order_by_label_fields = [name_singular],
			
			requires = "x",
			
			label_singular = _("Subjects"),
			label_plural = _("Subjects")
		},
		lcsh_facet = {
			type = attribute,
			element_code = lcsh,
			
			group_mode = alphabetical,
			
			requires = "x",
			
			label_singular = _("LCSH subject"),
			label_plural = _("LCSH subjects")
		},
		aat_facet = {
			type = attribute,
			element_code = aat,
			
			group_mode = alphabetical,
			
			requires = "x",
			
			label_singular = _("AAT subject"),
			label_plural = _("AAT subjects")
		},
		program_type_facet = {
			type = authority,
			table = ca_list_items,
			relationship_table = ca_objects_x_vocabulary_terms,
			restrict_to_lists = [program_types],
			
			individual_group_display = 0,
			
			group_mode = alphabetical,
			order_by_label_fields = [name_singular],
			
			requires = "x",
			
			label_singular = _("Program"),
			label_plural = _("Programs")
		}
	}
}
# --------------------------------------------------------------------
# Configuration for entity browse
ca_entities = {
	name = _("Entities"),
	facets = {
	    role_facet = {
	        type = relationship_types,
	        table = ca_objects,
	        restrict_to_relationship_types = [photographer,author,faculty,individual_analyzed],
			relationship_table = ca_objects_x_entities,
			
			label_singular = _("Role"),
			label_plural = _("Roles")	
	    },	
		year_facet = {
			type = authority,
			relative_to = ca_objects,
			table = ca_occurrences,
			relationship_table = ca_objects_x_occurrences,
			restrict_to_types = [academic_year],
			
			group_mode = alphabetical,
			order_by_label_fields = [name],
			
			label_singular = _("Academic Year"),
			label_plural = _("Academic Years")		
		},
		course_facet = {
			type = authority,
			table = ca_occurrences,
			relationship_table = ca_objects_x_occurrences,
			restrict_to_types = [course],
			relative_to = ca_objects,
			group_mode = alphabetical,
			order_by_label_fields = [name],
			
			label_singular = _("Course"),
			label_plural = _("Courses"),
		},
		semester_facet = {
			type = attribute,
			relative_to = ca_objects,
			element_code = semester,
			
			group_mode = alphabetical,
			
			label_singular = _("Semester"),
			label_plural = _("Semesters")
		},
		problem_facet = {
			type = authority,
			relative_to = ca_objects,
			table = ca_list_items,
			relationship_table = ca_objects_x_vocabulary_terms,
			#restrict_to_types = [problem_types],
			restrict_to_lists = [problem_types],
			
			individual_group_display = 0,
			
			group_mode = alphabetical,
			order_by_label_fields = [name_singular],
			
			label_singular = _("Problem"),
			label_plural = _("Problems")
		},
		has_rel_type_faculty = {
			type = has,
			
			table = ca_objects,
			relationship_table = ca_objects_x_entities,
			restrict_to_types = [],
			restrict_to_relationship_types = [faculty],
			
			label_yes = _("was faculty"),
			label_no = _("was not faculty"),
			
			single_value = 1,
			
			label_singular = _("Faculty"),
			label_plural = _("Faculty"),
			description = _(""),
			requires = x
		},
		has_rel_type_author = {
			type = has,
			
			table = ca_objects,
			relationship_table = ca_objects_x_entities,
			restrict_to_types = [],
			restrict_to_relationship_types = [author],
			
			label_yes = _("was author"),
			label_no = _("was not author"),
			
			single_value = 1,
			
			label_singular = _("Author"),
			label_plural = _("Author"),
			description = _(""),
			requires = x
		},
		has_rel_type_photographer = {
			type = has,
			
			table = ca_objects,
			relationship_table = ca_objects_x_entities,
			restrict_to_types = [],
			restrict_to_relationship_types = [photographer],
			
			label_yes = _("was photographer"),
			label_no = _("was not photographer"),
			
			single_value = 1,
			
			label_singular = _("Photographer"),
			label_plural = _("Photographer"),
			description = _(""),
			requires = x
		},
		has_rel_type_analyzed = {
			type = has,
			
			table = ca_objects,
			relationship_table = ca_objects_x_entities,
			restrict_to_types = [],
			restrict_to_relationship_types = [individual_analyzed],
			
			label_yes = _("was individual analyzed"),
			label_no = _("was not individual analyzed"),
			
			single_value = 1,
			
			label_singular = _("Individual analyzed"),
			label_plural = _("Individual analyzed"),
			description = _(""),
			requires = x
		}
	}
}