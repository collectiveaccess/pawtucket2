cache_timeout = 0

use_stop_words = 1

# Highlight search terms in results?
do_highlighting = 1

#
# Defines searches to be executed on a "multisearch" – a search across several types of records at once
#
#
multisearchTypes = {
	collections_all = {
		displayName = _("Collections"),
		table = ca_collections,
		restrictToTypes = [],
		view = Search/ca_collections_search_subview_list_html.php,
		itemsPerPage = 24,
		itemsPerColumn = 1,
		# --- sortControlType = dropdown or list
		sortControlType = list,
		sortBy = {
			Relevance = _natural,
		#	Date = ca_collections.inclusive_dates,
		#	Number = ca_collections.id_number,
		#	Name = ca_collection_labels.name
		},
		sortDirection = {
			Relevance = asc,
			Date = asc,
			Number = asc,
			Title = asc
		}
	},
	accessions = {
		displayName = _("Accessions"),
		table = ca_object_lots,
		restrictToTypes = [],
		view = Search/ca_object_lots_search_subview_list_html.php,
		itemsPerPage = 24,
		itemsPerColumn = 1,
		# --- sortControlType = dropdown or list
		sortControlType = list,
		sortBy = {
			Relevance = _natural,
		#	Name = ca_object_lot_labels.name
		},
		sortDirection = {
			Relevance = asc,
			Name = asc
		}
	},
	items = {
		displayName = _("Digital Items"),
		table = ca_collections,
		restrictToTypes = [item],
		view = Search/ca_collections_search_subview_cascading_html.php,
		itemsPerPage = 24,
		itemsPerColumn = 1,
		# --- sortControlType = dropdown or list
		sortControlType = list,
		sortBy = {
			Relevance = _natural,
		#	Date = ca_collections.inclusive_dates,
		#	Number = ca_collections.id_number,
		#	Name = ca_collection_labels.name
		},
		sortDirection = {
			Relevance = asc,
			Date = asc,
			Number = asc,
			Title = asc
		},
		baseCriteria = {
			has_media_facet = yes,
		},
	}
}
advancedSearchTypes = {
	collections = {
		displayName = _("Collections"),
		labelSingular = _("Collection"),
 		labelPlural = _("Collections"),
		table = ca_collections,
		restrictToTypes = [],
		view = Search/ca_collections_advanced_search_objects_html.php, 
		itemsPerPage = 10,
		
		sortBy = {
			Name = ca_collection_labels.name,
			Date = ca_collections.inclusive_dates,
		}
	}
}
views = {
	images = {
		icon = glyphicon-th
	},
	list = {
		icon = glyphicon-list
	},
	timeline = {
		icon = glyphicon-time
	},
	map = {
		icon = glyphicon-globe
	}
}

#
# Other options
#

# default number of results per page/ajax load
defaultHitsPerBlock = 36

# add a wildcard "*" to the end of all searches? 
matchOnStem = 1



# Regular expression defining characters to be considered whitespace when indexing using 
# the SqlSearch2 search engine plugin
whitespace_tokenizer_regex = "[\\s\"\\—]+"

# Regular expression defining punctuation characters to be stripped prior to indexing using
# the SqlSearch2 search engine plugin
punctuation_tokenizer_regex = "[\\.,;:\\(\\)\{\\}\[\\]\\|\\\\\\+_\\!\\&«»\\']+"

# List of regular expressions that if matched cause search input to be treated "as-is" - searched without processing
# This is useful for preventing tokenization of accession numbers and other values that rely upon punctuation being
# kept intact.
asis_regexes = [
	"^[\\d]+[\\.\\-][A-Za-z0-9\\.\\-]+$",
	"[^\\.]+\\.[A-Za-z0-9]{3}$"
]

# List of regular expressions that if matched cause search input to be treated as an idno. This is useful
# for forcing text searches on apparent idno's to limit themselves to the literal idno field. It also allows
# ElasticSearch to support idno text searches with idno's that contain dashes. Without binding to a specific 
# field Elastic will treat the dashes as special characters and fail to match dash literals.
#
# You may define as many regular expression as needed here to match idno patterns. Each regular expression will be
# evaluated in term until a match is found. First level keys are table names, with an associated list of regexes. 
#
idno_regexes = {
	ca_objects = [
		"[\\d]{4}\\.[\d]{1,5}\\.[\\d]{0,5}"
	]
}
