cache_timeout = 0

#
# 
#
browseTypes = {
	collections = {
		displayName = _(Collections),
		labelSingular = _("collection"),
 		labelPlural = _("collections"),
		table = ca_collections,
		restrictToTypes = [collection],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = { 
			#images = {}, 
			list = {}
		},
		
		sortBy = {
			Date = ca_collections.inclusive_dates,
			Identifier = ca_collections.idno,
			Name = ca_collection_labels.name
		},
		sortDirection = {
			Identifier = asc,
			Title = asc,
			Date = asc
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown
	},
	collections_all = {
		displayName = _("Collections, Series, Sub-series, Folders, Groups"),
		labelSingular = _("all collection records"),
 		labelPlural = _("all collection records"),
		table = ca_collections,
		restrictToTypes = [],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = { 
			#images = {}, 
			list = {}
		},
		
		sortBy = {
			Relevance = _natural,
			Date = ca_collections.inclusive_dates,
			Identifier = ca_collections.idno,
			Name = ca_collection_labels.name
		},
		# --- default sort direction for the sortBy options
		sortDirection = {
			Identifier = asc,
			Title = asc,
			Date = asc,
			Relevance = asc
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown
	},
	objects = {
		displayName = _(Digital Items),
		labelSingular = _("digital item"),
 		labelPlural = _("digital items"),
		table = ca_objects,
		
		restrictToTypes = [],
		#dontExpandTypesHierarchically = true,
		availableFacets = [],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			images = {}
		},
		sortBy = {
			Date = ca_objects.inclusive_dates,
			Title = ca_object_labels.name,
			Identifier = ca_objects.idno
		},
		# --- default sort direction for the sortBy options
		sortDirection = {
			Identifier = asc,
			Title = asc,
			Date = asc
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown,
#		options = {
#			selectMediaUsingRelationshipTypes = [relationshipType],
#			selectMediaUsingTypes = [objectType],
#			extendedInformationTemplate = ^ca_objects.description
#		}
	},
	accessions = {
		displayName = _("Accessions"),
		labelSingular = _("accession"),
 		labelPlural = _("accessions"),
		table = ca_object_lots,
		restrictToTypes = [],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = { 
			#images = {}, 
			list = {}
		},
		
		sortBy = {
			Identifier = ca_object_lots.idno_stub,
			Date = ca_object_lots.inclusive_dates,
			Name = ca_object_lot_labels.name,
			Relevance = _natural
		},
		# --- default sort direction for the sortBy options
		sortDirection = {
			Relevance = asc,
			Identifier = asc,
			Title = asc,
			Date = asc
			
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown
	}
}

views = {
	images = {
		icon = glyphicon-th
	},
	list = {
		icon = glyphicon-list
	},
	timeline = {
		icon = glyphicon-time
	},
	map = {
		icon = glyphicon-globe
	}
}

# --- text for Browse menu item, default is "Browse" 
browse_menu_button_text = 

# --- default number of results per page/ajax load
defaultHitsPerBlock = 36

# --- set to list to show dropdown with links to each configured browse or a single Browse nav link when one browse is configured
browseMenuFormat = list

# --- set if you don't want the browse menu to be preloaded with facets for the first browse type on open
dontPreloadBrowseMenu = 1

# --- refine_col_class -> boostrap col class to assign to refine col - defaults to: col-sm-8 col-md-8 col-lg-8
result_col_class =

# --- refine_col_class -> boostrap col class to assign to refine col - defaults to: col-sm-4 col-md-3 col-md-offset-1 col-lg-3 col-lg-offset-1
refine_col_class =


# --------------------------------------------------------------------
# Configuration for collection browse
ca_collections = {
	facets = {
		type_facet = {
			type = fieldList,
			field = type_id,
			
			group_mode = none,
			order_by_label_fields = [name_plural],
			
			label_singular = _("type"),
			label_plural = _("types")
		},
		classification_facet = {
			type = attribute,
			element_code = col_classification,
			group_mode = hierarchical,
			
			# Set to non-zero value to display hierarchy on items in this facet
			show_hierarchy = 1,
			
			# Character(s) to place between elements of the hierarchy
			hierarchical_delimiter = &nbsp;â¬…&nbsp;,
			
			# Number of items to trim off the top
			remove_first_items = 0,
			
			# Maximum length of hierarchy to display
			hierarchy_limit = 3,
			
			# can be ASC or DESC
			hierarchy_order  = DESC,
			label_singular = _("classification"),
			label_plural = _("classifications")
		},
		decade_facet = {
			type = normalizedDates,
			element_code = inclusive_dates,
			# 'normalization' can be: days, months, years, decades, centuries
			normalization = decades,
			
			group_mode = none,
			
			label_singular = _("decade"),
			label_plural = _("decades")
		},
		year_facet = {
			type = normalizedDates,
			element_code = inclusive_dates,
			# 'normalization' can be: days, months, years, decades, centuries
			normalization = years,
			requires = decade_facet,
			group_mode = none,
			#single_value = 1950,
			requires = decade_facet,
			label_singular = _("year"),
			label_plural = _("years")
		},
		material_type_facet = {
			type = attribute,
			element_code = material_type,
			
			group_mode = none,
			label_singular = _("material type"),
			label_plural = _("material types")
		},
		entity_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_entities,
			relationship_table = ca_entities_x_collections,
			restrict_to_types = [],
			restrict_to_relationship_types = [],
			
			group_mode = alphabetical,
			
			order_by_label_fields = [name_sort],
			
			indefinite_article = an,
			label_singular = _("entity"),
			label_plural = _("entities")
		},
		place_facet = {
			type = authority,
			table = ca_places,
			relationship_table = ca_places_x_collections,
			restrict_to_types = [],
			restrict_to_relationship_types = [],
			
			group_mode = alphabetical,
			
			label_singular = _("place"),
			label_plural = _("places")
		}
	}
}
# ---------------------------------------------
# Configuration for object browse
ca_objects = {
	name = _("Objects"),
	facets = {
		type_facet = {
			type = fieldList,
			field = type_id,
			
			group_mode = none,

			label_singular = _("object type"),
			label_plural = _("object types"),
			description = _("Find objects according to the Types defined in your collection profile."),
		},	
		decade_facet = {
			type = normalizedDates,
			element_code = inclusive_dates,
			normalization = decades,
			
			group_mode = none,
			
			label_singular = _("decade"),
			label_plural = _("decades"),
			description = _("Find objects according to associated dates.  You can normalize these dates by year&#44; decade or century."),			
		},
		year_facet = {
			type = normalizedDates,
			element_code = inclusive_dates,
			normalization = years,
			requires - decade_facet,
			
			group_mode = none,
			
			label_singular = _("year"),
			label_plural = _("years"),
			description = _("Find objects according to associated dates.  You can normalize these dates by year&#44; decade or century."),			
		},
		collection_facet = {
			type = authority,
			table = ca_collections,
			relationship_table = ca_objects_x_collections,
			restrict_to_types = [collection],
			
			group_mode = none,

			label_singular = _("collection"),
			label_plural = _("collections"),
		},
		series_facet = {
			type = authority,
			table = ca_collections,
			relationship_table = ca_objects_x_collections,
			restrict_to_types = [series],
			requires = collection_facet,
			
			group_mode = none,

			label_singular = _("series"),
			label_plural = _("series"),
		},
		subseries_facet = {
			type = authority,
			table = ca_collections,
			relationship_table = ca_objects_x_collections,
			restrict_to_types = [subseries],
			requires = series_facet,
			
			group_mode = none,

			label_singular = _("sub series"),
			label_plural = _("sub series"),
		},
		box_facet = {
			type = authority,
			table = ca_collections,
			relationship_table = ca_objects_x_collections,
			restrict_to_types = [box_drawer],
			requires = subseries_facet,
			
			group_mode = none,

			label_singular = _("box/drawer"),
			label_plural = _("box/drawer"),
		},
		folder_facet = {
			type = authority,
			table = ca_collections,
			relationship_table = ca_objects_x_collections,
			restrict_to_types = [folder],
			requires = subseries_facet,
			
			group_mode = none,

			label_singular = _("folder"),
			label_plural = _("folder"),
		},
		set_facet = {
			type = authority,
			table = ca_collections,
			relationship_table = ca_objects_x_collections,
			restrict_to_types = [set],
			requires = subseries_facet,
			
			group_mode = none,

			label_singular = _("Set"),
			label_plural = _("Set"),
		},
		entity_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_entities,
			relationship_table = ca_objects_x_entities,
			restrict_to_types = [],
			
			individual_group_display = 1,
			
			groupings = {
				label = _("Name"), 
				relationship_types = _("Role"),
				type = _("Type")
			},
			group_mode = alphabetical,
			natural_sort = 0,
			order_by_label_fields = [surname, forename, middlename],
			
			indefinite_article = an,
			label_singular = _("person"),
			label_plural = _("people"),
			description = _("Find objects according to the people associated with your records.  You can browse by name&#44; role&#44; or entity type according to your configuration."),
		},
		has_media_facet = {
			type = has,
			
			table = ca_object_representations,
			relationship_table = ca_objects_x_object_representations,
			restrict_to_types = [],
			restrict_to_relationship_types = [],
			
			label_yes = _("Has media"),
			label_no = _("Does not have media"),
			
			single_value = 1,
			
			label_singular = _("has media"),
			label_plural = _("has media"),
			description = _("Find objects that have associated media."),
		},
		place_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_places,
			relationship_table = ca_objects_x_places,
			restrict_to_types = [],
			
			individual_group_display = 1,
			
			group_mode = hierarchical,
			natural_sort = 0,
			order_by_label_fields = [name],
			
			# Set to non-zero value to display hierarchy on items in this facet
			show_hierarchy = 1,
			
			# Character(s) to place between elements of the hierarchy
			hierarchical_delimiter = &nbsp;â¬…&nbsp;,
			
			# Number of items to trim off the top (leave blank or set to 0 to trim nothing)
			remove_first_items = 0,
			
			# Maximum length of hierarchy to display (leave blank to return hierarchy unabridged)
			hierarchy_limit = 3,
			
			# can be ASC or DESC (default is DESC)
			hierarchy_order  = DESC,
			
			indefinite_article = a,
			label_singular = _("place"),
			label_plural = _("places"),
			description = _("Find objects according to the place relationships in your collection.  You can choose to view the available places as a list or hierarchy of place names.")
		}
	}
}
# --------------------------------------------------------------------
# Configuration for collection browse
ca_object_lots = {
	facets = {
		decade_facet = {
			type = normalizedDates,
			element_code = inclusive_dates,
			# 'normalization' can be: days, months, years, decades, centuries
			normalization = decades,
			
			group_mode = none,
			
			label_singular = _("decade"),
			label_plural = _("decades")
		},
		year_facet = {
			type = normalizedDates,
			element_code = inclusive_dates,
			# 'normalization' can be: days, months, years, decades, centuries
			normalization = years,
			requires = decade_facet,
			group_mode = none,
			#single_value = 1950,
			requires = decade_facet,
			label_singular = _("year"),
			label_plural = _("years")
		},
		material_type_facet = {
			type = attribute,
			element_code = material_type,
			
			group_mode = none,
			label_singular = _("material type"),
			label_plural = _("material types")
		},
		entity_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_entities,
			relationship_table = ca_entities_x_object_lots,
			restrict_to_types = [],
			restrict_to_relationship_types = [],
			
			group_mode = alphabetical,
			
			order_by_label_fields = [name_sort],
			
			indefinite_article = an,
			label_singular = _("entity"),
			label_plural = _("entities")
		}
	}
}