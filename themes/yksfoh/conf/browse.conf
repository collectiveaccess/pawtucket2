cache_timeout = 0

#
# 
#
browseTypes = {
	artifacts = {
		displayName = _(Artifacts),
		labelSingular = _("Artifact"),
 		labelPlural = _("Artifacts"),
		table = ca_objects,
		
		restrictToTypes = [],
		#dontExpandTypesHierarchically = true,
		availableFacets = [],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			images = {
				result_caption = "<small><l>^ca_objects.idno</l></small><br/><l>^ca_objects.preferred_labels<ifcount code='ca_entities' restrictToRelationshipTypes='in_the_collection_of' min='1'><br/><unit relativeTo='ca_entities' restrictToRelationshipTypes='in_the_collection_of' delimiter=', '>^ca_entities.preferred_labels</unit></ifcount></l>",
			}
		},
		sortBy = {
			_("Accession Number") = ca_objects.idno,
			_("Object Name") = ca_object_labels.name_sort
		},
		# --- default sort direction for the sortBy options
		sortDirection = {
			_("Accession Number") = asc,
			_("Object Name") = asc
		},
		# --- sortControlType = dropdown or list
		sortControlType = list,
#		options = {
#			selectMediaUsingRelationshipTypes = [relationshipType],
#			selectMediaUsingTypes = [objectType],
#			extendedInformationTemplate = ^ca_objects.description
#		}
	},
	institutions = {
		displayName = _(Institutions),
		labelSingular = _("institution"),
 		labelPlural = _("institutions"),
		table = ca_entities,
		restrictToTypes = [org],
		showLetterBarFrom = ca_entity_labels.surname,
		showLetterBarSorts = [ca_entity_labels.surname;ca_entity_labels.forename],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			list = {
				result_caption = "<l>^ca_entities.preferred_labels</l>",
			},
			map = {
				data = ca_entities.georeference,
				width = 100%,
				height = 600px,
				minZoomLevel = 2,
				maxZoomLevel = 18,
				display = {
					labelTemplate = <l>^ca_entities.preferred_labels</l>,
					contentTemplate = 
				}
			}
		},
		
		sortBy = {
			Name = ca_entity_labels.surname
		},
		# --- sortControlType = dropdown or list
		sortControlType = list,
		#baseCriteria = {
		#	has_artifacts_in_collection_facet = [yes]	
		#}
	}
}

views = {
	images = {
		icon = glyphicon-th
	},
	list = {
		icon = glyphicon-list
	},
	timeline = {
		icon = glyphicon-time
	},
	map = {
		icon = glyphicon-globe
	}
}

# --- text for Browse menu item, default is "Browse" 
browse_menu_button_text = 

# --- default number of results per page/ajax load
defaultHitsPerBlock = 36

# --- set to list to show dropdown with links to each configured browse or a single Browse nav link when one browse is configured
browseMenuFormat = list

# --- set if you don't want the browse menu to be preloaded with facets for the first browse type on open
dontPreloadBrowseMenu = 1

# --- refine_col_class -> boostrap col class to assign to refine col - defaults to: col-sm-8 col-md-8 col-lg-8
result_col_class = col-sm-8 col-md-9

# --- refine_col_class -> boostrap col class to assign to refine col - defaults to: col-sm-4 col-md-3 col-md-offset-1 col-lg-3 col-lg-offset-1
refine_col_class = col-sm-4 col-md-3

#Object name,  Institution, Decade,  Culture/Religion
ca_objects = {
	name = _("Objects"),
	facets = {
		title_facet = {
			type = label,
			restrict_to_types = [],
			preferred_labels_only = 1,
			
			group_mode = alphabetical,
			
			label_singular = _("object name"),
			label_plural = _("object names")
		},
		institution_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_entities,
			relationship_table = ca_objects_x_entities,
			restrict_to_types = [org],
			#restrict_to_relationship_types = [in_the_collection_of],
			
			individual_group_display = 1,
			
			natural_sort = 0,
			order_by_label_fields = [surname, forename, middlename],
			
			indefinite_article = an,
			label_singular = _("Institution"),
			label_plural = _("Institutions"),
		},
		year_facet = {
			type = normalizedDates,
			element_code = ca_objects.date.dates_value,
			filter_by = ca_objects.date.dc_dates_types,
			filter_values = [Created],
			
			# 'normalization' can be: days, months, years, decades, centuries
			normalization = years,
			
			group_mode = none,
			#single_value = 1950,
			requires = decade_facet,
			
			label_singular = _("Date"),
			label_plural = _("Dates")
		},
		decade_facet = {
			type = normalizedDates,
			element_code = ca_objects.date.dates_value,
			filter_by = ca_objects.date.dc_dates_types,
			filter_values = [Created],
			# 'normalization' can be: days, months, years, decades, centuries
			normalization = decades,
			
			group_mode = none,
			
			label_singular = _("Date"),
			label_plural = _("Dates")
		},
		cultural_region_facet = {
			type = attribute,
			element_code = other_culture,
			
			group_mode = alphabetical,
			
			label_singular = _("Culture"),
			label_plural = _("Cultures"),
		},
		has_media_facet = {
			type = has,
			
			table = ca_object_representations,
			relationship_table = ca_objects_x_object_representations,
			restrict_to_types = [],
			restrict_to_relationship_types = [],
			
			#single_value = 1,
			group_mode = none,
			
			label_yes = _("Has media"),
			label_no = _("Has no media"),
			
			label_singular = _("has media"),
			label_plural = _("has media")
		},	
		entity_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_entities,
			relationship_table = ca_objects_x_entities,
			restrict_to_types = [],
			
			individual_group_display = 1,
			
			natural_sort = 0,
			order_by_label_fields = [surname, forename, middlename],
			
			indefinite_article = an,
			label_singular = _("person"),
			label_plural = _("people"),
			requires = x
		}


	}
}

ca_entities = {
	name = _("Entities"),
	facets = {
		cultural_region_facet = {
			type = attribute,
			element_code = other_culture,
			relative_to = ca_objects,
			group_mode = alphabetical,
			
			label_singular = _("Culture"),
			label_plural = _("Cultures"),
		},
		place_facet = {
			type = authority,
			table = ca_places,
			relationship_table = ca_entities_x_places,
			restrict_to_types = [],
			
			group_mode = alphabetical,
			
			label_singular = _("place"),
			label_plural = _("places")
		},
		has_artifacts_in_collection_facet = {
			type = has,
			
			table = ca_objects,
			relationship_table = ca_objects_x_entities,
			restrict_to_types = [],
			restrict_to_relationship_types = [in_the_collection_of],
			
			#single_value = 1,
			group_mode = none,
			
			label_yes = _("Has artifacts in collection"),
			label_no = _("Has artifacts in collection"),
			
			label_singular = _("has artifact in collection"),
			label_plural = _("has artifacts in collection"),
			requires = x
		},

	}
}
