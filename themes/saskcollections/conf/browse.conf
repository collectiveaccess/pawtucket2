cache_timeout = 0

#
# 
#
browseTypes = {

	objects = {
		displayName = _(Objects),
		labelSingular = _("object"),
 		labelPlural = _("objects"),
		table = ca_objects,
		
		restrictToTypes = [],
		#dontExpandTypesHierarchically = true,
		availableFacets = [],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			images = {
				result_caption = "
					<small><l>^ca_objects.idno</l></small>
					<br/>
					<l>^ca_objects.preferred_labels</l>
					<br/>
					<ifdef code='ca_objects.source_id'>
						From: <l>^ca_objects.source_id</l>
					</ifdef>
				",
			},
			list = {
				result_caption = "
					<small><l>^ca_objects.idno</l></small>
					<br/>
					<l>^ca_objects.preferred_labels</l>
					<br/>
					<ifdef code='ca_objects.source_id'>
						From: <l>^ca_objects.source_id</l>
					</ifdef>
				",
			}
		},
		sortBy = {
			_("Identifier") = ca_objects.idno,
			_("Title") = ca_object_labels.name
		},
		# --- default sort direction for the sortBy options
		sortDirection = {
			_("Identifier") = asc,
			_("Title") = desc
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown,
#		options = {
#			selectMediaUsingRelationshipTypes = [relationshipType],
#			selectMediaUsingTypes = [objectType],
#			extendedInformationTemplate = ^ca_objects.description
#		}
	}

}

views = {
	images = {
		icon = glyphicon-th
	},
	list = {
		icon = glyphicon-list
	},
	# timeline = {
	# 	icon = glyphicon-time
	# },
	# map = {
	# 	icon = glyphicon-globe
	# }
}

# --- text for Browse menu item, default is "Browse" 
browse_menu_button_text = 

# --- default number of results per page/ajax load
defaultHitsPerBlock = 36

# --- set to list to show dropdown with links to each configured browse or a single Browse nav link when one browse is configured
browseMenuFormat = list

# --- set if you don't want the browse menu to be preloaded with facets for the first browse type on open
dontPreloadBrowseMenu = 1

# --- refine_col_class -> boostrap col class to assign to refine col - defaults to: col-sm-8 col-md-8 col-lg-8
result_col_class = col-sm-8 col-md-9

# --- refine_col_class -> boostrap col class to assign to refine col - defaults to: col-sm-4 col-md-3 col-md-offset-1 col-lg-3 col-lg-offset-1
refine_col_class = col-sm-4 col-md-3

ca_objects = {
	name = _("Objects"),
	facets = {
		source_facet = {
			type = fieldList,
			field = source_id,
			
			group_mode = none,

			label_singular = _("institutions"),
			label_plural = _("institutions"),
			description = _("Find objects by contributing institution."),
		},
		type_facet = {
			type = fieldList,
			field = type_id,
			
			group_mode = none,

			label_singular = _("object types"),
			label_plural = _("object types"),
			description = _("Find objects according to the Types defined in your collection profile."),
		},
		has_media_facet = {
			type = has,
			
			table = ca_object_representations,
			relationship_table = ca_objects_x_object_representations,
			restrict_to_types = [],
			restrict_to_relationship_types = [],
			
			label_yes = _("Has media"),
			label_no = _("Does not have media"),
			
			single_value = 1,
			
			label_singular = _("has media"),
			label_plural = _("has media"),
			description = _("Find objects that have associated media."),
		},
		decade_facet = {
			type = normalizedDates,
			element_code = date,
			normalization = decades,
			minimum_date = 1600,
			
			group_mode = none,
			
			label_singular = _("dates"),
			label_plural = _("dates"),
			description = _("Find objects according to associated dates.  You can normalize these dates by year&#44; decade or century."),			
		},
		year_facet = {
			type = normalizedDates,
			element_code = date,
			normalization = years,
			minimum_date = 1600,
			
			group_mode = none,
			requires = decade_facet,
			
			label_singular = _("dates"),
			label_plural = _("dates"),
			description = _("Find objects according to associated dates.  You can normalize these dates by year&#44; decade or century."),			
		},
		category_facet = {
			type = attribute,
			element_code = ns_category_as_text,
			
			group_mode = alphabetical,
			
			label_singular = _("category"),
			label_plural = _("categories"),				
		},			
		entity_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_entities,
			relationship_table = ca_objects_x_entities,
			restrict_to_types = [ind,org],
			restrict_to_relationship_types = [artist,manufacturer],
			
			individual_group_display = 1,
			
			groupings = {
				label = _("Name"), 
				relationship_types = _("Role"),
				type = _("Type")
			},
			group_mode = alphabetical,
			order_by_label_fields = [surname, forename, middlename],
			
			indefinite_article = an,
			label_singular = _("Artist/Maker"),
			label_plural = _("Artists/Makers"),
			description = _("Find objects according to the people associated with your records.  You can browse by name&#44; role&#44; or entity type according to your configuration."),
		},
	}
}

ca_entities = {
	name = _("Entities"),
	facets = {}
}