#
# Library-style object checkout
#

checkout_types = {
	#book = {
	#	default_checkout_period = +7 days,
	#	allow_override_of_due_dates = 1
	#},
	
	copy = {
		default_checkout_period = +365 days,
		allow_override_of_due_dates = 1,
		dont_use_due_dates = 1,
		show_storage_location_template = ^ca_storage_locations.hierarchy.preferred_labels.name%delimiter=_âžœ_,
		set_values = {
			purchase_status = {
				# key is event, value is values to set for event
				# possible events are checkin, checkout and reserve
				checkin = { purchase_status = Ordered },
				checkout = { purchase_status = Checked_Out }
			}
		}
	}
}

dashboard = {
	panels = {
		checkouts_by_format = {
			name = _(Check outs by format),
			
			# event can be checkin, checkout or reserve
			event = checkout,
			group_by = {ca_objects.library_formats, ca_objects.parent.library_formats}
		},
		checkins_by_format = {
			name = _(Check ins by format),
			
			# event can be checkin, checkout or reserve
			event = checkin,
			group_by = {ca_objects.library_formats, ca_objects.parent.library_formats}
		},
		reservations_by_format = {
			name = _(Reservations by format),
			
			# event can be checkin, checkout or reserve
			event = reserve,
			group_by = {ca_objects.library_formats, ca_objects.parent.library_formats}
		}
	}
}

#
# Email notifications
#
notification_sender_name = Library Services
notification_sender_email = libraryservers@yourdomain.org

# list addresses to cc on all notices
administrative_email_addresses = []


# Send messages when items are coming due? 
send_coming_due_notices = 1

# Interval before due date in which to send messages (Ex. +10 days)
coming_due_interval = +7 days

# Display template for each item coming due
coming_due_item_display_template = ^ca_objects.preferred_labels (^ca_objects.idno); Borrowed on ^ca_object_checkouts.checkout_date%timeOmit=1 ; due on ^ca_object_checkouts.due_date%timeOmit=1

# Interval between "coming due" messages (Ex. +3 days)
coming_due_notification_interval = +3 days

# Send messages when items are overdue?
send_overdue_notices = 1

# Display template for each item due
overdue_item_display_template = ^ca_objects.preferred_labels (^ca_objects.idno); Borrowed on ^ca_object_checkouts.checkout_date%timeOmit=1 ; due on ^ca_object_checkouts.due_date%timeOmit=1

# Interval between "overdue" messages (Ex. +3 days)
overdue_notification_interval = +3 days

# Send messages to patrons when reserved items become available?
send_reservation_available_notices = 1

# Display template for each reserved item
reservation_available_item_display_template = ^ca_objects.preferred_labels (^ca_objects.idno); reserved on ^ca_object_checkouts.created_on%timeOmit=1

# Interval between "reserved item available" messages (Ex. +3 days)
reservation_available_notification_interval = +3 days

# Restrict items available for checkout by circulation status. This applies to all checkout_types!
#r estrict_to_circulation_statuses = [available, in_library]
restrict_to_circulation_statuses = []

# 
require_confirmation_of_returns = 1