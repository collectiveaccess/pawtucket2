cache_timeout = 0

#
# 
#
browseTypes = {
	objects = {
		displayName = _(Objects),
		labelSingular = _("object"),
 		labelPlural = _("objects"),
		table = ca_objects,
		
		restrictToTypes = [],
		#dontExpandTypesHierarchically = true,
		availableFacets = [],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			images = {},
			list = {},
			map = {
				data = ca_objects.georeference,
				display = {
					title_template = <l>^ca_objects.preferred_labels.name</l> (^ca_objects.idno),
					description_template = <p>^ca_objects.description</p>,
					icon = <div style='float:left; margin:0px 10px 10px 0px;'>^ca_object_representations.media.icon</div>	
				}
			},
			timeline = {
				data = ca_objects.creation_date,
				display = {
					title_template = <l>^ca_objects.preferred_labels.name</l> (^ca_objects.idno),
					description_template = <p>^ca_objects.description</p>,
					credit_template = ^ca_objects.rightsStatement.rightsStatement_text,
					caption_template = <em>^ca_objects.caption</em>,
					image = ^ca_object_representations.media.small,
					icon = ^ca_object_representations.media.icon
				}
			}
		},
		sortBy = {
			Identifier = ca_objects.idno,
			Title = ca_object_labels.name
		},
		# --- default sort direction for the sortBy options
		sortDirection = {
			Identifier = asc,
			Title = desc
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown
	},
}
ca_objects = {
	name = _("Objects"),
	facets = {
		type_facet = {
			type = fieldList,
			field = type_id,
			
			group_mode = none,

			label_singular = _("object type"),
			label_plural = _("object types"),
			description = _("Find objects according to the Types defined in your collection profile."),
		},
		source_facet = {
			type = fieldList,
			field = source_id,
			
			group_mode = none,

			label_singular = _("institution"),
			label_plural = _("institutions"),
			description = _("Find objects by collection."),
		},
		decade_facet = {
			type = normalizedDates,
			element_code = date_value,
			normalization = decades,
			minimum_date = 1600,
			
			group_mode = none,
			
			label_singular = _("date"),
			label_plural = _("dates"),
			description = _("Find objects according to associated dates.  You can normalize these dates by year&#44; decade or century."),			
		},	
#		institution_facet = {
#			# 'type' can equal authority, attribute, fieldList, normalizedDates
#			type = authority,		
#			table = ca_entities,
#			relationship_table = ca_objects_x_entities,
#			restrict_to_types = [member],
#			
#			individual_group_display = 1,
#			
#			groupings = {
#				label = _("Name"), 
#				relationship_types = _("Role"),
#				type = _("Type")
#			},
#			group_mode = alphabetical,
#			order_by_label_fields = [surname, forename, middlename],
#			
#			indefinite_article = an,
#			label_singular = _("Institution"),
#			label_plural = _("Institutions"),
#			description = _("Find objects according to the people associated with your records.  You can browse by name&#44; role&#44; or entity type according to your configuration."),
#		},										
		entity_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_entities,
			relationship_table = ca_objects_x_entities,
			restrict_to_types = [ind,org],
			
			individual_group_display = 1,
			
			groupings = {
				label = _("Name"), 
				relationship_types = _("Role"),
				type = _("Type")
			},
			group_mode = alphabetical,
			order_by_label_fields = [surname, forename, middlename],
			
			indefinite_article = an,
			label_singular = _("person"),
			label_plural = _("people"),
			description = _("Find objects according to the people associated with your records.  You can browse by name&#44; role&#44; or entity type according to your configuration."),
		},
#		place_facet = {
#			# 'type' can equal authority, attribute, fieldList, normalizedDates
#			type = authority,		
#			table = ca_places,
#			relationship_table = ca_objects_x_places,
#			restrict_to_types = [],
			
#			individual_group_display = 1,
			
#			group_mode = hierarchical,
#			order_by_label_fields = [name],
			
			# Set to non-zero value to display hierarchy on items in this facet
#			show_hierarchy = 1,
			
			# Character(s) to place between elements of the hierarchy
#			hierarchical_delimiter = &nbsp;â¬…&nbsp;,
			
			# Number of items to trim off the top (leave blank or set to 0 to trim nothing)
#			remove_first_items = 0,
			
			# Maximum length of hierarchy to display (leave blank to return hierarchy unabridged)
#			hierarchy_limit = 3,
			
			# can be ASC or DESC (default is DESC)
#			hierarchy_order  = DESC,
			
#			indefinite_article = a,
#			label_singular = _("place"),
#			label_plural = _("places"),
#			description = _("Find objects according to the place relationships in your collection.  You can choose to view the available places as a list or heirarchy of place names.")
#		},
		getty_art_facet = {
			type = attribute,
			element_code = aat,
			
			group_mode = none,
			
			label_singular = _("Object Type"),
			label_plural = _("Object Types"),				
		},
		getty_ulan_facet = {
			type = attribute,
			element_code = ulan,
			
			group_mode = none,
			
			label_singular = _("Artist Name"),
			label_plural = _("Artist Names"),				
		},
		getty_tgn_facet = {
			type = attribute,
			element_code = tgn,
			
			group_mode = none,
			
			label_singular = _("Place"),
			label_plural = _("Places"),				
		},
		lcsh_facet = {
			type = attribute,
			element_code = lcsh_terms,
			
			group_mode = none,
			
			label_singular = _("Subject"),
			label_plural = _("Subjects"),				
		},	
		lcsh_name_facet = {
			type = attribute,
			element_code = lc_names,
			
			group_mode = none,
			
			label_singular = _("Names and Organizations"),
			label_plural = _("Names and Organizations"),				
		},	
		lcsh_tgm_facet = {
			type = attribute,
			element_code = tgm,
			
			group_mode = none,
			
			label_singular = _("Format"),
			label_plural = _("Format"),				
		},									
		collection_facet = {
			type = authority,
			table = ca_collections,
			relationship_table = ca_objects_x_collections,
			restrict_to_types = [],
			
			group_mode = none,

			label_singular = _("collection"),
			label_plural = _("collections"),
			description = _("Find objects according to the Collections they belong to."),
		},
		has_media_facet = {
			type = has,
			
			table = ca_object_representations,
			relationship_table = ca_objects_x_object_representations,
			restrict_to_types = [],
			restrict_to_relationship_types = [],
			
			label_yes = _("Has media"),
			label_no = _("Does not have media"),
			
			single_value = 1,
			
			label_singular = _("has media"),
			label_plural = _("has media"),
			description = _("Find objects that have associated media."),
		},
	}
}
views = {
	images = {
		icon = glyphicon-th
	},
	list = {
		icon = glyphicon-list
	},
	#timeline = {
	#	icon = glyphicon-time
	#},
	map = {
		icon = glyphicon-globe
	}
}

# --- text for Browse menu item, default is "Browse" 
browse_menu_button_text = 

# --- default number of results per page/ajax load
defaultHitsPerBlock = 36

# --- set to list to show dropdown with links to each configured browse or a single Browse nav link when one browse is configured
browseMenuFormat =

# --- set if you don't want the browse menu to be preloaded with facets for the first browse type on open
dontPreloadBrowseMenu = 1

# --- refine_col_class -> boostrap col class to assign to refine col - defaults to: col-sm-8 col-md-8 col-lg-8
result_col_class =

# --- refine_col_class -> boostrap col class to assign to refine col - defaults to: col-sm-4 col-md-3 col-md-offset-1 col-lg-3 col-lg-offset-1
refine_col_class =