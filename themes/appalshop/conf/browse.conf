cache_timeout = 0

#
# 
#
browseTypes = {
	objects = {
		displayName = _(Objects),
		labelSingular = _("object"),
 		labelPlural = _("objects"),
		table = ca_objects,
		
		restrictToTypes = [],
		#dontExpandTypesHierarchically = true,
		availableFacets = [],
		excludeFieldsFromSearch = [],
		#baseCriteria = {
		#	has_media_facet = [yes],
		#},
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			images = {},
			list = {},	
			map = {
				data = ca_places.georeference,
				width = 100%,
				height = 600px,
				minZoomLevel = 2,
				maxZoomLevel = 18,
				display = {
					labelTemplate = <l>^ca_objects.preferred_labels.name</l> (^ca_objects.idno),
					contentTemplate =<p>^ca_objects.description</p>
				}
			},
		},
		sortBy = {
			Title = ca_object_labels.name,
			Date = ca_objects.dates_value,
			"Media Type" = ca_objects.media_type,
			"Physical Format" = ca_objects.av_format_Hierarchical
		},
		# --- default sort direction for the sortBy options
		sortDirection = {
			Title = asc,
			Date = desc,
			"Media Type" = asc,
			"Physical Format" = asc,
		},
		# --- sortControlType = dropdown or list
		sortControlType = list,
		options = {
#			selectMediaUsingRelationshipTypes = [relationshipType],
#			selectMediaUsingTypes = [objectType],
#			extendedInformationTemplate = ^ca_objects.description_w_type.description
		}
	},

}

views = {
	images = {
		icon = glyphicon-th
	},
	list = {
		icon = glyphicon-list
	},
	timeline = {
		icon = glyphicon-time
	},
	map = {
		icon = glyphicon-globe
	}
}

# --- text for Browse menu item, default is "Browse" 
browse_menu_button_text = 

# --- default number of results per page/ajax load
defaultHitsPerBlock = 36

# --- set to list to show dropdown with links to each configured browse or a single Browse nav link when one browse is configured
browseMenuFormat = list

# --- set if you don't want the browse menu to be preloaded with facets for the first browse type on open
dontPreloadBrowseMenu = 1

# --- refine_col_class -> boostrap col class to assign to refine col - defaults to: col-sm-8 col-md-8 col-lg-8
result_col_class =

# --- refine_col_class -> boostrap col class to assign to refine col - defaults to: col-sm-4 col-md-3 col-md-offset-1 col-lg-3 col-lg-offset-1
refine_col_class =

ca_objects = {
	name = _("Objects"),
	facets = {
		term_facet = {
			type = authority,
			table = ca_list_items,
			relationship_table = ca_objects_x_vocabulary_terms,
			restrict_to_types = [],
			
			individual_group_display = 0,
			
			group_mode = alphabetical,
			order_by_label_fields = [name_sort],

			
			# Set to non-zero value to display hierarchy on items in this facet
			show_hierarchy = 0,
			
			label_singular = _("subject"),
			label_plural = _("subjects"),
			description = _("Browse keywords in our collections.")
		},
		has_media_facet = {
			type = has,
			
			table = ca_object_representations,
			relationship_table = ca_objects_x_object_representations,
			restrict_to_types = [],
			restrict_to_relationship_types = [],
			
			label_yes = _("Has media"),
			label_no = _("No media"),
			
						# can be ASC or DESC (default is DESC)
			hierarchy_order  = DESC,
			single_value = 1,
			
			label_singular = _("has media"),
			label_plural = _("has media"),
			description = _("Find records with attached media that you can view or listen to. You’ll be able to further refine the results using our filter."),
		},
		type_facet = {
			type = fieldList,
			field = type_id,
			
			group_mode = alphabetical,
			
			label_singular = _("item type"),
			label_plural = _("item types"),
			description = _("Browse by audiovisual, photographic, or paper & object items.")
		},
		entity_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_entities,
			relationship_table = ca_objects_x_entities,
			restrict_to_types = [],
			
			individual_group_display = 1,
			
			groupings = {
				label = _("Name"), 
				relationship_types = _("Role"),
				type = _("Type")
			},
			group_mode = alphabetical,
			order_by_label_fields = [surname, forename, middlename, displayname],
			
			indefinite_article = an,
			label_singular = _("people and organizations"),
			label_plural = _("people and organizations"),
			description = _("Find items relating to individuals and organizations in our collections. You can browse by name, role, or type (person or organization)."),
		},
		place_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_places,
			relationship_table = ca_objects_x_places,
			restrict_to_types = [],
			
			individual_group_display = 1,
			
			group_mode = hierarchical,
			order_by_label_fields = [name],
			
			# Set to non-zero value to display hierarchy on items in this facet
			show_hierarchy = 1,
			
			# Character(s) to place between elements of the hierarchy
			hierarchical_delimiter = &nbsp;⬅&nbsp;,
			
			# Number of items to trim off the top (leave blank or set to 0 to trim nothing)
			remove_first_items = ,
			
			# Maximum length of hierarchy to display (leave blank to return hierarchy unabridged)
			hierarchy_limit = 3,
			
			# can be ASC or DESC (default is DESC)
			hierarchy_order  = DESC,
			
			indefinite_article = a,
			label_singular = _("place"),
			label_plural = _("places"),
		},
		decade_facet = {
			type = normalizedDates,
			element_code = dates_value,
			normalization = decades,
			
			group_mode = none,
			
			label_singular = _("decade"),
			label_plural = _("decades"),
			description = _("Browse by decade."),			
		},
		year_facet = {
			type = normalizedDates,
			element_code = dates_value,
			normalization = years,
			
			requires = decade_facet,
			
			group_mode = none,
			
			label_singular = _("year"),
			label_plural = _("years"),
			description = _("Browse by year."),			
		},
		collection_facet = {
			type = authority,
			table = ca_collections,
			relationship_table = ca_objects_x_collections,
			restrict_to_types = ["collection"],
			
			group_mode = alphabetical,

			label_singular = _("collection"),
			label_plural = _("collections"),
			description = _("See an alphabetized list of collections."),
		}
	}
}