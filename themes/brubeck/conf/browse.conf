cache_timeout = 0

#
# 
#
browseTypes = {
	objects = {
		displayName = _("Archival Items"),
		labelSingular = _("item"),
 		labelPlural = _("items"),
		table = ca_objects,
		
		restrictToTypes = [],
		#dontExpandTypesHierarchically = true,
		availableFacets = [],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			images = {
				result_caption = "<l>^ca_objects.preferred_labels</l><br/><small><l>^ca_objects.idno</l></small>",
			},
			list = {
				result_caption = "<l>^ca_objects.preferred_labels</l><br/><small><l>^ca_objects.idno</l></small>",
			}
		},
		sortBy = {
			Title = ca_object_labels.name,
			Date = ca_objects.date_container.date|date_type=created,
			Identifier = ca_objects.idno
		},
		# --- default sort direction for the sortBy options
		sortDirection = {
			Identifier = asc,
			Title = desc
		},
		# --- sortControlType = dropdown or list
		sortControlType = list,
#		options = {
#			selectMediaUsingRelationshipTypes = [relationshipType],
#			selectMediaUsingTypes = [objectType],
#			extendedInformationTemplate = ^ca_objects.description
#		}
	},
	songs = {
		displayName = _(Songs),
		labelSingular = _("song"),
 		labelPlural = _("songs"),
		table = ca_occurrences,
		restrictToTypes = [song],
		showLetterBarFrom = ca_occurrence_labels.name,
		showLetterBarSorts = [ca_occurrence_labels.name],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			list = {
				result_caption = "^ca_occurrences.preferred_labels<ifdef code='ca_occurrences.date_occurrence_container.date_occurrence'>, ^ca_occurrences.date_occurrence_container.date_occurrence</ifdef>",
			}
		},
		
		sortBy = {
			Title = ca_occurrence_labels.name,
			Date = ca_occurrences.date_occurrence,
		},
		sortDirection = {
			Title = asc,
			Date = asc
		},
		# --- sortControlType = dropdown or list
		sortControlType = list,
#		options = {
#			selectMediaUsingRelationshipTypes = [relationshipType],
#			selectMediaUsingTypes = [objectType]
#		}
	},
	entities = {
		displayName = _(People & Groups),
		labelSingular = _("person/group"),
 		labelPlural = _("people/groups"),
		table = ca_entities,
		restrictToTypes = [],
		showLetterBarFrom = ca_entity_labels.surname,
		showLetterBarSorts = [ca_entity_labels.surname;ca_entity_labels.forename],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			list = {
				result_caption = "^ca_entities.preferred_labels",
			}
		},
		
		sortBy = {
			Name = ca_entity_labels.surname;ca_entity_labels.forename
		},
		# --- sortControlType = dropdown or list
		sortControlType = list,
#		options = {
#			selectMediaUsingRelationshipTypes = [relationshipType],
#			selectMediaUsingTypes = [objectType]
#		},
		dontShowInBrowseMenu = 0
	},
	collections = {
		displayName = _(Collections),
		labelSingular = _("collection"),
 		labelPlural = _("collections"),
		table = ca_collections,
		restrictToTypes = [],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = { 
			list = {
				result_caption = "<small>^ca_collections.idno</small><br/>^ca_collections.preferred_labels",
			}
		},
		
		sortBy = {
			Name = ca_collection_labels.name,
			Identifier = ca_collections.idno,
			
		},
		# --- sortControlType = dropdown or list
		sortControlType = list,
		dontShowInBrowseMenu = 1
	},
	tours = {
		displayName = _(Tours),
		labelSingular = _("tour"),
 		labelPlural = _("tours"),
		table = ca_occurrences,
		restrictToTypes = [tour],
		showLetterBarFrom = ca_occurrence_labels.name,
		showLetterBarSorts = [ca_occurrence_labels.name],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			list = {
				result_caption = "^ca_occurrences.preferred_labels",
			}
		},
		
		sortBy = {
			Title = ca_occurrence_labels.name,
			Date = ca_occurrences.date_occurrence
		},
		sortDirection = {
			Relevance = asc,
			Title = asc,
			Date = asc
		},
		# --- sortControlType = dropdown or list
		sortControlType = list,
#		options = {
#			selectMediaUsingRelationshipTypes = [relationshipType],
#			selectMediaUsingTypes = [objectType]
#		},
		dontShowInBrowseMenu = 1
	},
	albums = {
		displayName = _(Albums),
		labelSingular = _("album"),
 		labelPlural = _("albums"),
		table = ca_occurrences,
		restrictToTypes = [album],
		showLetterBarFrom = ca_occurrence_labels.name,
		showLetterBarSorts = [ca_occurrence_labels.name],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			list = {
				result_caption = "^ca_occurrences.preferred_labels<ifdef code='ca_occurrences.date_occurrence_container.date_occurrence'>, ^ca_occurrences.date_occurrence_container.date_occurrence</ifdef>",
			}
		},
		
		sortBy = {
			Relevance = _natural,
			Title = ca_occurrence_labels.name,
			Date = ca_occurrences.date_occurrence
		},
		sortDirection = {
			Relevance = asc,
			Title = asc,
			Date = asc
		},
		# --- sortControlType = dropdown or list
		sortControlType = list,
#		options = {
#			selectMediaUsingRelationshipTypes = [relationshipType],
#			selectMediaUsingTypes = [objectType]
#		},
		dontShowInBrowseMenu = 1
	},
	appearances = {
		displayName = _(Appearances),
		labelSingular = _("appearance"),
 		labelPlural = _("appearances"),
		table = ca_occurrences,
		restrictToTypes = [appearance],
		showLetterBarFrom = ca_occurrence_labels.name,
		showLetterBarSorts = [ca_occurrence_labels.name],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			list = {
				result_caption = "<ifcount code='ca_occurrences.related' restrictToTypes='tour' min='1'><unit relativeTo='ca_occurrences.related' restrictToTypes='tour' delimiter=', '>^ca_occurrences.preferred_labels.name</unit>: </ifcount><ifcount code='ca_occurrences.related' restrictToTypes='venue' min='1'><unit relativeTo='ca_occurrences.related' restrictToTypes='venue' delimiter=', '>^ca_occurrences.preferred_labels.name</unit>, </ifcount><ifdef code='ca_occurrences.date_occurrence_container.date_occurrence'>^ca_occurrences.date_occurrence_container.date_occurrence<ifdef code='ca_occurrences.date_occurrence_container.date_note_occurrence'> (^ca_occurrences.date_occurrence_container.date_note_occurrence)</ifdef></ifdef>"
			}
		},
		
		sortBy = {
			Relevance = _natural,
			Date = ca_occurrences.date_occurrence
		},
		sortDirection = {
			Relevance = asc,
			Date = asc
		},
		# --- sortControlType = dropdown or list
		sortControlType = list,
#		options = {
#			selectMediaUsingRelationshipTypes = [relationshipType],
#			selectMediaUsingTypes = [objectType]
#		},
		dontShowInBrowseMenu = 1
	},
	studio_sessions = {
		displayName = _(Studio Sessions),
		labelSingular = _("studio session"),
 		labelPlural = _("studio sessions"),
		table = ca_occurrences,
		restrictToTypes = [studio_session],
		showLetterBarFrom = ca_occurrence_labels.name,
		showLetterBarSorts = [ca_occurrence_labels.name],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			list = {
				result_caption = "^ca_occurrences.preferred_labels",
			}
		},
		
		sortBy = {
			Relevance = _natural,
			Title = ca_occurrence_labels.name,
			Date = ca_occurrences.date_occurrence
		},
		sortDirection = {
			Relevance = asc,
			Title = asc,
			Date = asc
		},
		# --- sortControlType = dropdown or list
		sortControlType = list,
#		options = {
#			selectMediaUsingRelationshipTypes = [relationshipType],
#			selectMediaUsingTypes = [objectType]
#		},
		dontShowInBrowseMenu = 1
	},
	venues_sessions = {
		displayName = _(Venues),
		labelSingular = _("venue"),
 		labelPlural = _("venues"),
		table = ca_occurrences,
		restrictToTypes = [venue],
		showLetterBarFrom = ca_occurrence_labels.name,
		showLetterBarSorts = [ca_occurrence_labels.name],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			list = {
				result_caption = "^ca_occurrences.preferred_labels",
			}
		},
		
		sortBy = {
			Relevance = _natural,
			Title = ca_occurrence_labels.name,
		},
		sortDirection = {
			Relevance = asc,
			Title = asc,
			Date = asc
		},
		# --- sortControlType = dropdown or list
		sortControlType = list,
#		options = {
#			selectMediaUsingRelationshipTypes = [relationshipType],
#			selectMediaUsingTypes = [objectType]
#		},
		dontShowInBrowseMenu = 1
	}
}

views = {
	images = {
		icon = glyphicon-th
	},
	list = {
		icon = glyphicon-list
	},
	timeline = {
		icon = glyphicon-time
	},
	map = {
		icon = glyphicon-globe
	}
}

# --- text for Browse menu item, default is "Browse" 
browse_menu_button_text = 

# --- default number of results per page/ajax load
defaultHitsPerBlock = 36

# --- set to list to show dropdown with links to each configured browse or a single Browse nav link when one browse is configured
browseMenuFormat = list

# --- set if you don't want the browse menu to be preloaded with facets for the first browse type on open
dontPreloadBrowseMenu = 1

# --- refine_col_class -> boostrap col class to assign to refine col - defaults to: col-sm-8 col-md-8 col-lg-8
result_col_class =

# --- refine_col_class -> boostrap col class to assign to refine col - defaults to: col-sm-4 col-md-3 col-md-offset-1 col-lg-3 col-lg-offset-1
refine_col_class =

browse_featured_entities_set = browse_entities

ca_objects = {
	name = _("Objects"),
	facets = {
		has_media_facet = {
			type = has,
			
			table = ca_object_representations,
			relationship_table = ca_objects_x_object_representations,
			restrict_to_types = [],
			restrict_to_relationship_types = [],
			
			label_yes = _("Show items with digitized media"),
			label_no = _("does not have media"),
			
			single_value = 1,
			
			label_singular = _("media"),
			label_plural = _("media"),
			description = _("Find objects that have associated media.")
		},	
		type_facet = {
			type = fieldList,
			field = type_id,
			
			group_mode = none,

			label_singular = _("Type"),
			label_plural = _("Types"),
		},
		creation_date_decade_facet = {
			type = normalizedDates,
			element_code = ca_objects.date_container.date,
			normalization = decades,
			
			filter_by = ca_objects.date_container.date_type,
			filter_values = [created],
			
			#minimum_date = 1700,
			# maximum_date = 2050,

			group_mode = none,
			
			label_singular = _("Date Created"),
			label_plural = _("Date Created")
		},
		creation_date_year_facet = {
			type = normalizedDates,
			element_code = ca_objects.date_container.date,
			normalization = years,
			requires = creation_date_decade_facet,
			
			filter_by = ca_objects.date_container.date_type,
			filter_values = [created],
			
			#minimum_date = 1700,
			# maximum_date = 2050,

			group_mode = none,
			
			label_singular = _("Date Created"),
			label_plural = _("Date Created")
		},
		entity_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_entities,
			relationship_table = ca_objects_x_entities,
			restrict_to_types = [],
			
			group_mode = alphabetical,
			order_by_label_fields = [surname, forename, middlename],
			
			natural_sort = 0,
			indefinite_article = an,
			label_singular = _("People/Group"),
			label_plural = _("People/Groups"),
		},
		material_type_facet = {
			type = attribute,
			element_code = material_type,
			
			label_singular = _("Material Type"),
		},	
#		collection_facet = {
#			# 'type' can equal authority, attribute, fieldList, normalizedDates
#			type = authority,		
#			table = ca_collections,
#			relationship_table = ca_objects_x_collections,
#			restrict_to_types = [series],
			
#			group_mode = alphabetical,
#			order_by_label_fields = [name],
			
#			natural_sort = 0,
#			indefinite_article = a,
#			label_singular = _("Collection"),
#			label_plural = _("Collections"),
#		},	
		occurrence_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_occurrences,
			relationship_table = ca_objects_x_occurrences,
			restrict_to_types = [],
			
			group_mode = alphabetical,
			order_by_label_fields = [name],
			
			natural_sort = 0,
			indefinite_article = a,
			label_singular = _("Occurrence"),
			label_plural = _("Occurrences"),
			requires = x
		}


	}
}

ca_occurrences = {
	name = _("Occurrences"),
	facets = {
		date_decade_facet = {
			type = normalizedDates,
			element_code = date_occurrence,
			normalization = decades,
			
			#minimum_date = 1700,
			# maximum_date = 2050,

			group_mode = none,
			
			label_singular = _("Decade"),
			label_plural = _("Decades")
		},
		date_year_facet = {
			type = normalizedDates,
			element_code = date_occurrence,
			normalization = years,
			requires = date_decade_facet,
			
			#minimum_date = 1700,
			# maximum_date = 2050,

			group_mode = none,
			
			label_singular = _("Year"),
			label_plural = _("Years")
		},
		genre_facet = {
			type = attribute,
			element_code = genre,
			
			label_singular = _("Genre"),
		},	
		composer_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_entities,
			relationship_table = ca_entities_x_occurrences,
			restrict_to_relationship_types = [lyricist,composer],
			
			group_mode = alphabetical,
			order_by_label_fields = [surname, forename, middlename],
			
			natural_sort = 0,
			indefinite_article = an,
			label_singular = _("Composer/Lyricist"),
			label_plural = _("Composers/Lyricists"),
		},	
		entity_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_entities,
			relationship_table = ca_entities_x_occurrences,
			restrict_to_types = [],
			exclude_relationship_types = [lyricist,composer],
			
			group_mode = alphabetical,
			order_by_label_fields = [surname, forename, middlename],
			
			natural_sort = 0,
			indefinite_article = an,
			label_singular = _("People/Group"),
			label_plural = _("People/Groups"),
		}


	}
}
ca_entities = {
	name = _("Entities"),
	facets = {
		type_facet = {
			type = fieldList,
			field = type_id,
			
			group_mode = alphabetical,
			
			label_singular = _("type"),
			label_plural = _("types")
		},
		role_facet = {
	        type = relationship_types,
	        table = ca_occurrences,
	        #restrict_to_relationship_types = [],
			relationship_table = ca_entities_x_occurrences,
			
			label_singular = _("Role"),
			label_plural = _("Roles")	
	    },
	    relationship_to_Brubeck_facet = {
			type = attribute,
			element_code = relationship,
			
			label_singular = _("Relationship to Brubeck"),
		},
		occurrence_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_occurrences,
			relationship_table = ca_entities_x_occurrences,
			restrict_to_types = [],
			
			group_mode = alphabetical,
			order_by_label_fields = [name],
			generate_facets_for_types = 1,
			natural_sort = 0,
			indefinite_article = an,
			label_singular = _("Occ"),
			label_plural = _("Occs"),
		}


	}
}
ca_collections = {
	name = _("Collections"),
	facets = {
		type_facet = {
			type = fieldList,
			field = type_id,
			
			group_mode = alphabetical,
			
			label_singular = _("type"),
			label_plural = _("types")
		},
		creation_date_decade_facet = {
			type = normalizedDates,
			element_code = ca_collections.date_container.date,
			normalization = decades,
			
			filter_by = ca_collections.date_container.date_type,
			filter_values = [created],
			
			#minimum_date = 1700,
			# maximum_date = 2050,

			group_mode = none,
			
			label_singular = _("Date Created"),
			label_plural = _("Date Created")
		},
		creation_date_years_facet = {
			type = normalizedDates,
			element_code = ca_collections.date_container.date,
			normalization = years,
			
			filter_by = ca_collections.date_container.date_type,
			filter_values = [created],
			
			#minimum_date = 1700,
			# maximum_date = 2050,

			group_mode = none,
			
			label_singular = _("Date Created"),
			label_plural = _("Date Created"),
			requires = creation_date_decade_facet
		}


	}
}

