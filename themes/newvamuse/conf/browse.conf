#
# Browse configuration
#

# number of seconds to keep cached browses around
# set to 0 to disable caching
cache_timeout = 86800

browse_menu_button_text = Explore


#
# 
#
browseTypes = {
	objects = {
		displayName = _(Objects),
		labelSingular = _("Object"),
 		labelPlural = _("Objects"),
		table = ca_objects,
		
		restrictToTypes = [],
		availableFacets = [],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			images = {},
			list = {},
			timeline = {
				data = ca_objects.date,
				display = {
					title_template = <l>^ca_objects.preferred_labels.name</l> (^ca_objects.idno),
					description_template = <p>^ca_objects.description</p>,
					caption_template = <em>^ca_objects.caption</em>,
					image = ^ca_object_representations.media.small,
					icon = ^ca_object_representations.media.icon
				}
			},
#			map = {
#				data = ca_objects.georeference,
#				display = {
#					title_template = <l>^ca_objects.preferred_labels.name</l> (^ca_objects.idno),
#					description_template = <p>^ca_objects.description</p>,
#					icon = <div style='float:left; margin:0px 10px 10px 0px;'>^ca_object_representations.media.icon</div>	
#				}
#			},			
		},
		sortBy = {
			Title = ca_object_labels.name,
			Relevance = _natural,
			Media = ca_object_representations.access,
			Identifier = ca_objects.idno_sort
		},
		# --- default sort direction for the sortBy options
		sortDirection = {
			Title = asc,
			Relevance = asc,
			Media = desc,
			Identifier = asc
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown
	},
	entities = {
		displayName = _(Made in Nova Scotia),
		labelSingular = _("Made in Nova Scotia"),
 		labelPlural = _("Made in Nova Scotia"),
		table = ca_entities,
		restrictToTypes = [manufacturer],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			images = {}, 
			list = {}
		},
		
		sortBy = {
			Relevance = _natural,
			Identifier = ca_entities.idno,
			Name = ca_entity_labels.displayname;ca_entity_labels.name_sort
		},
		# --- default sort direction for the sortBy options
		sortDirection = {
			Name = asc,
			Relevance = asc,
			Identifier = asc
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown
	},
	resources = {
		displayName = _(Eduacational resources),
		labelSingular = _("Resource"),
 		labelPlural = _("Resources"),
		table = ca_occurrences,
		
		restrictToTypes = [event],
		availableFacets = [],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			images = {},
			list = {},
			timeline = {
				data = ca_occurrences.date,
				display = {
					title_template = <l>^ca_occurrences.preferred_labels.name</l> (^ca_occurrences.idno),
					description_template = <p>^ca_occurrences.description</p>,
					caption_template = <em>^ca_occurrences.caption</em>,
					image = ^ca_object_representations.media.small,
					icon = ^ca_object_representations.media.icon
				}
			}		
		},
		sortBy = {
			Title = ca_occurrence_labels.name,
			Relevance = _natural,
			Date = ca_occurrences.date_added,
			Identifier = ca_occurrences.idno_sort
		},
		# --- default sort direction for the sortBy options
		sortDirection = {
			Title = asc,
			Relevance = asc,
			Media = desc,
			Identifier = asc
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown
	},
}

views = {
	images = {
		icon = fa fa-th-large
	},
	list = {
		icon = fa fa-list
	},
	timeline = {
		icon = fa fa-clock-o 
	},
	map = {
		icon = fa fa-globe
	}
}

# --- default number of results per page/ajax load
defaultHitsPerBlock = 36

# --- set to list to show dropdown with links to each configured browse or a single Browse nav link when one browse is configured
browse_menu_format =

# --- refine_col_class -> boostrap col class to assign to refine col - defaults to: col-sm-8 col-md-8 col-lg-8
result_col_class =

# --- refine_col_class -> boostrap col class to assign to refine col - defaults to: col-sm-4 col-md-3 col-md-offset-1 col-lg-3 col-lg-offset-1
refine_col_class =
# Configuration for object browse
ca_objects = {
	name = _("Objects"),
	facets = {
		has_media_facet = {
			type = has,
			table = ca_object_representations,
			relationship_table = ca_objects_x_object_representations,
			restrict_to_types = [],
			restrict_to_relationship_types = [],
			
			single_value = 1,
			group_mode = none,
			
			#label_yes = _("Has media"),
			#label_no = _("Has no media"),
			
			label_singular = _("has image"),
			label_plural = _("has images"),
			description = _("Find objects with associated images."),
			facet_groups = [refine]
		},
		has_manu_facet = {
			type = has,
			table = ca_entities,
			relationship_table = ca_objects_x_entities,
			restrict_to_types = [manufacturer],
			restrict_to_relationship_types = [],
			
			single_value = 1,
			group_mode = none,
			
			label_yes = _("Yes"),
			label_no = _("No"),
			
			label_singular = _("Made in Nova Scotia"),
			label_plural = _("Made in Nova Scotia"),
			description = _("Find objects by associated manufacturers."),
			facet_groups = [refine]
		},		
		culture_facet = {
			type = attribute,
			element_code = culture,
			
			group_mode = none,

			label_singular = _("culture"),
			label_plural = _("culture"),
			description = _("Find objects by associated culture."),
			facet_groups = [refine, main]
		},		
		entity_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_entities,
			relationship_table = ca_objects_x_entities,
			restrict_to_types = [ind, org, fam],
			restrict_to_relationship_types = [author, collector, conservator, creator, examiner, manufacturer, merchant, original_owner, repository],
			
			individual_group_display = 1,
			
			groupings = {
				label = _("Name"), 
				relationship_types = _("Role"),
				type = _("Type")
			},
			group_mode = alphabetical,
			order_by_label_fields = [surname, forename, middlename],
			
			indefinite_article = an,
			label_singular = _("people & organizations"),
			label_plural = _("people & organizations"),
			description = _("Find objects by associated people and artists."),
			facet_groups = [refine, main]
		},
		century_facet = {
			type = normalizedDates,
			element_code = date,
			normalization = centuries,
			
			group_mode = none,
			minimum_date = 1700,
			
			label_singular = _("century"),
			label_plural = _("centuries"),
			description = _("Find objects according to associated dates.  You can normalize these dates by year&#44; decade or century."),
		},
		decade_facet = {
			type = normalizedDates,
			element_code = date,
			normalization = decades,
			minimum_date = 1700,
			
			group_mode = none,
			
			label_singular = _("decade"),
			label_plural = _("decades"),
			description = _("Find objects according to associated dates.  You can normalize these dates by year&#44; decade or century."),			
		},
		year_facet = {
			type = normalizedDates,
			element_code = date,
			normalization = years,
			minimum_date = 1700,
			
			requires = [decade_facet],
			
			group_mode = none,
			
			label_singular = _("year"),
			label_plural = _("years"),
			description = _("Find objects according to associated dates.  You can normalize these dates by year&#44; decade or century."),			
		},
		region_facet = {
			type = attribute,
			element_code = mem_inst_region,
			relative_to = ca_entities,
			
			group_mode = none,

			label_singular = _("region"),
			label_plural = _("regions"),
			description = _("Find objects from a particular geographical area."),
			facet_groups = [refine, main]
		},
		member_inst_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_entities,
			relationship_table = ca_objects_x_entities,
			restrict_to_types = [member_institution],
			restrict_to_relationship_types = [],
			group_mode = alphabetical,
			order_by_label_fields = [displayname],
			
			indefinite_article = an,
			label_singular = _("contributor"),
			label_plural = _("contributors"),
			description = _("Find objects from a specific museum, interpretive centre or archives."),
			facet_groups = [refine, main]
		},
		novastory_category_facet = {
			type = attribute,
			element_code = novastory_category,
			
			group_mode = none,

			label_singular = _("theme"),
			label_plural = _("themes"),
			description = _("Find objects by associated topics: architecture, art, communications, farming, fishing, household life, industry, military, recreation or transportation."),
			facet_groups = [refine, main]
		},		
		#category_facet = {
		#	type = attribute,
		#	element_code = ns_category,
		#	
		#	group_mode = alphabetical,
		#	order_by_label_fields = [name],
		#	
		#	# Set to non-zero value to display hierarchy on items in this facet
		#	show_hierarchy = 1,
		#	
		#	# Character(s) to place between elements of the hierarchy
		#	hierarchical_delimiter = &nbsp;â¬…&nbsp;,
#
#			label_singular = _("category"),
#			label_plural = _("categories"),
#			description = _("Find objects by their Nomenclature 3.0 classification."),
#			facet_groups = [refine, main]
#		},				
#		source_facet = {
#			type = fieldList,
#			field = source_id,
#			
#			group_mode = alphabetical,
#
#			label_singular = _("institution"),
#			label_plural = _("institution"),
#			description = Find objects from an associated institution or archive.,
#		},		
	}
}

# Configuration for object lot browse
ca_object_lots = {
	name = _("Lots"),
	facets = {
		entity_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_entities,
			relationship_table = ca_object_lots_x_entities,
			restrict_to_types = [],
			
			group_mode = alphabetical,
			
			order_by_label_fields = [surname, forename, middlename],
			
			indefinite_article = an,
			label_singular = _("entity"),
			label_plural = _("entities")
		},
		type_facet = {
			type = fieldList,
			field = type_id,
			
			group_mode = alphabetical,
			
			label_singular = _("type"),
			label_plural = _("types")
		},
		status_facet = {
			type = fieldList,
			field = status,
			
			group_mode = alphabetical,
			
			label_singular = _("status"),
			label_plural = _("statuses")
		},
		access_facet = {
			type = fieldList,
			field = access,
			
			group_mode = alphabetical,
			
			indefinite_article = an,
			label_singular = _("access status"),
			label_plural = _("access statuses")
		}
	}
}
# --------------------------------------------------------------------
# Configuration for entity browse
ca_entities = {
	name = _("Entities"),
	facets = {
		business_category = {
			type = attribute,
			element_code = business_category,
			
			restrictToTypes = [manufacturer],
			group_mode = none,

			label_singular = _("category"),
			label_plural = _("categories"),
			description = _("Find industry by business category."),
			facet_groups = [refine, main]
		},
		
		#brand_name = {
		#	type = attribute,
		#	element_code = entity_brands,
		#	
		#	restrictToTypes = [manufacturer],
		#	group_mode = none,
		#
		#	label_singular = _("brand"),
		#	label_plural = _("brands"),
		#	description = _("Find manufacturers by brand names."),
		#	facet_groups = [refine, main]
		#},
		manu_city = {
			type = attribute,
			element_code = city,
			
			restrictToTypes = [manufacturer],
			group_mode = alphabetical,
			individual_group_display = 1,

			label_singular = _("City/Town"),
			label_plural = _("Cities/Towns"),
			description = _("Find industry by city or town."),
			facet_groups = [refine, main]
		},
		manu_county = {
			type = attribute,
			element_code = county,
			
			restrictToTypes = [manufacturer],
			group_mode = none,

			label_singular = _("county"),
			label_plural = _("counties"),
			description = _("Find industry by county."),
			facet_groups = [refine, main]
		},
		manu_decade = {
			type = normalizedDates,
			element_code = dates_value,
			normalization = decades,
			
			minimum_date = 1700,
			maximum_date = 2050,
			
			restrictToTypes = [manufacturer],
			group_mode = none,
			
			description = _("Find industry by decade in business."),
			
			label_singular = _("decade"),
			label_plural = _("decades")
		},
		manu_label = {
			type = label,
			restrictToTypes = [manufacturer],
			
			preferred_labels_only = 1,

			individual_group_display = 1,
			
			group_mode = alphabetical,
			label_singular = _("business name"),
			label_plural = _("business names"),
			description = _("Find industry by business name."),
			facet_groups = [refine, main]
		}
	}
}
# --------------------------------------------------------------------
# Configuration for collection browse
ca_collections = {
	name = _("Collections"),
	facets = {
		entity_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_entities,
			relationship_table = ca_entities_x_collections,
			restrict_to_types = [],
			
			group_mode = alphabetical,
			
			order_by_label_fields = [surname, forename, middlename],
			
			indefinite_article = an,
			label_singular = _("entity"),
			label_plural = _("entities")
		},
		place_facet = {
			type = authority,
			table = ca_places,
			relationship_table = ca_places_x_collections,
			restrict_to_types = [],
			
			group_mode = alphabetical,
			
			label_singular = _("place"),
			label_plural = _("places")
		},
		occurrence_facet = {
			type = authority,
			table = ca_occurrences,
			generate_facets_for_types = 1,
			relationship_table = ca_occurrences_x_collections,
			restrict_to_types = [],
			
			group_mode = alphabetical,
			
			indefinite_article = an,
			label_singular = _("occurrence"),
			label_plural = _("occurrences")
		},
		term_facet = {
			type = authority,
			table = ca_list_items,
			relationship_table = ca_collections_x_vocabulary_terms,
			restrict_to_types = [],
			
			group_mode = alphabetical,
			
			label_singular = _("term"),
			label_plural = _("terms")
		},
		type_facet = {
			type = fieldList,
			field = type_id,
			
			group_mode = alphabetical,
			
			label_singular = _("type"),
			label_plural = _("types")
		},
		status_facet = {
			type = fieldList,
			field = status,
			
			group_mode = alphabetical,
			
			label_singular = _("status"),
			label_plural = _("statuses")
		},
		access_facet = {
			type = fieldList,
			field = access,
			
			group_mode = alphabetical,
			
			indefinite_article = an,
			label_singular = _("access status"),
			label_plural = _("access statuses")
		}
	}
}

# --------------------------------------------------------------------
# Configuration for place browse
ca_places = {
	name = _("Places"),
	facets = {
		entity_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_entities,
			relationship_table = ca_entities_x_places,
			restrict_to_types = [],
			
			group_mode = alphabetical,
			
			order_by_label_fields = [surname, forename, middlename],
			
			indefinite_article = an,
			label_singular = _("entity"),
			label_plural = _("entities")
		},
		object_facet = {
			type = authority,
			table = ca_objects,
			relationship_table = ca_objects_x_places,
			restrict_to_types = [],
			
			group_mode = alphabetical,
			
			label_singular = _("object"),
			label_plural = _("objects")
		},
		occurrence_facet = {
			type = authority,
			table = ca_occurrences,
			generate_facets_for_types = 1,
			relationship_table = ca_places_x_occurrences,
			restrict_to_types = [],
			
			group_mode = alphabetical,
			
			indefinite_article = an,
			label_singular = _("occurrence"),
			label_plural = _("occurrences")
		},
		term_facet = {
			type = authority,
			table = ca_list_items,
			relationship_table = ca_places_x_vocabulary_terms,
			restrict_to_types = [],
			
			group_mode = alphabetical,
			
			label_singular = _("term"),
			label_plural = _("terms")
		},
		type_facet = {
			type = fieldList,
			field = type_id,
			
			group_mode = alphabetical,
			
			label_singular = _("type"),
			label_plural = _("types")
		},
		status_facet = {
			type = fieldList,
			field = status,
			
			group_mode = alphabetical,
			
			label_singular = _("status"),
			label_plural = _("statuses")
		},
		access_facet = {
			type = fieldList,
			field = access,
			
			group_mode = alphabetical,
			
			indefinite_article = an,
			label_singular = _("access status"),
			label_plural = _("access statuses")
		}
	}
}
# --------------------------------------------------------------------
# Configuration for occurrence browse
ca_occurrences = {
	name = _("Other authorities"),
	show_all_for_no_criteria_browse = 1,
	facets = {
		grade_level_facet = {
			type = attribute,
			element_code = grade_level,
			
			group_mode = alphabetical,
			
			label_singular = _("grade level"),
			label_plural = _("grade levels")
		},
		subjects_facet = {
			type = attribute,
			element_code = subjects,
			
			group_mode = alphabetical,
			
			label_singular = _("subject"),
			label_plural = _("subjects")
		},
		type_facet = {
			type = fieldList,
			field = type_id,
			
			group_mode = alphabetical,
			
			label_singular = _("type"),
			label_plural = _("types")
		},
		activity_type_facet = {
			type = attribute,
			element_code = activity_type,
			
			group_mode = alphabetical,
			
			label_singular = _("activity"),
			label_plural = _("activities")
		},
		culture_facet = {
			type = attribute,
			element_code = culture,
			
			group_mode = alphabetical,
			
			label_singular = _("culture"),
			label_plural = _("cultures")
		},
		region_facet = {
			type = attribute,
			element_code = mem_inst_region,
			
			group_mode = alphabetical,
			
			label_singular = _("region"),
			label_plural = _("resions")
		},
		county_facet = {
			type = attribute,
			element_code = counties,
			
			group_mode = alphabetical,
			
			label_singular = _("county"),
			label_plural = _("counties")
		},
		entity_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_entities,
			relationship_table = ca_entities_x_occurrences,
			restrict_to_types = [member_institution],
			
			group_mode = alphabetical,
			
			order_by_label_fields = [surname, forename, middlename],
			
			indefinite_article = an,
			label_singular = _("Contributor"),
			label_plural = _("Contributors")
		}
	}
}

# --------------------------------------------------------------------
# Configuration for storage location browse
ca_storage_locations = {
	name = _("Storage locations"),
	facets = {
		type_facet = {
			type = fieldList,
			field = type_id,
			
			group_mode = alphabetical,
			
			label_singular = _("type"),
			label_plural = _("types")
		},
		status_facet = {
			type = fieldList,
			field = status,
			
			group_mode = alphabetical,
			
			label_singular = _("status"),
			label_plural = _("statuses")
		}
	}
}
# --------------------------------------------------------------------
