cache_timeout = 0

#
# 
#
browseTypes = {
	objects = {
		displayName = _(Artworks),
		labelSingular = _("artwork"),
 		labelPlural = _("artworks"),
		table = ca_objects,
		
		restrictToTypes = [sk_artwork, loaned_artwork],
		#dontExpandTypesHierarchically = true,
		availableFacets = [entity_facet, decade_facet],
		facetGroup = artworks,
		
		baseCriteria = {
			include_collection = [yes],
		},
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			images = {},
		},
		sortBy = {
			Artist = ca_entity_labels.surname;ca_entity_labels.forename;ca_object_labels.name,		
			Title = ca_object_labels.name,
			Date = ca_objects.object_date,
		},
		# --- default sort direction for the sortBy options
		sortDirection = {
			Title = asc,
			Date = asc,
			Artist = asc,
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown
	},
	allworks = {
		displayName = _(Artworks),
		labelSingular = _("artwork"),
 		labelPlural = _("artworks"),
		table = ca_objects,
		
		restrictToTypes = [sk_artwork, loaned_artwork],
		#dontExpandTypesHierarchically = true,
		availableFacets = [entity_facet, decade_facet],
		facetGroup = allartworks,
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			images = {},
		},
		sortBy = {
			Artist = ca_entity_labels.surname;ca_entity_labels.forename,		
			Title = ca_object_labels.name,
			Date = ca_objects.object_date,
		},
		# --- default sort direction for the sortBy options
		sortDirection = {
			Title = asc,
			Date = asc,
			Artist = asc,
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown
	},	
	archival = {
		displayName = _(Archives),
		labelSingular = _("archive"),
 		labelPlural = _("archives"),
		table = ca_objects,
		
		restrictToTypes = [archival],
		#dontExpandTypesHierarchically = true,
		availableFacets = [],
		facetGroup = archival,
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			images = {},
		},
		sortBy = {
			Artist = ca_entity_labels.surname;ca_entity_labels.forename,		
			Title = ca_object_labels.name,
			Date = ca_objects.object_date,
			Relevance = ca_objects_x_collections.rank,
		},
		# --- default sort direction for the sortBy options
		sortDirection = {
			Title = asc,
			Date = asc,
			Artist = asc,
			Relevance = asc,
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown
	},
	install = {
		displayName = _(Installation Photos),
		labelSingular = _("archive"),
 		labelPlural = _("archives"),
		table = ca_objects,
		
		restrictToTypes = [],
		#dontExpandTypesHierarchically = true,
		availableFacets = [],
		facetGroup = install,
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			images = {},
		},
		sortBy = {
			Artist = ca_entity_labels.surname;ca_entity_labels.forename,		
			Title = ca_object_labels.name,
			Date = ca_objects.object_date,
		},
		# --- default sort direction for the sortBy options
		sortDirection = {
			Title = asc,
			Date = asc,
			Artist = asc,
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown
	},		
	collections = {
		displayName = _(Collections),
		labelSingular = _("collection"),
 		labelPlural = _("collections"),
		table = ca_collections,
		restrictToTypes = [],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = { 
			images = {}, 
			list = {}
		},
		
		sortBy = {
			Relevance = _natural,
			Identifier = ca_collections.idno,
			Name = ca_collection_labels.name
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown
	},
	entities = {
		displayName = _(Artists),
		labelSingular = _("artist"),
 		labelPlural = _("artists"),
		table = ca_entities,
		restrictToTypes = [],
		showLetterBarFrom = ca_entity_labels.surname,
		showLetterBarSorts = [ca_entity_labels.surname;ca_entity_labels.forename],
		options = {
			selectMediaUsingRelationshipTypes = [artist]
		}
		baseCriteria = {
			include_collection = [yes],
		},
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = { 
			list = {}
		},
		
		sortBy = {
			Name = ca_entity_labels.surname;ca_entity_labels.forename
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown
	},
	exhibitions = {
		# ---- on view results are filtered out of the past exhibitons list in browse_results_list_html.php
		displayName = _(Exhibitions),
		labelSingular = _("exhibition"),
 		labelPlural = _("exhibitions"),
		table = ca_occurrences,
		restrictToTypes = [exhibition],
		showLetterBarFrom = ca_occurrence_labels.name,
		showLetterBarSorts = [ca_occurrence_labels.name],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			list = {}
		},
		
		sortBy = {
			Date = ca_occurrences.exhibition_dates,
			Name = ca_occurrence_labels.name, 
			
		},
		sortDirection = {
			Date = desc,			
			Title = asc,

		},		
		# --- sortControlType = dropdown or list
		sortControlType = dropdown,
		options = {
			selectMediaUsingRelationshipTypes = [primary_rep],
#			selectMediaUsingTypes = [archival]
		}
	}
}

ca_objects = {
	name = _("Objects"),
	facets = {	
		entity_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_entities,
			relationship_table = ca_objects_x_entities,
			restrict_to_types = [],
			restrict_to_relationship_types = [artist],
			facet_groups = [artworks, allartworks],
			
			individual_group_display = 1,
			
			groupings = {
				label = _("Name"), 
				relationship_types = _("Role"),
				type = _("Type")
			},
			group_mode = alphabetical,
			order_by_label_fields = [surname, forename, middlename],
			
			indefinite_article = an,
			label_singular = _("artist"),
			label_plural = _("artist"),
			description = _("Find objects according to the people associated with your records.  You can browse by name&#44; role&#44; or entity type according to your configuration."),
		},	
		rel_entity_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_entities,
			relationship_table = ca_objects_x_entities,
			restrict_to_types = [],
			restrict_to_relationship_types = [],
			facet_groups = [archival],
			
			individual_group_display = 1,
			
			groupings = {
				label = _("Name"), 
				relationship_types = _("Role"),
				type = _("Type")
			},
			group_mode = alphabetical,
			order_by_label_fields = [surname, forename, middlename],
			
			indefinite_article = an,
			label_singular = _("person"),
			label_plural = _("people"),
			description = _("Find objects according to the people associated with your records.  You can browse by name&#44; role&#44; or entity type according to your configuration."),
		},	
		decade_facet = {
			type = normalizedDates,
			element_code = object_date,
			normalization = decades,
			facet_groups = [artworks, allartworks, archival],
			
			sort = DESC,
			
			group_mode = none,
			
			label_singular = _("decade"),
			label_plural = _("decades"),
			description = _("Find objects according to associated dates.  You can normalize these dates by year&#44; decade or century."),			
		},
		year_facet = {
			type = normalizedDates,
			element_code = object_date,
			requires = decade_facet,
			normalization = years,
			facet_groups = [artworks, allartworks, archival],
			
			sort = DESC,
			
			group_mode = none, 
			
			label_singular = _("year"),
			label_plural = _("years"),
			description = _("Find objects according to associated dates.  You can normalize these dates by year&#44; decade or century."),			
		},	
		archival_decade_facet = {
			type = normalizedDates,
			element_code = ca_objects.unitdate.dacs_date_value,
			normalization = decades,
			facet_groups = [archival],
			
			sort = DESC,
			
			group_mode = none,
			
			label_singular = _("decade"),
			label_plural = _("decades"),
			description = _("Find objects according to associated dates.  You can normalize these dates by year&#44; decade or century."),			
		},
		archival_year_facet = {
			type = normalizedDates,
			element_code = ca_objects.unitdate.dacs_date_value,
			requires = archival_decade_facet,
			normalization = years,
			facet_groups = [archival],
			
			sort = DESC,
			
			group_mode = none, 
			
			label_singular = _("year"),
			label_plural = _("years"),
			description = _("Find objects according to associated dates.  You can normalize these dates by year&#44; decade or century."),			
		},	
#		view_facet = {
#			type = attribute,
#			element_code = view_status,
			
#			group_mode = none,
			
#			label_singular = _("On View"),
#			label_plural = _("On View"),
#			description = _("Find objects according to associated dates.  You can normalize these dates by year&#44; decade or century."),			
#		},	
		include_collection = {
			type = attribute,
			element_code = include_collection,
			
			group_mode = none,
			
			label_singular = _("Include"),
			label_plural = _("Include"),
			description = _("Find objects according to associated dates.  You can normalize these dates by year&#44; decade or century."),			
		},		
		occurrence_facet = {
			type = authority,
			table = ca_occurrences,
			generate_facets_for_types = 0,
			relationship_table = ca_objects_x_occurrences,
			restrict_to_types = [],
			
			individual_group_display = 1,
			
			show_all_when_first_facet = 0,
			
			groupings = {
				label = _("Name"), 
				ca_attribute_dates_value:years = _("Years")
			},
			
			group_mode = alphabetical,
			
			label_singular = _("exhibition"),
			label_plural = _("exhibitions"),
			description = _("Find objects by Occurrences associated with your records&#44; such as historical events&#44; productions&#44; and other record types in your collection."),
		},
		installation_photo_facet = {
			type = authority,
			table = ca_occurrences,
			generate_facets_for_types = 0,
			relationship_table = ca_objects_x_occurrences,
			restrict_to_types = [],
			restrict_to_relationship_types = [install_photo],
			
			individual_group_display = 1,
			
			show_all_when_first_facet = 0,
			
			groupings = {
				label = _("Name"), 
				ca_attribute_dates_value:years = _("Years")
			},
			
			group_mode = alphabetical,
			
			label_singular = _("installation photos"),
			label_plural = _("installation photos"),
			description = _("Find objects by Occurrences associated with your records&#44; such as historical events&#44; productions&#44; and other record types in your collection."),
		},
		media_facet = {
			type = authority,
			table = ca_occurrences,
			generate_facets_for_types = 0,
			relationship_table = ca_objects_x_occurrences,
			restrict_to_types = [],
			restrict_to_relationship_types = [media], 
			facet_groups = [install],
			
			individual_group_display = 1,
			
			show_all_when_first_facet = 0,
			
			groupings = {
				label = _("Name"), 
				ca_attribute_dates_value:years = _("Years")
			},
			
			group_mode = alphabetical,
			
			label_singular = _("exhibition media"),
			label_plural = _("exhibition media"),
			description = _("Find objects by Occurrences associated with your records&#44; such as historical events&#44; productions&#44; and other record types in your collection."),
		},
		archive_item_facet = {
			type = authority,
			table = ca_occurrences,
			generate_facets_for_types = 0,
			relationship_table = ca_objects_x_occurrences,
			restrict_to_types = [],
			restrict_to_relationship_types = [archival_item], 
			facet_groups = [install],
			
			individual_group_display = 1,
			
			show_all_when_first_facet = 0,
			
			groupings = {
				label = _("Name"), 
				ca_attribute_dates_value:years = _("Years")
			},
			
			group_mode = alphabetical,
			
			label_singular = _("archival item"),
			label_plural = _("archival item"),
			description = _("Find objects by Occurrences associated with your records&#44; such as historical events&#44; productions&#44; and other record types in your collection."),
		},					
		place_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_storage_locations,
			relationship_table = ca_objects_x_storage_locations,
			restrict_to_types = [],
			
			individual_group_display = 1,
			
			group_mode = hierarchical,
			order_by_label_fields = [name],
			
			# Set to non-zero value to display hierarchy on items in this facet
			show_hierarchy = 1,
			
			# Character(s) to place between elements of the hierarchy
			hierarchical_delimiter = &nbsp;⬅&nbsp;,
			
			# Number of items to trim off the top (leave blank or set to 0 to trim nothing)
			remove_first_items = 0,
			
			# Maximum length of hierarchy to display (leave blank to return hierarchy unabridged)
			hierarchy_limit = 3,
			
			# can be ASC or DESC (default is DESC)
			hierarchy_order  = DESC,
			
			indefinite_article = a,
			label_singular = _("location"),
			label_plural = _("locations"),
		},		
	}
}

ca_entities = {
	name = _("Entities"),
	facets = {
		collection_artist = {
			type = attribute,
			element_code = permanent,
			
			group_mode = none,
			
			label_singular = _("Permanent Collection Artists"),
			label_plural = _("Permanent Collection Artists"),
			description = _("Find objects according to associated dates.  You can normalize these dates by year&#44; decade or century."),			
		},	
		include_collection = {
			type = attribute,
			element_code = include_collection,
			
			group_mode = none,
			
			label_singular = _("Include"),
			label_plural = _("Include"),
			description = _("Find objects according to associated dates.  You can normalize these dates by year&#44; decade or century."),			
		},		
#		occurrence_facet = {
#			type = authority,
##			table = ca_occurrences,
#			generate_facets_for_types = 1,
#			relationship_table = ca_entities_x_occurrences,
#			restrict_to_types = [],
			
#			group_mode = alphabetical,
			
#			indefinite_article = an,
#			label_singular = _("occurrence"),
#			label_plural = _("occurrences")
#		},
#		gender_facet = {
#			type = attribute,
#			element_code = gender,
			
#			group_mode = none,
			
#			label_singular = _("gender"),
#			label_plural = _("genders")
#		},
#		nationality_facet = {
#			type = attribute,
#			element_code = nationality,
			
#			group_mode = none,
			
#			label_singular = _("nationality"),
#			label_plural = _("nationalities")
#		}		
	}
}

ca_occurrences = {
	# ---- on view results are filtered out of the past exhibitons list in browse_results_list_html.php
	name = _("Other authorities"),
	facets = {

		decade_facet = {
			type = normalizedDates,
			element_code = exhibition_dates,
			normalization = decades,
			
			sort = DESC,
			
			group_mode = alphabetical,
			
			label_singular = _("decade"),
			label_plural = _("decades")
		},				
		year_facet = {
			type = normalizedDates,
			element_code = exhibition_dates,
			normalization = years,
			requires = decade_facet,
			
			sort = DESC,
			
			group_mode = alphabetical,
			
			label_singular = _("year"),
			label_plural = _("years")
		},
	}
}

views = {
	images = {
		icon = glyphicon-th
	},
	list = {
		icon = glyphicon-list
	},
	timeline = {
		icon = glyphicon-time
	},
	map = {
		icon = glyphicon-globe
	}
}

# --- text for Browse menu item, default is "Browse" 
browse_menu_button_text = 

# --- default number of results per page/ajax load
defaultHitsPerBlock = 36

# --- set to list to show dropdown with links to each configured browse or a single Browse nav link when one browse is configured
browseMenuFormat =

# --- set if you don't want the browse menu to be preloaded with facets for the first browse type on open
dontPreloadBrowseMenu = 1

# --- refine_col_class -> boostrap col class to assign to refine col - defaults to: col-sm-8 col-md-8 col-lg-8
result_col_class = col-sm-8 col-md-9 col-lg-9

# --- refine_col_class -> boostrap col class to assign to refine col - defaults to: col-sm-4 col-md-3 col-md-offset-1 col-lg-3 col-lg-offset-1
refine_col_class = col-sm-4 col-md-3 col-lg-3 