import { ImageService, ImageSize, ContentResource, Service as Service$1, ImageTile, ImageProfile, IIIFExternalWebResource } from '@iiif/presentation-3';

declare function canonicalServiceUrl(serviceId: string): string;

declare const STANFORD_IIIF_IMAGE_COMPLIANCE_0 = "http://library.stanford.edu/iiif/image-api/compliance.html#level0";
declare const STANFORD_IIIF_IMAGE_COMPLIANCE_1 = "http://library.stanford.edu/iiif/image-api/compliance.html#level1";
declare const STANFORD_IIIF_IMAGE_COMPLIANCE_2 = "http://library.stanford.edu/iiif/image-api/compliance.html#level2";
declare const STANFORD_IIIF_IMAGE_CONFORMANCE_0 = "http://library.stanford.edu/iiif/image-api/conformance.html#level0";
declare const STANFORD_IIIF_IMAGE_CONFORMANCE_1 = "http://library.stanford.edu/iiif/image-api/conformance.html#level1";
declare const STANFORD_IIIF_IMAGE_CONFORMANCE_2 = "http://library.stanford.edu/iiif/image-api/conformance.html#level2";
declare const STANFORD_IIIF_1_IMAGE_COMPLIANCE_0 = "http://library.stanford.edu/iiif/image-api/1.1/compliance.html#level0";
declare const STANFORD_IIIF_1_IMAGE_COMPLIANCE_1 = "http://library.stanford.edu/iiif/image-api/1.1/compliance.html#level1";
declare const STANFORD_IIIF_1_IMAGE_COMPLIANCE_2 = "http://library.stanford.edu/iiif/image-api/1.1/compliance.html#level2";
declare const STANFORD_IIIF_1_IMAGE_CONFORMANCE_0 = "http://library.stanford.edu/iiif/image-api/1.1/conformance.html#level0";
declare const STANFORD_IIIF_1_IMAGE_CONFORMANCE_1 = "http://library.stanford.edu/iiif/image-api/1.1/conformance.html#level1";
declare const STANFORD_IIIF_1_IMAGE_CONFORMANCE_2 = "http://library.stanford.edu/iiif/image-api/1.1/conformance.html#level2";
declare const IIIF_1_IMAGE_LEVEL_0 = "http://iiif.io/api/image/1/level0.json";
declare const IIIF_1_IMAGE_LEVEL_0_PROFILE = "http://iiif.io/api/image/1/profiles/level0.json";
declare const IIIF_1_IMAGE_LEVEL_1 = "http://iiif.io/api/image/1/level1.json";
declare const IIIF_1_IMAGE_LEVEL_1_PROFILE = "http://iiif.io/api/image/1/profiles/level1.json";
declare const IIIF_1_IMAGE_LEVEL_2 = "http://iiif.io/api/image/1/level2.json";
declare const IIIF_1_IMAGE_LEVEL_2_PROFILE = "http://iiif.io/api/image/1/profiles/level2.json";
declare const IIIF_2_IMAGE_LEVEL_0 = "http://iiif.io/api/image/2/level0.json";
declare const IIIF_2_IMAGE_LEVEL_0_PROFILE = "http://iiif.io/api/image/2/profiles/level0.json";
declare const IIIF_2_IMAGE_LEVEL_1 = "http://iiif.io/api/image/2/level1.json";
declare const IIIF_2_IMAGE_LEVEL_1_PROFILE = "http://iiif.io/api/image/2/profiles/level1.json";
declare const IIIF_2_IMAGE_LEVEL_2 = "http://iiif.io/api/image/2/level2.json";
declare const IIIF_2_IMAGE_LEVEL_2_PROFILE = "http://iiif.io/api/image/2/profiles/level2.json";
declare const IIIF_3_IMAGE_LEVEL_0 = "level0";
declare const IIIF_3_IMAGE_LEVEL_1 = "level1";
declare const IIIF_3_IMAGE_LEVEL_2 = "level2";
declare const IIIF_2_IMAGE_LEVEL_0_NO_JSON = "http://iiif.io/api/image/2/level0";
declare const IIIF_2_IMAGE_LEVEL_1_NO_JSON = "http://iiif.io/api/image/2/level1";
declare const IIIF_2_IMAGE_LEVEL_2_NO_JSON = "http://iiif.io/api/image/2/level2";
declare const level2Support: string[];
declare const level1Support: string[];
declare const imageServiceProfiles: string[];
declare const level0Support: string[];
declare type Profile = {
    extraFormats: string[];
    extraQualities: string[];
    extraFeatures: ExtraFeature[];
    maxArea?: number;
    maxHeight?: number;
    maxWidth?: number;
};
declare const level0: Profile;
declare const level1: Profile;
declare const level2: Profile;
declare const extraFeatures: readonly ["baseUriRedirect", "canonicalLinkHeader", "cors", "jsonldMediaType", "mirroring", "profileLinkHeader", "regionByPct", "regionByPx", "regionSquare", "rotationArbitrary", "rotationBy90s", "sizeByConfinedWh", "sizeByH", "sizeByPct", "sizeByW", "sizeByWh", "sizeUpscaling", "sizeByWhListed", "sizeByDistortedWh", "sizeByForcedWh"];
declare type ExtraFeature = typeof extraFeatures extends ReadonlyArray<infer ElementType> ? ElementType : never;

declare function combineProfiles(service: ImageService): Profile;

declare type Service = ImageService & {
    real?: false;
};
declare type FixedSizeImage = {
    id: string;
    type: 'fixed';
    width: number;
    height: number;
    unsafe?: boolean;
};
declare type FixedSizeImageService = {
    id: string;
    type: 'fixed-service';
    width: number;
    height: number;
    level?: number | null;
    version?: number;
};
declare type VariableSizeImage = {
    id: string;
    type: 'variable';
    minWidth: number;
    maxWidth: number;
    minHeight: number;
    maxHeight: number;
    level?: number | null;
    version?: number;
};
declare type UnknownSizeImage = {
    id: string;
    type: 'unknown';
};
declare type ImageCandidate = FixedSizeImage | VariableSizeImage | UnknownSizeImage | FixedSizeImageService;
declare type ImageCandidateRequest = {
    width?: number;
    height?: number;
    maxWidth?: number;
    maxHeight?: number;
    minWidth?: number;
    minHeight?: number;
    fallback?: boolean;
    atAnyCost?: boolean;
    unsafeImageService?: boolean;
    returnAllOptions?: boolean;
    allowUnsafe?: boolean;
    preferFixedSize?: boolean;
    explain?: boolean;
};
declare type SizeParameter = {
    height?: number;
    width?: number;
    max: boolean;
    serialiseAsFull?: boolean;
    upscaled: boolean;
    confined: boolean;
    percentScale?: number;
    version?: 2 | 3;
};
declare type RegionParameter = {
    x?: number;
    y?: number;
    w?: number;
    h?: number;
    full?: boolean;
    square?: boolean;
    percent?: boolean;
};
declare type RotationParameter = {
    mirror?: boolean;
    angle: number;
};
declare type ImageServiceImageRequest = {
    type: 'base';
    scheme: string;
    server: string;
    prefix: string;
    identifier: string;
} | {
    type: 'info';
    scheme: string;
    server: string;
    prefix: string;
    identifier: string;
} | {
    type: 'image';
    scheme: string;
    server: string;
    prefix: string;
    identifier: string;
    region: RegionParameter;
    size: SizeParameter;
    rotation: RotationParameter;
    quality: string;
    format: string;
    originalPath: string;
};

declare function createImageServiceRequest(imageService: ImageService): ImageServiceImageRequest;

declare function extractFixedSizeScales(width: number, height: number, sizes: ImageSize[]): number[];

declare function fixedSizesFromScales(width: number, height: number, scales: number[]): ImageSize[];

declare function getCustomSizeFromService(service: Service): ImageCandidate[];

declare function getFixedSizeFromImage(contentResource: ContentResource | string): ImageCandidate | null;

declare function getFixedSizesFromService(service: Service$1): FixedSizeImageService[];

declare function getId(resource: any): any;

declare type ImageServer = {
    root: string;
    server: string | null;
    sampledId: string;
    verifications: number;
    verified: boolean;
    preLoaded: boolean;
    malformed: boolean;
    result: {
        context: string | string[];
        resourceServiceRatio: number;
        sampledSizes: ImageSize[];
        sizeRatios: number[];
        sampledTiles: ImageTile[];
        sampledProfile: ImageProfile | ImageProfile[];
    };
};
declare type ImageServiceRequest = {
    id: string;
    width: number;
    height: number;
    source?: ImageService;
};
declare type LoadedImageService = Service & {
    real: boolean;
};
declare type ImageServiceLoaderConfig = {
    verificationsRequired: number;
    approximateServices: boolean;
    enableFetching: boolean;
    disableThrottling: boolean;
};
declare class ImageServiceLoader {
    config: ImageServiceLoaderConfig;
    fetchingCount: number;
    imageServices: {
        [k: string]: LoadedImageService;
    };
    knownImageServers: {
        [k: string]: ImageServer;
    };
    setConfig(config: Partial<ImageServiceLoaderConfig>): void;
    sample(service: Service, imageServiceRequest?: ImageServiceRequest, preLoaded?: boolean): true | Promise<boolean>;
    preLoad(server: ImageServer, forceVerify?: boolean): void;
    predict(resource: ImageServiceRequest, verify?: boolean, force?: boolean): Service | null;
    getThumbnailFromResource(unknownResource: ContentResource | undefined, request: ImageCandidateRequest, dereference?: boolean, otherCandidates?: ImageCandidate[]): Promise<{
        best: ImageCandidate | null;
        fallback: ImageCandidate[];
        log: string[];
    }>;
    getImageCandidates(unknownResource: ContentResource, dereference?: boolean): Promise<ImageCandidate[]>;
    verify(resource: ImageServiceRequest): Promise<boolean>;
    canLoadSync(service: ImageServiceRequest | Service | string): boolean;
    markAsMalformed(resource: ImageServiceRequest): Promise<Service>;
    fetchService(serviceId: string, forceFresh?: boolean): Promise<Service & {
        real: boolean;
    }>;
    fetch(input: RequestInfo, init?: RequestInit): Promise<Response>;
    loadService(resource: ImageServiceRequest, forceFresh?: boolean): Promise<Service>;
    loadServiceSync(resource: ImageServiceRequest): Service | null;
}
declare const imageServiceLoader: ImageServiceLoader;

declare function getImageCandidates(unknownResource: ContentResource, dereference: boolean | undefined, loader: ImageServiceLoader): ImageCandidate[];

declare function getImageCandidatesFromService(service: Service[]): ImageCandidate[];

declare function getImageFromTileSource(image: FixedSizeImageService, targetWidth: number, targetHeight?: number): FixedSizeImage;

declare function getImageServerFromId(url: string): string;

declare function getImageServices(resource: IIIFExternalWebResource): Service[];

declare function getSmallestScaleFactorAsSingleImage(service: Service): FixedSizeImageService | null;

declare function getType(resource: any): any;

declare function imageServiceRequestToString(req: ImageServiceImageRequest, service?: ImageService): string;

declare function imageServiceSupportsFormat(imageService: ImageService, format: string): readonly [false, "Not a valid image service"] | readonly [false, `Max area is ${number}`] | readonly [false, `Max width is ${number}`] | readonly [false, `Max height is ${number}`] | readonly [false, `Missing features: ${string}`] | readonly [false, `Missing formats: ${string}`] | readonly [false, `Missing qualities: ${string}`] | readonly [true];

declare function imageServiceSupportsRequest(imageService: ImageService, request: ImageServiceImageRequest): readonly [true] | boolean[] | readonly [false, "Not a valid image service" | `Max area is ${number}` | `Max width is ${number}` | `Max height is ${number}` | `Missing features: ${string}` | `Missing formats: ${string}` | `Missing qualities: ${string}` | undefined];

declare function inferSizeFromUrl(image: string): ImageCandidate;

declare function isBestMatch(request: Required<ImageCandidateRequest>, current: FixedSizeImage | null, candidate: FixedSizeImage): boolean;

declare function isImageService(service: any): service is ImageService;

declare function levelToProfile(levelProfile: string): Profile;

declare function parseImageServiceRequest(input: string, _prefix?: string): ImageServiceImageRequest;

declare function parseImageServiceUrl(canonicalId: string, prefix?: string): {
    scheme: string;
    server: string;
    path: string;
    prefix: string;
};

declare function parseRegionParameter(pathPart: string): RegionParameter;

declare function parseRotationParameter(pathPart: string): RotationParameter;

declare function parseSizeParameter(pathPart: string): SizeParameter;

declare function pickBestFromCandidates(inputRequest: ImageCandidateRequest, candidates: Array<() => ImageCandidate[]>): {
    best: ImageCandidate | null;
    fallback: ImageCandidate[];
    log: string[];
};

declare function regionParameterToString({ x, y, w, h, full, square, percent }: RegionParameter): string;

declare function rotationParameterToString(rotationParameter: RotationParameter): string;

declare function sampledTilesToTiles(width: number, height: number, sampledTiles: ImageTile[]): ImageTile[];

declare function sizeParameterToString({ max, percentScale, upscaled, confined, width, height, serialiseAsFull, version, }: SizeParameter): string;

declare function sizesMatch(sizesA: ImageSize[], sizesB: ImageSize[]): boolean;

declare function supports(service: Service, req: Partial<Profile> & {
    exactSize?: {
        width?: number;
        height?: number;
    };
}): readonly [false, "Not a valid image service"] | readonly [false, `Max area is ${number}`] | readonly [false, `Max width is ${number}`] | readonly [false, `Max height is ${number}`] | readonly [false, `Missing features: ${string}`] | readonly [false, `Missing formats: ${string}`] | readonly [false, `Missing qualities: ${string}`] | readonly [true];

declare function supportsCustomSizes(service: Service): boolean;

export { ExtraFeature, FixedSizeImage, FixedSizeImageService, IIIF_1_IMAGE_LEVEL_0, IIIF_1_IMAGE_LEVEL_0_PROFILE, IIIF_1_IMAGE_LEVEL_1, IIIF_1_IMAGE_LEVEL_1_PROFILE, IIIF_1_IMAGE_LEVEL_2, IIIF_1_IMAGE_LEVEL_2_PROFILE, IIIF_2_IMAGE_LEVEL_0, IIIF_2_IMAGE_LEVEL_0_NO_JSON, IIIF_2_IMAGE_LEVEL_0_PROFILE, IIIF_2_IMAGE_LEVEL_1, IIIF_2_IMAGE_LEVEL_1_NO_JSON, IIIF_2_IMAGE_LEVEL_1_PROFILE, IIIF_2_IMAGE_LEVEL_2, IIIF_2_IMAGE_LEVEL_2_NO_JSON, IIIF_2_IMAGE_LEVEL_2_PROFILE, IIIF_3_IMAGE_LEVEL_0, IIIF_3_IMAGE_LEVEL_1, IIIF_3_IMAGE_LEVEL_2, ImageCandidate, ImageCandidateRequest, ImageServer, ImageServiceImageRequest, ImageServiceLoader, ImageServiceLoaderConfig, ImageServiceRequest, Profile, RegionParameter, RotationParameter, STANFORD_IIIF_1_IMAGE_COMPLIANCE_0, STANFORD_IIIF_1_IMAGE_COMPLIANCE_1, STANFORD_IIIF_1_IMAGE_COMPLIANCE_2, STANFORD_IIIF_1_IMAGE_CONFORMANCE_0, STANFORD_IIIF_1_IMAGE_CONFORMANCE_1, STANFORD_IIIF_1_IMAGE_CONFORMANCE_2, STANFORD_IIIF_IMAGE_COMPLIANCE_0, STANFORD_IIIF_IMAGE_COMPLIANCE_1, STANFORD_IIIF_IMAGE_COMPLIANCE_2, STANFORD_IIIF_IMAGE_CONFORMANCE_0, STANFORD_IIIF_IMAGE_CONFORMANCE_1, STANFORD_IIIF_IMAGE_CONFORMANCE_2, Service, SizeParameter, UnknownSizeImage, VariableSizeImage, canonicalServiceUrl, combineProfiles, createImageServiceRequest, extraFeatures, extractFixedSizeScales, fixedSizesFromScales, getCustomSizeFromService, getFixedSizeFromImage, getFixedSizesFromService, getId, getImageCandidates, getImageCandidatesFromService, getImageFromTileSource, getImageServerFromId, getImageServices, getSmallestScaleFactorAsSingleImage, getType, imageServiceLoader, imageServiceProfiles, imageServiceRequestToString, imageServiceSupportsFormat, imageServiceSupportsRequest, inferSizeFromUrl, isBestMatch, isImageService, level0, level0Support, level1, level1Support, level2, level2Support, levelToProfile, parseImageServiceRequest, parseImageServiceUrl, parseRegionParameter, parseRotationParameter, parseSizeParameter, pickBestFromCandidates, regionParameterToString, rotationParameterToString, sampledTilesToTiles, sizeParameterToString, sizesMatch, supports, supportsCustomSizes };
