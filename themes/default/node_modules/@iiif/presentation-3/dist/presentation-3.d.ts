// Generated by dts-bundle-generator v6.13.0

/// <reference types="geojson" />

export type Required<T> = Prettify<T extends object ? {
	[P in keyof T]-?: NonNullable<T[P]>;
} : T>;
export type SomeRequired<T, K extends keyof T> = Prettify<(T extends object ? {
	[P in K]-?: NonNullable<T[P]>;
} : T) & Partial<Pick<Required<T>, Exclude<keyof T, K>>>>;
export type OmitProperties<T, K extends keyof T> = Prettify<Pick<T, Exclude<keyof T, K>>>;
export type JsonLDContext = {
	"@context"?: string | string[];
};
export type IdOrAtId<T> = {
	id: T;
} | {
	"@id": T;
};
export interface Nothing {
}
export type Union<T, U> = T | (U & Nothing);
export type LiteralUnion<T extends string> = T | Union<string, T>;
export type Prettify<T> = {
	[K in keyof T]: T[K];
} & unknown;
export type ResourceType = "Collection" | "Manifest" | "Canvas" | "Annotation" | "AnnotationPage" | "AnnotationCollection" | "Range" | "ContentResource" | "Choice" | "CanvasReference" | "Service";
export type ViewingDirection = "left-to-right" | "right-to-left" | "top-to-bottom" | "bottom-to-top";
export type SpecificationBehaviors = "auto-advance" | "continuous" | "facing-pages" | "individuals" | "multi-part" | "no-auto-advance" | "no-nav" | "no-repeat" | "non-paged" | "hidden" | "paged" | "repeat" | "sequence" | "thumbnail-nav" | "together" | "unordered";
export type SpecificationTimeMode = "trim" | "scale" | "loop";
export type TechnicalProperties = {
	/**
	 * The URI that identifies the resource. If the resource is only available embedded  within another resource (see the [terminology section][prezi30-terminology] for an explanation of "embedded"), such as a Range within a Manifest, then the URI _MAY_ be the URI of the embedding resource with a unique fragment on the end. This is not true for Canvases, which _MUST_ have their own URI without a fragment.
	 *
	 * The value _MUST_ be a string, and the value _MUST_ be an HTTP(S) URI for resources defined in this specification. If the resource is retrievable via HTTP(S), then the URI _MUST_ be the URI at which it is published. External resources, such as profiles, _MAY_ have non-HTTP(S) URIs defined by other communities.
	 *
	 * The existence of an HTTP(S) URI in the `id` property does not mean that the URI will always be dereferencable.  If the resource with the `id` property is [embedded][prezi30-terminology], it _MAY_ also be dereferenceable. If the resource is referenced (again, see the [terminology section][prezi30-terminology] for an explanation of "referenced"), it _MUST_ be dereferenceable. The [definitions of the Resources][prezi30-resource-structure] give further guidance.
	 *
	 *  * All resource types _MUST_ have the `id` property.
	 *  * Clients _MAY_ render `id` on any resource type, and _SHOULD_ render `id` on Collections, Manifests and Canvases.
	 */
	id: string;
	/**
	 *  The type or class of the resource. For classes defined for this specification, the value of `type` will be described in the sections below describing each individual class.
	 *
	 *  For content resources, the value of `type` is drawn from other specifications. Recommendations for common content types such as image, text or audio are given in the table below.
	 *
	 *  The JSON objects that appear in the value of the `service` property will have many different classes, and can be used to distinguish the sort of service, with specific properties defined in a [registered context document][prezi30-ldce].
	 *
	 *  The value _MUST_ be a string.
	 *
	 *  * All resource types _MUST_ have the `type` property.
	 *  * Clients _MUST_ process, and _MAY_ render, `type` on any resource type.
	 */
	type: ResourceType;
	/**
	 * The specific media type (often called a MIME type) for a content resource, for example `image/jpeg`. This is important for distinguishing different formats of the same overall type of resource, such as distinguishing text in XML from plain text.
	 *
	 * Note that this is different to the `formats` property in the [Image API][image-api], which gives the extension to use within that API. It would be inappropriate to use in this case, as `format` can be used with any content resource, not just images.
	 *
	 * The value _MUST_ be a string, and it _SHOULD_ be the value of the `Content-Type` header returned when the resource is dereferenced.
	 *
	 * * A content resource _SHOULD_ have the `format` property.
	 * * Clients _MAY_ render the `format` of any content resource.
	 * * Other types of resource _MUST NOT_ have the `format` property.
	 * * Clients _SHOULD_ ignore `format` on other types of resource.
	 */
	format: string;
	/**
	 *  A schema or named set of functionality available from the resource. The profile can further clarify the `type` and/or `format` of an external resource or service, allowing clients to customize their handling of the resource that has the `profile` property.
	 *
	 *  The value _MUST_ be a string, either taken from the [profiles registry][registry-profiles] or a URI.
	 *
	 *  * Resources [referenced][prezi30-terminology] by the `seeAlso` or `service` properties _SHOULD_ have the `profile` property.
	 *  * Clients _SHOULD_ process the `profile` of a service or external resource.
	 *  * Other types of resource _MAY_ have the `profile` property.
	 *  * Clients _MAY_ process the `profile` of other types of resource.
	 */
	profile: string;
	/**
	 *  The height of the Canvas or external content resource. For content resources, the value is in pixels. For Canvases, the value does not have a unit. In combination with the width, it conveys an aspect ratio for the space in which content resources are located.
	 *
	 *  The value _MUST_ be a positive integer.
	 *
	 *  * A Canvas _MAY_ have the `height` property. If it has a `height`, it _MUST_ also have a `width`.
	 *  * Clients _MUST_ process `height` on a Canvas.
	 *  * Content resources _SHOULD_ have the `height` property, with the value given in pixels, if appropriate to the resource type.
	 *  * Clients _SHOULD_ process `height` on content resources.
	 *  * Other types of resource _MUST NOT_ have the `height` property.
	 *  * Clients _SHOULD_ ignore `height` on other types of resource.
	 */
	height: number;
	/**
	 * The width of the Canvas or external content resource. For content resources, the value is in pixels. For Canvases, the value does not have a unit. In combination with the height, it conveys an aspect ratio for the space in which content resources are located.
	 *
	 * The value _MUST_ be a positive integer.
	 *
	 *  * A Canvas _MAY_ have the `width` property. If it has a `width`, it _MUST_ also have a `height`.
	 *  * Clients _MUST_ process `width` on a Canvas.
	 *  * Content resources _SHOULD_ have the `width` property, with the value given in pixels, if appropriate to the resource type.
	 *  * Clients _SHOULD_ process `width` on content resources.
	 *  * Other types of resource _MUST NOT_ have the `width` property.
	 *  * Clients _SHOULD_ ignore `width` on other types of resource.
	 */
	width: number;
	/**
	 *  The duration of the Canvas or external content resource, given in seconds.
	 *
	 *  The value _MUST_ be a positive floating point number.
	 *
	 *  * A Canvas _MAY_ have the `duration` property.
	 *  * Clients _MUST_ process `duration` on a Canvas.
	 *  * Content resources _SHOULD_ have the `duration` property, if appropriate to the resource type.
	 *  * Clients _SHOULD_ process `duration` on content resources.
	 *  * Other types of resource _MUST NOT_ have a `duration`.
	 *  * Clients _SHOULD_ ignore `duration` on other types of resource.
	 */
	duration: number;
	/**
	 *  The direction in which a set of Canvases _SHOULD_ be displayed to the user. This specification defines four direction values in the table below. Others may be defined externally [as an extension][prezi30-ldce].
	 *
	 *  The value _MUST_ be a string.
	 *
	 *  * A Collection _MAY_ have the `viewingDirection` property.<br/>
	 *  * Clients _SHOULD_ process `viewingDirection` on a Collection.
	 *  * A Manifest _MAY_ have the `viewingDirection` property.<br/>
	 *  * Clients _SHOULD_ process `viewingDirection` on a Manifest.
	 *  * A Range _MAY_ have the `viewingDirection` property.<br/>
	 *  * Clients _MAY_ process `viewingDirection` on a Range.
	 *  * Other types of resource _MUST NOT_ have the `viewingDirection` property.<br/>
	 *  * Clients _SHOULD_ ignore `viewingDirection` on other types of resource.
	 */
	viewingDirection: ViewingDirection;
	/**
	 *  A set of user experience features that the publisher of the content would prefer the client to use when presenting the resource. This specification defines the values in the table below. Others may be defined externally as an [extension][prezi30-ldce].
	 *
	 *  In order to determine the behaviors that are governing a particular resource, there are four inheritance rules from resources that reference the current resource:
	 *  * Collections inherit behaviors from their referencing Collection.
	 *  * Manifests **DO NOT** inherit behaviors from any referencing Collections.
	 *  * Canvases inherit behaviors from their referencing Manifest, but **DO NOT** inherit behaviors from any referencing Ranges, as there might be several with different behaviors.
	 *  * Ranges inherit behaviors from any referencing Range and referencing Manifest.
	 *
	 *  Clients should interpret behaviors on a Range only when that Range is selected or is in some other way the context for the user's current interaction with the resources. A Range with the `behavior` value `continuous`, in a Manifest with the `behavior` value `paged`, would mean that the Manifest's Canvases should be rendered in a paged fashion, unless the range is selected to be viewed, and its included Canvases would be rendered in that context only as being virtually stitched together. This might occur, for example, when a physical scroll is cut into pages and bound into a codex with other pages, and the publisher would like to provide the user the experience of the scroll in its original form.
	 *
	 *  The descriptions of the behavior values have a set of which other values they are disjoint with, meaning that the same resource _MUST NOT_ have both of two or more from that set. In order to determine which is in effect, the client _SHOULD_ follow the inheritance rules above, taking the value from the closest resource. The user interface effects of the possible permutations of non-disjoint behavior values are client dependent, and implementers are advised to look for relevant recipes in the [IIIF cookbook][annex-cookbook].
	 *
	 *  __Future Clarification Anticipated__<br/>
	 *  Further clarifications about the implications of interactions between behavior values should be expected in subsequent minor releases.
	 *
	 *  The value _MUST_ be an array of strings.
	 *
	 *  * Any resource type _MAY_ have the `behavior` property with at least one item.<br/>
	 *  Clients _SHOULD_ process `behavior` on any resource type.
	 *
	 *  > | Value | Description |
	 *  | ----- | ----------- |
	 *  || **Temporal Behaviors** |
	 *  | `auto-advance` | Valid on Collections, Manifests, Canvases, and Ranges that include or are Canvases with at least the `duration` dimension. When the client reaches the end of a Canvas, or segment thereof as specified in a Range, with a duration dimension that has this behavior, it _SHOULD_ immediately proceed to the next Canvas or segment and render it. If there is no subsequent Canvas in the current context, then this behavior should be ignored. When applied to a Collection, the client should treat the first Canvas of the next Manifest as following the last Canvas of the previous Manifest, respecting any `start` property specified. Disjoint with `no-auto-advance`. |
	 *  | `no-auto-advance` | Valid on Collections, Manifests, Canvases, and Ranges that include or are Canvases with at least the `duration` dimension. When the client reaches the end of a Canvas or segment with a duration dimension that has this behavior, it _MUST NOT_ proceed to the next Canvas, if any. This is a default temporal behavior if not specified. Disjoint with `auto-advance`.|
	 *  | `repeat` | Valid on Collections and Manifests, that include Canvases that have at least the `duration` dimension. When the client reaches the end of the duration of the final Canvas in the resource, and the `behavior` value `auto-advance` is also in effect, then the client _SHOULD_ return to the first Canvas, or segment of Canvas, in the resource that has the `behavior` value `repeat` and start playing again. If the `behavior` value `auto-advance` is not in effect, then the client _SHOULD_ render a navigation control for the user to manually return to the first Canvas or segment. Disjoint with `no-repeat`.|
	 *  | `no-repeat` | Valid on Collections and Manifests, that include Canvases that have at least the `duration` dimension. When the client reaches the end of the duration of the final Canvas in the resource, the client _MUST NOT_ return to the first Canvas, or segment of Canvas. This is a default temporal behavior if not specified. Disjoint with `repeat`.|
	 *  | | **Layout Behaviors** |
	 *  | `unordered` | Valid on Collections, Manifests and Ranges. The Canvases included in resources that have this behavior have no inherent order, and user interfaces _SHOULD_ avoid implying an order to the user. Disjoint with `individuals`, `continuous`, and `paged`.|
	 *  | `individuals` | Valid on Collections, Manifests, and Ranges. For Collections that have this behavior, each of the included Manifests are distinct objects in the given order. For Manifests and Ranges, the included Canvases are distinct views, and _SHOULD NOT_ be presented in a page-turning interface. This is the default layout behavior if not specified. Disjoint with `unordered`, `continuous`, and `paged`. |
	 *  | `continuous` | Valid on Collections, Manifests and Ranges, which include Canvases that have at least `height` and `width` dimensions. Canvases included in resources that have this behavior are partial views and an appropriate rendering might display all of the Canvases virtually stitched together, such as a long scroll split into sections. This behavior has no implication for audio resources. The `viewingDirection` of the Manifest will determine the appropriate arrangement of the Canvases. Disjoint with `unordered`, `individuals` and `paged`. |
	 *  | `paged` | Valid on Collections, Manifests and Ranges, which include Canvases that have at least `height` and `width` dimensions. Canvases included in resources that have this behavior represent views that _SHOULD_ be presented in a page-turning interface if one is available. The first canvas is a single view (the first recto) and thus the second canvas likely represents the back of the object in the first canvas. If this is not the case, see the `behavior` value `non-paged`. Disjoint with `unordered`, `individuals`, `continuous`, `facing-pages` and `non-paged`. |
	 *  | `facing-pages` | Valid only on Canvases, where the Canvas has at least `height` and `width` dimensions. Canvases that have this behavior, in a Manifest that has the `behavior` value `paged`, _MUST_ be displayed by themselves, as they depict both parts of the opening. If all of the Canvases are like this, then page turning is not possible, so simply use `individuals` instead. Disjoint with `paged` and `non-paged`.|
	 *  | `non-paged` | Valid only on Canvases, where the Canvas has at least `height` and `width` dimensions. Canvases that have this behavior _MUST NOT_ be presented in a page turning interface, and _MUST_ be skipped over when determining the page order. This behavior _MUST_ be ignored if the current Manifest does not have the `behavior` value `paged`. Disjoint with `paged` and `facing-pages`. |
	 *  | | **Collection Behaviors** |
	 *  | `multi-part` | Valid only on Collections. Collections that have this behavior consist of multiple Manifests or Collections which together form part of a logical whole or a contiguous set, such as multi-volume books or a set of journal issues. Clients might render these Collections as a table of contents rather than with thumbnails, or provide viewing interfaces that can easily advance from one member to the next. Disjoint with `together`.|
	 *  | `together` | Valid only on Collections. A client _SHOULD_ present all of the child Manifests to the user at once in a separate viewing area with its own controls. Clients _SHOULD_ catch attempts to create too many viewing areas. This behavior _SHOULD NOT_ be interpreted as applying to the members of any child resources. Disjoint with `multi-part`.|
	 *  | | **Range Behaviors** |
	 *  | `sequence` | Valid only on Ranges, where the Range is [referenced][prezi30-terminology] in the `structures` property of a Manifest. Ranges that have this behavior represent different orderings of the Canvases listed in the `items` property of the Manifest, and user interfaces that interact with this order _SHOULD_ use the order within the selected Range, rather than the default order of `items`. Disjoint with `thumbnail-nav` and `no-nav`.|
	 *  | `thumbnail-nav` | Valid only on Ranges. Ranges that have this behavior _MAY_ be used by the client to present an alternative navigation or overview based on thumbnails, such as regular keyframes along a timeline for a video, or sections of a long scroll. Clients _SHOULD NOT_ use them to generate a conventional table of contents. Child Ranges of a Range with this behavior _MUST_ have a suitable `thumbnail` property. Disjoint with `sequence` and `no-nav`.|
	 *  | `no-nav` | Valid only on Ranges. Ranges that have this behavior _MUST NOT_ be displayed to the user in a navigation hierarchy. This allows for Ranges to be present that capture unnamed regions with no interesting content, such as the set of blank pages at the beginning of a book, or dead air between parts of a performance, that are still part of the Manifest but do not need to be navigated to directly. Disjoint with `sequence` and `thumbnail-nav`.|
	 *  | | **Miscellaneous Behaviors** |
	 *  | `hidden` | Valid on Annotation Collections, Annotation Pages, Annotations, Specific Resources and Choices. If this behavior is provided, then the client _SHOULD NOT_ render the resource by default, but allow the user to turn it on and off. This behavior does not inherit, as it is not valid on Collections, Manifests, Ranges or Canvases. |
	 */
	behavior: Array<LiteralUnion<SpecificationBehaviors>>;
	/**
	 *  A mode associated with an Annotation that is to be applied to the rendering of any time-based media, or otherwise could be considered to have a duration, used as a body resource of that Annotation. Note that the association of `timeMode` with the Annotation means that different resources in the body cannot have different values. This specification defines the values specified in the table below. Others may be defined externally as an [extension][prezi30-ldce].
	 *
	 *  The value _MUST_ be a string.
	 *
	 *  * An Annotation _MAY_ have the `timeMode` property.<br/>
	 *  Clients _SHOULD_ process `timeMode` on an Annotation.
	 *
	 */
	timeMode: SpecificationTimeMode | string | null;
	/**
	 *  This specification defines two values for the Web Annotation property of `motivation`, or `purpose` when used on a Specific Resource or Textual Body.
	 *
	 *  While any resource _MAY_ be the `target` of an Annotation, this specification defines only motivations for Annotations that target Canvases. These motivations allow clients to determine how the Annotation should be rendered, by distinguishing between Annotations that provide the content of the Canvas, from ones with externally defined motivations which are typically comments about the Canvas.
	 *
	 *  Additional motivations may be added to the Annotation to further clarify the intent, drawn from [extensions][prezi30-ldce] or other sources. Clients _MUST_ ignore motivation values that they do not understand. Other motivation values given in the Web Annotation specification _SHOULD_ be used where appropriate, and examples are given in the [Presentation API Cookbook][annex-cookbook].
	 *
	 *  > | Value | Description |
	 *  | ----- | ----------- |
	 *  | `painting` | Resources associated with a Canvas by an Annotation that has the `motivation` value `painting`  _MUST_ be presented to the user as the representation of the Canvas. The content can be thought of as being _of_ the Canvas. The use of this motivation with target resources other than Canvases is undefined. For example, an Annotation that has the `motivation` value `painting`, a body of an Image and the target of the Canvas is an instruction to present that Image as (part of) the visual representation of the Canvas. Similarly, a textual body is to be presented as (part of) the visual representation of the Canvas and not positioned in some other part of the user interface.|
	 *  | `supplementing` | Resources associated with a Canvas by an Annotation that has the `motivation` value `supplementing`  _MAY_ be presented to the user as part of the representation of the Canvas, or _MAY_ be presented in a different part of the user interface. The content can be thought of as being _from_ the Canvas. The use of this motivation with target resources other than Canvases is undefined. For example, an Annotation that has the `motivation` value `supplementing`, a body of an Image and the target of part of the Canvas is an instruction to present that Image to the user either in the Canvas's rendering area or somewhere associated with it, and could be used to present an easier to read representation of a diagram. Similarly, a textual body is to be presented either in the targeted region of the Canvas or otherwise associated with it, and might be OCR, a manual transcription or a translation of handwritten text, or captions for what is being said in a Canvas with audio content. |
	 */
	motivation: string | null;
};
export type AuthAccessTokenService = Prettify<IdOrAtId<string> & {
	profile: "http://iiif.io/api/auth/1/token" | "AuthTokenService1";
}>;
export type AuthAccessTokenServiceResponse = {
	accessToken: string;
	expiresIn?: number;
};
export type AuthAccessTokenServiceError = {
	error: "invalidRequest" | "missingCredentials" | "invalidCredentials" | "invalidOrigin" | "unavailable";
	description?: string;
};
export type AuthAbstractService = Prettify<IdOrAtId<string> & {
	label: string;
	confirmLabel?: string;
	header?: string;
	description?: string;
	failureHeader?: string;
	failureDescription?: string;
}>;
export type AuthClickThroughService = Prettify<IdOrAtId<string> & {
	profile: "http://iiif.io/api/auth/1/clickthrough";
	service: AuthAccessTokenService;
}>;
export type AuthLogoutService = Prettify<AuthAbstractService & {
	profile: "http://iiif.io/api/auth/1/logout" | "AuthLogoutService1";
}>;
export type AuthLoginService = Prettify<AuthAbstractService & {
	profile: "http://iiif.io/api/auth/1/login" | "AuthCookieService1";
	service: Array<AuthLoginService | AuthLogoutService>;
}>;
export type AuthKioskService = Prettify<AuthAbstractService & {
	profile: "http://iiif.io/api/auth/1/kiosk";
	service: AuthAccessTokenService;
}>;
export type AuthExternalService = Prettify<AuthAbstractService & {
	profile: "http://iiif.io/api/auth/1/external";
	service: AuthAccessTokenService;
}>;
export type AuthService = AuthLoginService | AuthClickThroughService | AuthKioskService | AuthExternalService;
export type GeoJsonService = Prettify<{
	"@context": "http://geojson.org/geojson-ld/geojson-context.jsonld";
	profile: never;
} & ({
	"@id": string;
} | {
	id: string;
}) & Partial<import("geojson").GeoJSON>>;
export type ImageServiceProfile = "http://library.stanford.edu/iiif/image-api/compliance.html#level0" | "http://library.stanford.edu/iiif/image-api/compliance.html#level1" | "http://library.stanford.edu/iiif/image-api/compliance.html#level2" | "http://library.stanford.edu/iiif/image-api/conformance.html#level0" | "http://library.stanford.edu/iiif/image-api/conformance.html#level1" | "http://library.stanford.edu/iiif/image-api/conformance.html#level2" | "http://library.stanford.edu/iiif/image-api/1.1/compliance.html#level0" | "http://library.stanford.edu/iiif/image-api/1.1/compliance.html#level1" | "http://library.stanford.edu/iiif/image-api/1.1/compliance.html#level2" | "http://library.stanford.edu/iiif/image-api/1.1/conformance.html#level0" | "http://library.stanford.edu/iiif/image-api/1.1/conformance.html#level1" | "http://library.stanford.edu/iiif/image-api/1.1/conformance.html#level2" | "http://iiif.io/api/image/1/level0.json" | "http://iiif.io/api/image/1/profiles/level0.json" | "http://iiif.io/api/image/1/level1.json" | "http://iiif.io/api/image/1/profiles/level1.json" | "http://iiif.io/api/image/1/level2.json" | "http://iiif.io/api/image/1/profiles/level2.json" | "http://iiif.io/api/image/2/level0.json" | "http://iiif.io/api/image/2/profiles/level0.json" | "http://iiif.io/api/image/2/level1.json" | "http://iiif.io/api/image/2/profiles/level1.json" | "http://iiif.io/api/image/2/level2.json" | "http://iiif.io/api/image/2/profiles/level2.json" | "http://iiif.io/api/image/3/level0.json" | "http://iiif.io/api/image/3/level1.json" | "http://iiif.io/api/image/3/level2.json" | "level0" | "level1" | "level2";
/**
 * The base URI of the service will redirect to the image information document.
 */
export type BaseUriRedirect = "baseUriRedirect";
/**
 * The canonical image URI HTTP link header is provided on image responses.
 */
export type CanonicalLinkHeader = "canonicalLinkHeader";
/**
 * The CORS HTTP headers are provided on all responses.
 */
export type Cors = "cors";
/**
 * The JSON-LD media type is provided when requested.
 */
export type JsonldMediaType = "jsonldMediaType";
/**
 * The image may be rotated around the vertical axis, resulting in a left-to-right mirroring of the content.
 */
export type Mirroring = "mirroring";
/**
 * The profile HTTP link header is provided on image responses.
 */
export type ProfileLinkHeader = "profileLinkHeader";
/**
 * Regions of the full image may be requested by percentage.
 */
export type RegionByPct = "regionByPct";
/**
 * Regions of the full image may be requested by pixel dimensions.
 */
export type RegionByPx = "regionByPx";
/**
 * A square region may be requested, where the width and height are equal to the shorter dimension of the full image.
 */
export type RegionSquare = "regionSquare";
/**
 * Image rotation may be requested using values other than multiples of 90 degrees.
 */
export type RotationArbitrary = "rotationArbitrary";
/**
 * Image rotation may be requested in multiples of 90 degrees.
 */
export type RotationBy90s = "rotationBy90s";
/**
 * Image size may be requested in the form !w,h.
 */
export type SizeByConfinedWh = "sizeByConfinedWh";
/**
 * Image size may be requested in the form ,h.
 */
export type SizeByH = "sizeByH";
/**
 * Images size may be requested in the form pct:n.
 */
export type SizeByPct = "sizeByPct";
/**
 * Image size may be requested in the form w,.
 */
export type SizeByW = "sizeByW";
/**
 * Image size may be requested in the form w,h.
 */
export type SizeByWh = "sizeByWh";
/**
 * Image sizes prefixed with ^ may be requested.
 */
export type SizeUpscaling = "sizeUpscaling";
export type Image3ExtraFeatures = BaseUriRedirect | CanonicalLinkHeader | Cors | JsonldMediaType | Mirroring | ProfileLinkHeader | RegionByPct | RegionByPx | RegionSquare | RotationArbitrary | RotationBy90s | SizeByConfinedWh | SizeByH | SizeByPct | SizeByW | SizeByWh | SizeUpscaling;
/**
 * The JSON objects in the sizes array have the properties in the following table. Image requests for these sizes
 * should have a region parameter of full, size parameter in the canonical w,h form, and rotation of 0. Thus, the full
 * URL for an image with default quality in jpg format would be:
 *   {scheme}://{server}/{prefix}/{identifier}/full/{width},{height}/0/default.jpg
 */
export type ImageSize = {
	/**
	 * The type of the object. If present, the value must be the string Size.
	 */
	type?: "Size";
	/**
	 * The width in pixels of the image to be requested, given as an integer.
	 */
	width: number;
	/**
	 * The height in pixels of the image to be requested, given as an integer.
	 */
	height: number;
};
/**
 * An array of JSON objects describing the parameters to use to request regions of the image (tiles) that are efficient
 * for the server to deliver. Each description gives a width, optionally a height for non-square tiles, and a set of
 * scale factors at which tiles of those dimensions are available.
 */
export type ImageTile = {
	/**
	 * The type of the object. If present, the value must be the string Tile.
	 */
	type?: "Tile";
	/**
	 * The set of resolution scaling factors for the image’s predefined tiles, expressed as positive integers by which to
	 * divide the full size of the image. For example, a scale factor of 4 indicates that the service can efficiently
	 * deliver images at 1/4 or 25% of the height and width of the full image. A particular scale factor value should
	 * appear only once in the tiles array.
	 */
	scaleFactors: number[];
	/**
	 * The width in pixels of the predefined tiles to be requested, given as an integer.
	 */
	width: number;
	/**
	 * The height in pixels of the predefined tiles to be requested, given as an integer. If it is not specified in the
	 * JSON, then it defaults to the same as width, resulting in square tiles.
	 */
	height?: number;
	/**
	 * Optional and non-standard property. The maximum width of the image.
	 */
	maxWidth?: number;
	/**
	 * Optional and non-standard property. The maximum height of the image.
	 */
	maxHeight?: number;
};
export type ImageProfile = ImageServiceProfile | {
	"@context"?: string;
	"@type"?: "iiif:ImageProfile";
	type?: "ImageProfile";
	formats?: string[];
	qualities?: string[];
	supports?: string[];
	maxArea?: number;
	maxHeight?: number;
	maxWidth?: number;
};
export interface ImageService2 {
	"@context"?: string | string[];
	"@id": string;
	"@type": "ImageService2";
	profile: ImageProfile | ImageProfile[];
	protocol?: string;
	width?: number | null;
	height?: number | null;
	attribution?: string;
	sizes?: ImageSize[];
	tiles?: ImageTile[];
	logo?: ContentResource | ContentResource[]; // Presentation 2 service may have non-array.
	service?: Service[];
}
export interface ImageService3 {
	/**
	 * The @context property should appear as the very first key-value pair of the JSON representation. Its value must be
	 * either the URI http://iiif.io/api/image/3/context.json or a JSON array with the URI
	 * http://iiif.io/api/image/3/context.json as the last item. The @context tells Linked Data processors how to
	 * interpret the image information. If extensions are used then their context definitions should be included in
	 * this top-level @context property.
	 */
	"@context"?: string | string[];
	/**
	 * The base URI of the image as defined in URI Syntax, including scheme, server, prefix and identifier without a
	 * trailing slash.
	 */
	id: string;
	/**
	 * The type for the Image API. The value must be the string ImageService3.
	 */
	type: "ImageService3";
	/**
	 * A string indicating the highest compliance level which is fully supported by the service. The value must be one of
	 * level0, level1, or level2.
	 */
	profile: "level0" | "level1" | "level2";
	/**
	 * The URI http://iiif.io/api/image which can be used to determine that the document describes an image service which
	 * is a version of the IIIF Image API.
	 */
	protocol?: string;
	/**
	 * The width in pixels of the full image, given as an integer.
	 */
	width?: number | null;
	/**
	 * The height in pixels of the full image, given as an integer.
	 */
	height?: number | null;
	/**
	 * The maximum width in pixels supported for this image. Clients must not expect requests with a width greater than
	 * this value to be supported. maxWidth must be specified if maxHeight is specified.
	 */
	maxWidth?: number | null;
	/**
	 * The maximum height in pixels supported for this image. Clients must not expect requests with a height greater than
	 * this value to be supported. If maxWidth is specified and maxHeight is not, then clients should infer that
	 * maxHeight = maxWidth.
	 */
	maxHeight?: number | null;
	/**
	 * The maximum area in pixels supported for this image. Clients must not expect requests with a width*height greater
	 * than this value to be supported.
	 */
	maxArea?: number | null;
	/**
	 * Attribution.
	 */
	attribution?: string;
	/**
	 * A string that identifies a license or rights statement that applies to the content of this image. The value of this
	 * property must be a string drawn from the set of Creative Commons license URIs, the RightsStatements.org rights
	 * statement URIs, or those added via the Registry of Known Extensions mechanism. The inclusion of this property is
	 * informative, and for example could be used to display an icon representing the rights assertions.
	 */
	rights?: string;
	/**
	 * An array of JSON objects with the height and width properties. These sizes specify preferred values to be provided
	 * in the w,h syntax of the size request parameter for scaled versions of the full image. In the case of servers that
	 * do not support requests for arbitrary sizes, these may be the only sizes available. A request constructed with the
	 * w,h syntax using these sizes must be supported by the server, even if arbitrary width and height are not.
	 */
	sizes?: ImageSize[];
	/**
	 * An array of JSON objects describing the parameters to use to request regions of the image (tiles) that are efficient
	 * for the server to deliver. Each description gives a width, optionally a height for non-square tiles, and a set of
	 * scale factors at which tiles of those dimensions are available.
	 */
	tiles?: ImageTile[];
	/**
	 * Legacy.
	 * @deprecated
	 */
	logo?: ContentResource[]; // Presentation 2 service may have non-array.
	/**
	 * An array of strings that are the preferred format parameter values, arranged in order of preference. The format
	 * parameter values listed must be among those specified in the referenced profile or listed in the extraFormats
	 * property
	 */
	extraFormats?: string[];
	/**
	 * An array of strings that can be used as the quality parameter, in addition to default.
	 */
	extraQualities?: string[];
	/**
	 * An array of strings identifying features supported by the service, in addition to the ones specified in the
	 * referenced profile. These strings are defined either in the table below or by registering an extension.
	 */
	extraFeatures?: Image3ExtraFeatures[];
	/**
	 * Optional services
	 */
	service?: Service[];
}
export interface ImageService {
	/**
	 * The @context property should appear as the very first key-value pair of the JSON representation. Its value must be
	 * either the URI http://iiif.io/api/image/3/context.json or a JSON array with the URI
	 * http://iiif.io/api/image/3/context.json as the last item. The @context tells Linked Data processors how to
	 * interpret the image information. If extensions are used then their context definitions should be included in
	 * this top-level @context property.
	 */
	"@context"?: string | string[];
	"@id"?: string;
	id: string;
	type?: "ImageService1" | "ImageService2" | "ImageService3";
	"@type"?: "ImageService1" | "ImageService2" | "ImageService3";
	profile: ImageProfile | ImageProfile[];
	protocol?: string;
	width?: number | null;
	height?: number | null;
	maxWidth?: number | null;
	maxHeight?: number | null;
	maxArea?: number | null;
	attribution?: string;
	/**
	 * An array of JSON objects with the height and width properties. These sizes specify preferred values to be provided
	 * in the w,h syntax of the size request parameter for scaled versions of the full image. In the case of servers that
	 * do not support requests for arbitrary sizes, these may be the only sizes available. A request constructed with the
	 * w,h syntax using these sizes must be supported by the server, even if arbitrary width and height are not.
	 */
	sizes?: ImageSize[];
	/**
	 * An array of JSON objects describing the parameters to use to request regions of the image (tiles) that are efficient
	 * for the server to deliver. Each description gives a width, optionally a height for non-square tiles, and a set of
	 * scale factors at which tiles of those dimensions are available.
	 */
	tiles?: ImageTile[];
	logo?: ContentResource[]; // Presentation 2 service may have non-array.
	extraFormats?: string[];
	extraQualities?: string[];
	extraFeatures?: string[];
	service?: Service[];
}
export type SearchService = IdOrAtId<string> & {
	"@context": "http://iiif.io/api/search/1/context.json";
	profile: "http://iiif.io/api/search/1/search" | "SearchService1";
};
export type SearchServiceQueryParams = {
	q?: string;
	motivation?: string;
	date?: string;
	user?: string;
};
export type SearchServiceAutocomplete = Prettify<IdOrAtId<string> & {
	profile: "http://iiif.io/api/search/1/autocomplete" | "AutoCompleteService1";
}>;
export type SearchServiceAutocompleteQueryParams = Prettify<SearchServiceQueryParams & {
	q: string;
	min?: number;
}>;
export type SearchServiceAutocompleteResponse = Prettify<IdOrAtId<string> & {
	"@context": "http://iiif.io/api/search/1/context.json";
	"@type": "search:TermList";
	ignored: string[];
	terms: Array<{
		match: string;
		url: string;
		count?: number;
		label?: string;
	}>;
}>;
export type SearchServiceSearchResponse = {
	"@context": "http://iiif.io/api/presentation/3/context.json" | string[];
	"@id": string;
	"@type": "sc:AnnotationList";
	resources: Array<{
		"@id": string;
		"@type": "oa:Annotation";
		motivation: string;
		resource: SearchServiceCommonResources | any; // this is broad.
		on: SearchServiceSearchCommonSelectors | any | Array<SearchServiceSearchCommonSelectors> | Array<any>;
		hits?: Array<{
			"@type": "search:Hit";
			annotations: string[];
			selectors: Array<SearchServiceCommonHitSelectors>;
			match?: string;
			before?: string;
			after?: string;
		}>;
	}>;
};
export type SearchServiceCommonHitSelectors = {
	"@type": "oa:TextQuoteSelector";
	exact: string;
	prefix?: string;
	suffix?: string;
};
export type SearchServiceSearchCommonSelectors = string | {
	"@id": string;
	within: {
		"@id": string;
		type: string;
		label: string;
	};
};
export type SearchServiceCommonResources = {
	"@type": "cnt:ContentAsText";
	chars: string;
};
export type Service = AuthService | GeoJsonService | ImageService | SearchService;
export type IIIFExternalWebResource = Prettify<ExternalWebResource & {
	type: ExternalResourceTypes | string;
	height?: number;
	width?: number;
	service?: Service[];
	duration?: number;
}>;
export type ContentResourceString = string;
export type ContentResource = EmbeddedResource | ExternalWebResource | SpecificResource | IIIFExternalWebResource;
export type ResourceProvider = {
	id: string;
	type: "Agent";
	label: InternationalString;
	homepage?: ContentResource[];
	logo?: ContentResource[];
	seeAlso?: ContentResource[];
};
export type Reference<T = string> = Prettify<{
	type: T;
	id: string;
}>;
export type PolyEntity = Reference | string;
export type LinkingProperties = {
	/**
	 * A machine-readable resource such as an XML or RDF description that is related to the current resource that has the
	 * seeAlso property. Properties of the resource should be given to help the client select between multiple
	 * descriptions (if provided), and to make appropriate use of the document. If the relationship between the resource
	 * and the document needs to be more specific, then the document should include that relationship rather than the
	 * IIIF resource. Other IIIF resources are also valid targets for seeAlso, for example to link to a Manifest that
	 * describes a related object. The URI of the document must identify a single representation of the data in a
	 * particular format. For example, if the same data exists in JSON and XML, then separate resources should be added
	 * for each representation, with distinct id and format properties.
	 *
	 *
	 * The value must be an array of JSON objects. Each item must have the id and type properties, and should have the
	 * label, format and profile properties.
	 *
	 *
	 *   * Any resource type may have the seeAlso property with at least one item.
	 *  *  Clients may process seeAlso on any resource type.
	 */
	seeAlso: ContentResource[];
	/**
	 * A service that the client might interact with directly and gain additional information or functionality for using
	 * the resource that has the service property, such as from an Image to the base URI of an associated IIIF Image API
	 * service. The service resource should have additional information associated with it in order to allow the client
	 * to determine how to make appropriate use of it. Please see the Service Registry document for the details of
	 * currently known service types.
	 *
	 *
	 * The value must be an array of JSON objects. Each object will have properties depending on the service’s definition,
	 * but must have either the id or @id and type or @type properties. Each object should have a profile property.
	 *
	 *
	 * Any resource type may have the service property with at least one item.
	 * Clients may process service on any resource type, and should process the IIIF Image API service.
	 *
	 *
	 * Implementations should be prepared to recognize the @id and @type property names used by older specifications, as
	 * well as id and type. Note that the @context key should not be present within the service, but instead included at
	 * the beginning of the document. The example below includes both version 2 and version 3 IIIF Image API services.
	 */
	service: Service[];
	/**
	 * A list of one or more service definitions on the top-most resource of the document, that are typically shared by
	 * more than one subsequent resource. This allows for these shared services to be collected together in a single
	 * place, rather than either having their information duplicated potentially many times throughout the document,
	 * or requiring a consuming client to traverse the entire document structure to find the information. The resource
	 * that the service applies to must still have the service property, as described above, where the service resources
	 * have at least the id and type or @id and @type properties. This allows the client to know that the service applies
	 * to that resource. Usage of the services property is at the discretion of the publishing system.
	 *
	 *
	 * A client encountering a service property where the definition consists only of an id and type should then check
	 * the services property on the top-most resource for an expanded definition. If the service is not present in the
	 * services list, and the client requires more information in order to use the service, then it should dereference
	 * the id (or @id) of the service in order to retrieve a service description.
	 *
	 *
	 * The value must be an array of JSON objects. Each object must a service resource, as described above.
	 *
	 *
	 * A Collection may have the services property, if it is the topmost Collection in a response document.
	 * Clients should process services on a Collection.
	 * A Manifest may have the services property.
	 * Clients should process services on a Manifest.
	 */
	services: Service[];
	/**
	 * A resource that is an alternative, non-IIIF representation of the resource that has the rendering property. Such
	 * representations typically cannot be painted onto a single Canvas, as they either include too many views, have
	 * incompatible dimensions, or are compound resources requiring additional rendering functionality. The rendering
	 * resource must be able to be displayed directly to a human user, although the presentation may be outside of the
	 * IIIF client. The resource must not have a splash page or other interstitial resource that mediates access to it.
	 * If access control is required, then the IIIF Authentication API is recommended. Examples include a rendering of a
	 * book as a PDF or EPUB, a slide deck with images of a building, or a 3D model of a statue.
	 *
	 *
	 * The value must be an array of JSON objects. Each item must have the id, type and label properties, and should
	 * have a format property.
	 *
	 *
	 *   * Any resource type may have the rendering property with at least one item.
	 *   * Clients should render rendering on a Collection, Manifest or Canvas, and may render rendering on other types of resource.
	 */
	rendering: ContentResource[];
	/**
	 * A containing resource that includes the resource that has the partOf property. When a client encounters the partOf
	 * property, it might retrieve the referenced containing resource, if it is not embedded in the current
	 * representation, in order to contribute to the processing of the contained resource. For example, the partOf
	 * property on a Canvas can be used to reference an external Manifest in order to enable the discovery of further
	 * relevant information. Similarly, a Manifest can reference a containing Collection using partOf to aid in
	 * navigation.
	 *
	 *
	 * The value must be an array of JSON objects. Each item must have the id and type properties, and should have the
	 * label property.
	 *
	 *   * Any resource type may have the partOf property with at least one item
	 *   * Clients may render partOf on any resource type.
	 */
	partOf: Array<ContentResource | Canvas | AnnotationCollection | Reference<"Manifest"> | Reference<"Collection">>;
	/**
	 * A Canvas, or part of a Canvas, which the client should show on initialization for the resource that has the start
	 * property. The reference to part of a Canvas is handled in the same way that Ranges reference parts of Canvases.
	 * This property allows the client to begin with the first Canvas that contains interesting content rather than
	 * requiring the user to manually navigate to find it.
	 *
	 *
	 * The value must be a JSON object, which must have the id and type properties. The object must be either a Canvas
	 * (as in the first example below), or a Specific Resource with a Selector and a source property where the value is
	 * a Canvas (as in the second example below).
	 *
	 *   * A Manifest may have the start property.
	 *   * Clients should process start on a Manifest.
	 *   * A Range may have the start property.
	 *   * Clients should process start on a Range.
	 *   * Other types of resource must not have the start property.
	 *   * Clients should ignore start on other types of resource.
	 */
	start: Prettify<Omit<Canvas, "start">> | SpecificResource<Reference<"Canvas">> | Reference<"Canvas"> | null;
	/**
	 * A link from this Range to an Annotation Collection that includes the supplementing Annotations of content
	 * resources for the Range. Clients might use this to present additional content to the user from a different
	 * Canvas when interacting with the Range, or to jump to the next part of the Range within the same Canvas. For
	 * example, the Range might represent a newspaper article that spans non-sequential pages, and then uses the
	 * supplementary property to reference an Annotation Collection that consists of the Annotations that record the
	 * text, split into Annotation Pages per newspaper page. Alternatively, the Range might represent the parts of a
	 * manuscript that have been transcribed or translated, when there are other parts that have yet to be worked on.
	 * The Annotation Collection would be the Annotations that transcribe or translate, respectively.
	 *
	 *
	 * The value must be a JSON object, which must have the id and type properties, and the type must be
	 * {@link AnnotationCollection}.
	 *
	 *
	 *   * A Range may have the supplementary property.
	 *   * Clients may process supplementary on a Range.
	 *   * Other types of resource must not have the supplementary property.
	 *   * Clients should ignore supplementary on other types of resource.
	 */
	supplementary: ContentResource[];
	/**
	 * @deprecated since 3.0-beta - use provider.logo
	 */
	logo: ContentResource[];
	/**
	 * A web page that is about the object represented by the resource that has the homepage property. The web page is
	 * usually published by the organization responsible for the object, and might be generated by a content management
	 * system or other cataloging system. The resource must be able to be displayed directly to the user. Resources that
	 * are related, but not home pages, must instead be added into the metadata property, with an appropriate label or
	 * value to describe the relationship.
	 *
	 *
	 * The value of this property must be an array of JSON objects, each of which must have the id, type, and label
	 * properties, should have a format property, and may have the language property.
	 *
	 *
	 *   * Any resource type may have the homepage property.
	 *   * Clients should render homepage on a Collection, Manifest or Canvas, and may render homepage on other types of resource.
	 */
	homepage: ContentResource[];
};
/**
 * Nav place
 *
 * See: https://iiif.io/api/extension/navplace/
 */
export interface NavPlaceExtension {
	/**
	 * Nav place
	 *
	 * The navPlace property identifies a single or multiple geographic areas pertinent to a resource using a GeoJSON
	 * Feature Collection containing one or more Features. These areas should be bounded discrete areas of the map akin
	 * to extents. These areas do not imply any level of accuracy, temporality, or state of existence.
	 *
	 * See: https://iiif.io/api/extension/navplace/
	 */
	navPlace?: Prettify<import("geojson").GeoJSON>;
}
export type CollectionItems = {
	id: string;
	type: "Collection" | "Manifest";
	label?: InternationalString;
	summary?: InternationalString;
	metadata?: DescriptiveProperties["metadata"];
	homepage?: LinkingProperties["homepage"];
	thumbnail?: DescriptiveProperties["thumbnail"];
};
export type CollectionOmittedTechnical = "format" | "profile" | "height" | "width" | "duration" | "timeMode" | "motivation";
export type CollectionOmittedDescriptive = "language";
export type CollectionOmittedStructural = "structures";
export type CollectionOmittedLinking = "start" | "supplementary";
export type CollectionTechnical = OmitProperties<TechnicalProperties, CollectionOmittedTechnical>;
export type CollectionDescriptive = OmitProperties<DescriptiveProperties, CollectionOmittedDescriptive>;
export type CollectionStructural = OmitProperties<StructuralProperties<CollectionItems>, CollectionOmittedStructural>;
export type CollectionLinking = OmitProperties<LinkingProperties, CollectionOmittedLinking>;
export interface _Collection extends SomeRequired<CollectionTechnical, "id" | "type">, SomeRequired<CollectionDescriptive, "label">, SomeRequired<CollectionStructural, "items">, Partial<CollectionLinking>, NavPlaceExtension, JsonLDContext {
	type: "Collection";
}
export type Collection = Prettify<_Collection>;
export type CollectionItemSchemas = "Collection" | "Manifest";
export type AnnotationCollectionOmittedTechnical = "type" | "format" | "profile" | "height" | "width" | "duration" | "viewingDirection" | "timeMode" | "motivation";
export type AnnotationCollectionOmittedDescriptive = "accompanyingCanvas" | "placeholderCanvas" | "navDate" | "language";
export type AnnotationCollectionOmittedLinking = "services" | "partOf" | "start" | "supplementary";
export type AnnotationCollectionTechnical = OmitProperties<TechnicalProperties, AnnotationCollectionOmittedTechnical>;
export type AnnotationCollectionDescriptive = OmitProperties<DescriptiveProperties, AnnotationCollectionOmittedDescriptive>;
export type AnnotationCollectionLinking = OmitProperties<LinkingProperties, AnnotationCollectionOmittedLinking>;
export type W3CAnnotationCollection = {
	"@context"?: string;
	id: string;
	type: "AnnotationCollection";
	label: string | string[];
	total?: number;
	first?: string | OmitProperties<W3CAnnotationPage, "partOf">;
	last?: string | OmitProperties<W3CAnnotationPage, "partOf">;
};
export type AnnotationCollection = Prettify<SomeRequired<AnnotationCollectionTechnical, "id"> & Partial<AnnotationCollectionDescriptive> & Partial<AnnotationCollectionLinking> & OmitProperties<W3CAnnotationCollection, "label"> & {
	type: "AnnotationCollection";
	partOf: Array<CollectionItems | string>;
}>;
export type AnnotationPageOmittedTechnical = "type" | "format" | "profile" | "height" | "width" | "duration" | "viewingDirection" | "timeMode" | "motivation";
export type AnnotationPageOmittedDescriptive = "accompanyingCanvas" | "placeholderCanvas" | "navDate" | "language";
export type AnnotationPageOmittedLinking = "services" | "partOf" | "start" | "supplementary";
export type AnnotationPageOmittedStructural = "annotations" | "structures";
export type AnnotationPageTechnical = OmitProperties<TechnicalProperties, AnnotationPageOmittedTechnical>;
export type AnnotationPageDescriptive = OmitProperties<DescriptiveProperties, AnnotationPageOmittedDescriptive>;
export type AnnotationPageLinking = OmitProperties<LinkingProperties, AnnotationPageOmittedLinking>;
export type AnnotationPageStructural = OmitProperties<StructuralProperties<Annotation>, AnnotationPageOmittedStructural>;
export type W3CAnnotationPage = {
	"@context"?: string;
	type: "AnnotationPage";
	partOf?: SomeRequired<W3CAnnotationCollection, "id"> | string;
	items?: Annotation[];
	next?: string;
	prev?: string;
	startIndex?: number;
};
export type AnnotationPage = Prettify<SomeRequired<AnnotationPageTechnical, "id"> & Partial<AnnotationPageDescriptive> & Partial<AnnotationPageLinking> & Partial<AnnotationPageStructural> & SomeRequired<OmitProperties<W3CAnnotationPage, "partOf" | "items">, "type"> & {
	type: "AnnotationPage";
	partOf?: Array<Prettify<SomeRequired<AnnotationCollection, "id">>>;
}>;
export type RangeItems = Range | Canvas | string | SpecificResource<Reference<"Canvas">>;
export type RangeOmittedTechnical = "format" | "profile" | "height" | "width" | "duration" | "timeMode" | "motivation";
export type RangeOmittedDescriptive = "language";
export type RangeOmittedStructural = "structures";
export type RangeOmittedLinking = "services";
export type RangeTechnical = OmitProperties<TechnicalProperties, RangeOmittedTechnical>;
export type RangeDescriptive = OmitProperties<DescriptiveProperties, RangeOmittedDescriptive>;
export type RangeStructural = OmitProperties<StructuralProperties<RangeItems>, RangeOmittedStructural>;
export type RangeLinking = OmitProperties<LinkingProperties, RangeOmittedLinking>;
export interface _Range extends SomeRequired<RangeTechnical, "id" | "type">, SomeRequired<RangeDescriptive, "label">, Partial<RangeStructural>, NavPlaceExtension, Partial<RangeLinking> {
	type: "Range";
}
export type Range = Prettify<_Range>;
/**
 * These properties define the structure of the object being represented in IIIF by allowing the inclusion of child
 * resources within parents, such as a Canvas within a Manifest, or a Manifest within a Collection. The majority of
 * cases use items, however there are two special cases for different sorts of structures.
 */
export type StructuralProperties<T> = {
	/**
	 * Much of the functionality of the IIIF Presentation API is simply recording the order in which child resources
	 * occur within a parent resource, such as Collections or Manifests within a parent Collection, or Canvases within
	 * a Manifest. All of these situations are covered with a single property, items.
	 *
	 * The value must be an array of JSON objects. Each item must have the id and type properties. The items will be
	 * resources of different types, as described below.
	 *
	 *   * A Collection must have the items property. Each item must be either a Collection or a Manifest.
	 *   * Clients must process items on a Collection.
	 *   * A Manifest must have the items property with at least one item. Each item must be a Canvas.
	 *   * Clients must process items on a Manifest.
	 *   * A Canvas should have the items property with at least one item. Each item must be an Annotation Page.
	 *   * Clients must process items on a Canvas.
	 *   * An Annotation Page should have the items property with at least one item. Each item must be an Annotation.
	 *   * Clients must process items on an Annotation Page.
	 *   * A Range must have the items property with at least one item. Each item must be a Range, a Canvas or a Specific Resource where the source is a Canvas.
	 *   * Clients should process items on a Range.
	 *   * Other types of resource must not have the items property.
	 *   * Clients should ignore items on other types of resource.
	 */
	items: T[];
	/**
	 * An ordered list of Annotation Pages that contain commentary or other Annotations about this resource, separate
	 * from the Annotations that are used to paint content on to a Canvas. The motivation of the Annotations must not
	 * be painting, and the target of the Annotations must include this resource or part of it.
	 *
	 * The value must be an array of JSON objects. Each item must have at least the id and type properties.
	 *
	 *   * A Collection may have the annotations property with at least one item.
	 *   * Clients should process annotations on a Collection.
	 *   * A Manifest may have the annotations property with at least one item.
	 *   * Clients should process annotations on a Manifest,.
	 *   * A Canvas may have the annotations property with at least one item.
	 *   * Clients should process annotations on a Canvas.
	 *   * A Range may have the annotations property with at least one item.
	 *   * Clients should process annotations on a Range.
	 *   * A content resource may have the annotations property with at least one item.
	 *   * Clients should process annotations on a content resource.
	 *   * Other types of resource must not have the annotations property.
	 *   * Clients should ignore annotations on other types of resource.
	 */
	annotations: AnnotationPage[];
	/**
	 * The structure of an object represented as a Manifest can be described using a hierarchy of Ranges. Ranges can be
	 * used to describe the “table of contents” of the object or other structures that the user can interact with beyond
	 * the order given by the items property of the Manifest. The hierarchy is built by nesting the child Range resources
	 * in the items array of the higher level Range. The top level Ranges of these hierarchies are given in the
	 * structures property.
	 *
	 * The value must be an array of JSON objects. Each item must have the id and type properties, and the type must be
	 * Range.
	 *
	 *  * A Manifest may have the structures property.
	 *  * Clients should process structures on a Manifest. The first hierarchy should be presented to the user by default, and further hierarchies should be able to be selected as alternative structures by the user.
	 *  * Other types of resource must not have the structures property.
	 *  * Clients should ignore structures on other types of resource.
	 */
	structures: Range[];
};
export type CanvasItems = AnnotationPage;
export type CanvasOmittedTechnical = "format" | "profile" | "viewingDirection" | "timeMode" | "motivation";
export type CanvasOmittedDescriptive = "language";
export type CanvasOmittedLinking = "services" | "start" | "supplementary";
export type CanvasOmittedStructural = "structures";
export type CanvasTechnical = OmitProperties<TechnicalProperties, CanvasOmittedTechnical>;
export type CanvasDescriptive = OmitProperties<DescriptiveProperties, CanvasOmittedDescriptive>;
export type CanvasStructural = OmitProperties<StructuralProperties<CanvasItems>, CanvasOmittedStructural>;
export type CanvasLinking = OmitProperties<LinkingProperties, CanvasOmittedLinking>;
export type Canvas = Prettify<SomeRequired<CanvasTechnical, "id" | "type"> & Partial<CanvasDescriptive> & Partial<CanvasStructural> & Partial<CanvasLinking> & JsonLDContext & {
	type: "Canvas";
}>;
export type CanvasItemSchemas = "AnnotationPage";
export type InternationalString = {
	[language: string]: string[] | undefined;
};
export type MetadataItem = {
	label: InternationalString;
	value: InternationalString;
};
export type DescriptiveProperties = {
	/**
	 * Label
	 *
	 *   - A human-readable label, name or title. The label property is intended to be displayed as a short, textual surrogate for the resource if a human needs to make a distinction between it and similar resources, for example between objects, pages, or options for a choice of images to display. The label property can be fully internationalized, and each language can have multiple values. This pattern is described in more detail in the {@link InternationalString} section.
	 *  The value of the property must be a JSON object, as described in the {@link InternationalString} section.
	 *
	 *   - A {@link Collection} must have the label property with at least one entry.
	 *   - Clients must render label on a Collection.
	 *   - A {@link Manifest} must have the label property with at least one entry.
	 *   - Clients must render label on a Manifest.
	 *   - A {@link Canvas} should have the label property with at least one entry.
	 *   - Clients must render label on a Canvas, and should generate a label for Canvases that do not have them.
	 *   - A {@link ContentResource} may have the label property with at least one entry. If there is a Choice of content resource for the same Canvas, then they should each have at least the label property with at least one entry.
	 *   - Clients may render label on content resources, and should render them when part of a Choice.
	 *   - A {@link Range} should have the label property with at least one entry.
	 *   - Clients must render label on a Range.
	 *   - An {@link AnnotationCollection} should have the label property with at least one entry.
	 *   - Clients should render label on an {@link AnnotationCollection}.
	 *   - Other types of resource may have the label property with at least one entry.
	 *   - Clients may render label on other types of resource.
	 *
	 */
	label: InternationalString | null;
	/**
	 * Metadata
	 *
	 * An ordered list of descriptions to be displayed to the user when they interact with the resource, given as pairs of human readable `label` and `value` entries. The content of these entries is intended for presentation only; descriptive semantics _SHOULD NOT_ be inferred. An entry might be used to convey information about the creation of the object, a physical description, ownership information, or other purposes.
	 *
	 * The value of the `metadata` property _MUST_ be an array of JSON objects, where each item in the array has both `label` and `value` properties. The values of both `label` and `value` _MUST_ be JSON objects, as described in the {@link InternationalString} section.
	 *
	 *   * A {@link Collection} _SHOULD_ have the `metadata` property with at least one item.
	 *   * Clients _MUST_ render `metadata` on a Collection.
	 *   * A {@link Manifest} _SHOULD_ have the `metadata` property with at least one item.
	 *   * Clients _MUST_ render `metadata` on a Manifest.
	 *   * A {@link Canvas} _MAY_ have the `metadata` property with at least one item.
	 *   * Clients _SHOULD_ render `metadata` on a Canvas.
	 *   * Other types of resource _MAY_ have the `metadata` property with at least one item.
	 *   * Clients _MAY_ render `metadata` on other types of resource.
	 *
	 *   Clients _SHOULD_ display the entries in the order provided. Clients _SHOULD_ expect to encounter long texts in the `value` property, and render them appropriately, such as with an expand button, or in a tabbed interface.
	 */
	metadata: MetadataItem[];
	/**
	 * Summary
	 *
	 * A short textual summary intended to be conveyed to the user when the `metadata` entries for the resource are not being displayed. This could be used as a brief description for item level search results, for small-screen environments, or as an alternative user interface when the `metadata` property is not currently being rendered. The `summary` property follows the same pattern as the `label` property described above.
	 *
	 * The value of the property _MUST_ be a JSON object, as described in the {@link InternationalString} section.
	 *
	 *   * A {@link Collection} _SHOULD_ have the `summary` property with at least one entry.
	 *   * Clients _SHOULD_ render `summary` on a Collection.
	 *   * A {@link Manifest} _SHOULD_ have the `summary` property with at least one entry.
	 *   * Clients _SHOULD_ render `summary` on a Manifest.
	 *   * A {@link Canvas} _MAY_ have the `summary` property with at least one entry.
	 *   * Clients _SHOULD_ render `summary` on a Canvas.
	 *   * Other types of resource _MAY_ have the `summary` property with at least one entry.
	 *   * Clients _MAY_ render `summary` on other types of resource.
	 */
	summary: InternationalString | null;
	/**
	 * Required statement
	 *
	 * Text that _MUST_ be displayed when the resource is displayed or used. For example, the `requiredStatement` property could be used to present copyright or ownership statements, an acknowledgement of the owning and/or publishing institution, or any other text that the publishing organization deems critical to display to the user. Given the wide variation of potential client user interfaces, it will not always be possible to display this statement to the user in the client's initial state. If initially hidden, clients _MUST_ make the method of revealing it as obvious as possible.
	 *
	 *    The value of the property _MUST_ be a JSON object, that has the `label` and `value` properties, in the same way as a `metadata` property entry. The values of both `label` and `value` _MUST_ be JSON objects, as described in the [languages][prezi30-languages] section.
	 *
	 *    * Any resource type _MAY_ have the `requiredStatement` property.
	 *    * Clients _MUST_ render `requiredStatement` on every resource type.
	 */
	requiredStatement: MetadataItem | null;
	/**
	 * A string that identifies a license or rights statement that applies to the content of the resource, such as the JSON of a Manifest or the pixels of an image. The value _MUST_ be drawn from the set of [Creative Commons][org-cc-licenses] license URIs, the [RightsStatements.org][org-rs-terms] rights statement URIs, or those added via the [extension][prezi30-ldce] mechanism. The inclusion of this property is informative, and for example could be used to display an icon representing the rights assertions.
	 *
	 * If displaying rights information directly to the user is the desired interaction, or a publisher-defined label is needed, then it is _RECOMMENDED_ to include the information using the `requiredStatement` property or in the `metadata` property.
	 *
	 * The value _MUST_ be a string. If the value is drawn from Creative Commons or RightsStatements.org, then the string _MUST_ be a URI defined by that specification.
	 *
	 *   * Any resource type _MAY_ have the `rights` property.
	 *   * Clients _MAY_ render `rights` on any resource type.
	 */
	rights: string | null;
	/**
	 * Nav date
	 *
	 * A date that clients may use for navigation purposes when presenting the resource to the user in a date-based user interface, such as a calendar or timeline. More descriptive date ranges, intended for display directly to the user, _SHOULD_ be included in the `metadata` property for human consumption. If the resource contains Canvases that have the `duration` property, the datetime given corresponds to the navigation datetime of the start of the resource. For example, a Range that includes a Canvas that represents a set of video content recording a historical event, the `navDate` is the datetime of the first moment of the recorded event.
	 *
	 * The value _MUST_ be an XSD dateTime literal. The value _MUST_ have a timezone, and _SHOULD_ be given in UTC with the `Z` timezone indicator, but _MAY_ instead be given as an offset of the form `+hh:mm`.
	 *
	 *  * A {@link Collection} _MAY_ have the `navDate` property.
	 *  * Clients _MAY_ render `navDate` on a Collection.
	 *  * A {@link Manifest} _MAY_ have the `navDate` property.
	 *  * Clients _MAY_ render `navDate` on a Manifest.
	 *  * A {@link Range} _MAY_ have the `navDate` property.
	 *  * Clients _MAY_ render `navDate` on a Range.
	 *  * A {@link Canvas} _MAY_ have the `navDate` property.
	 *  * Clients _MAY_ render `navDate` on a Canvas.
	 *  * Other types of resource _MUST NOT_ have the `navDate` property.
	 *  * Clients _SHOULD_ ignore `navDate` on other types of resource.
	 */
	navDate: string | null;
	/**
	 *  The language or languages used in the content of this external resource. This property is already available from the Web Annotation model for content resources that are the body or target of an Annotation, however it _MAY_ also be used for resources [referenced][prezi30-terminology] from `homepage`, `rendering`, and `partOf`.
	 *
	 *  The value _MUST_ be an array of strings. Each item in the array _MUST_ be a valid language code, as described in the [languages section][prezi30-languages].
	 *
	 *  * An external resource _SHOULD_ have the `language` property with at least one item.<br/>
	 *  * Clients _SHOULD_ process the `language` of external resources.
	 *  * Other types of resource _MUST NOT_ have the `language` property.<br/>
	 *  * Clients _SHOULD_ ignore `language` on other types of resource.
	 *
	 */
	language: string[];
	/**
	 * A content resource, such as a small image or short audio clip, that represents the resource that has the thumbnail property. A resource may have multiple thumbnail resources that have the same or different type and format.
	 *
	 * The value must be an array of JSON objects, each of which must have the id and type properties, and should have the format property. Images and videos should have the width and height properties, and time-based media should have the duration property. It is recommended that a IIIF Image API service be available for images to enable manipulations such as resizing.
	 *
	 *   * A {@link Collection} should have the thumbnail property with at least one item.
	 *   * Clients should render thumbnail on a Collection.
	 *   * A {@link Manifest} should have the thumbnail property with at least one item.
	 *   * Clients should render thumbnail on a Manifest.
	 *   * A {@link Canvas} may have the thumbnail property with at least one item. A Canvas should have the thumbnail property if there are multiple resources that make up the view.
	 *   * Clients should render thumbnail on a Canvas.
	 *   * A {@link ContentResource} may have the thumbnail property with at least one item. Content resources should have the thumbnail property with at least one item if it is an option in a Choice of resources.
	 *   * Clients should render thumbnail on a content resource.
	 *   * Other types of resource may have the thumbnail property with at least one item.
	 *   * Clients may render thumbnail on other types of resource.
	 */
	thumbnail: ContentResource[];
	/**
	 * An organization or person that contributed to providing the content of the resource. Clients can then display this information to the user to acknowledge the provider’s contributions. This differs from the requiredStatement property, in that the data is structured, allowing the client to do more than just present text but instead have richer information about the people and organizations to use in different interfaces.
	 *
	 * The organization or person is represented as an Agent resource.
	 *
	 *   * Agents must have the id property, and its value must be a string. The string must be a URI that identifies the agent.
	 *   * Agents must have the type property, and its value must be the string “Agent”.
	 *   * Agents must have the label property, and its value must be a JSON object as described in the languages section.
	 *   * Agents should have the homepage property, and its value must be an array of JSON objects as described in the homepage section.
	 *   * Agents should have the logo property, and its value must be an array of JSON objects as described in the logo section.
	 *   * Agents may have the seeAlso property, and its value must be an array of JSON object as described in the seeAlso section.
	 *   * The value must be an array of JSON objects, where each item in the array conforms to the structure of an Agent, as described above.
	 *
	 * A Collection should have the provider property with at least one item.
	 *   * Clients must render provider on a Collection.
	 *   * A Manifest should have the provider property with at least one item.
	 *   * Clients must render provider on a Manifest.
	 *   * Other types of resource may have the provider property with at least one item.
	 *   * Clients should render provider on other types of resource.
	 */
	provider: ResourceProvider[];
	/**
	 * A single Canvas that provides additional content for use before the main content of the resource that has the `placeholderCanvas` property is rendered, or as an advertisement or stand-in for that content. Examples include images, text and sound standing in for video content before the user initiates playback; or a film poster to attract user attention. The content provided by `placeholderCanvas` differs from a thumbnail: a client might use `thumbnail` to summarize and navigate multiple resources, then show content from `placeholderCanvas` as part of the initial presentation of a single resource. A placeholder Canvas is likely to have different dimensions to those of the Canvas(es) of the resource that has the `placeholderCanvas` property.
	 *   *
	 *   Clients _MAY_ display the content of a linked placeholder Canvas when presenting the resource. When more than one such Canvas is available, for example if `placeholderCanvas` is provided for the currently selected Range and the current Manifest, the client _SHOULD_ pick the one most specific to the content. Publishers _SHOULD NOT_ assume that the placeholder Canvas will be processed by all clients. Clients _SHOULD_ take care to avoid conflicts between time-based media in the rendered placeholder Canvas and the content of the resource that has the `placeholderCanvas` property.
	 *
	 *   The value _MUST_ be a JSON object with the `id` and `type` properties, and _MAY_ have other properties of Canvases. The value of `type` _MUST_ be the string `Canvas`. The object _MUST NOT_ have the `placeholderCanvas` property, nor the `accompanyingCanvas` property.
	 *
	 *   * A {@link Collection} _MAY_ have the `placeholderCanvas` property.
	 *   * Clients _MAY_ render `placeholderCanvas` on a Collection.
	 *   * A {@link Manifest} _MAY_ have the `placeholderCanvas` property.
	 *   * Clients _MAY_ render `placeholderCanvas` on a Manifest.
	 *   * A {@link Canvas} _MAY_ have the `placeholderCanvas` property.
	 *   * Clients _MAY_ render `placeholderCanvas` on a Canvas.
	 *   * A {@link Range} _MAY_ have the `placeholderCanvas` property.
	 *   * Clients _MAY_ render `placeholderCanvas` on a Range.
	 *   * Other types of resource _MUST NOT_ have the `placeholderCanvas` property.
	 *   * Clients _SHOULD_ ignore `placeholderCanvas` on other types of resource.
	 *
	 */
	placeholderCanvas: Canvas;
	/**
	 * A single Canvas that provides additional content for use while rendering the resource that has the `accompanyingCanvas` property. Examples include an image to show while a duration-only Canvas is playing audio; or background audio to play while a user is navigating an image-only Manifest.
	 *
	 *  Clients _MAY_ display the content of an accompanying Canvas when presenting the resource. As with `placeholderCanvas` above, when more than one accompanying Canvas is available, the client _SHOULD_ pick the one most specific to the content. Publishers _SHOULD NOT_ assume that the accompanying Canvas will be processed by all clients. Clients _SHOULD_ take care to avoid conflicts between time-based media in the accompanying Canvas and the content of the resource that has the `accompanyingCanvas` property.
	 *
	 *  The value _MUST_ be a JSON object with the `id` and `type` properties, and _MAY_ have other properties of Canvases. The value of `type` _MUST_ be the string `Canvas`. The object _MUST NOT_ have the `placeholderCanvas` property, nor the `accompanyingCanvas` property.
	 *
	 *  * A {@link Collection} _MAY_ have the `accompanyingCanvas` property.
	 *  * Clients _MAY_ render `accompanyingCanvas` on a Collection.
	 *  * A {@link Manifest} _MAY_ have the `accompanyingCanvas` property.
	 *  * Clients _MAY_ render `accompanyingCanvas` on a Manifest.
	 *  * A {@link Canvas} _MAY_ have the `accompanyingCanvas` property.
	 *  * Clients _MAY_ render `accompanyingCanvas` on a Canvas.
	 *  * A {@link Range} _MAY_ have the `accompanyingCanvas` property.
	 *  * Clients _MAY_ render `accompanyingCanvas` on a Range.
	 *  * Other types of resource _MUST NOT_ have the `accompanyingCanvas` property.
	 *  * Clients _SHOULD_ ignore `accompanyingCanvas` on other types of resource.
	 */
	accompanyingCanvas: Canvas;
};
/**
 * Text granularity
 *
 * See: https://iiif.io/api/extension/text-granularity/
 */
/**
 * A page in a paginated document
 */
export type PageGranularity = "page";
/**
 * An arbitrary region of text
 */
export type BlockGranularity = "block";
/**
 * A paragraph
 */
export type ParagraphGranularity = "paragraph";
/**
 * A topographic line
 */
export type LineGranularity = "line";
/**
 * A single word
 */
export type WordGranularity = "word";
/**
 * A single glyph or symbol
 */
export type GlyphGranularity = "glyph";
/**
 * The textGranularity property identifies the Text Granularity Level of a resource. The value must be a single string.
 * This extension defines the Text Granularity Levels found in the table below. The string should be one of those
 * defined in the table below or in the [Registry of Extensions](https://iiif.io/api/extension/).
 */
export type TextGranularityOptions = PageGranularity | BlockGranularity | ParagraphGranularity | LineGranularity | WordGranularity | GlyphGranularity;
export interface TextGranularityExtension {
	/**
	 * Text granularity
	 *
	 * An Annotation may have the textGranularity property. An Annotation that has the property should reference a IIIF
	 * Presentation API Canvas or segment in the target property and the identified Text Granularity Level should describe
	 * that of the textual content represented by the content resources painted on the Target.
	 *
	 * The Annotation Body’s textual content should be equivalent to the textual content represented by the content
	 * resources painted on the Target. For example, the Body of the Annotation might be a TextualBody that contains the
	 * transcription of the Target, which is painted with the image of a page of a medieval manuscript.
	 *
	 * See: https://iiif.io/api/extension/text-granularity/
	 */
	textGranularity?: TextGranularityOptions;
}
export type AnnotationOmittedTechnical = "format" | "profile" | "height" | "width" | "duration" | "viewingDirection" | "motivation";
export type AnnotationOmittedDescriptive = "accompanyingCanvas" | "placeholderCanvas" | "navDate" | "language" | "rights";
export type AnnotationOmittedLinking = "services" | "start" | "supplementary";
export type AnnotationTechnical = OmitProperties<TechnicalProperties, AnnotationOmittedTechnical>;
export type AnnotationDescriptive = OmitProperties<DescriptiveProperties, AnnotationOmittedDescriptive>;
export type AnnotationLinking = OmitProperties<LinkingProperties, AnnotationOmittedLinking>;
export type W3CMotivation = "assessing" | "bookmarking" | "classifying" | "commenting" | "describing" | "editing" | "highlighting" | "identifying" | "linking" | "moderating" | "questioning" | "replying" | "tagging";
export type AnyMotivation = LiteralUnion<W3CMotivation>;
export type LinkedResource = string | {
	id: string;
} | any;
export type OtherProperties = {
	// Lifecycle properties.
	created?: string;
	generated?: string;
	modified?: string;
	creator?: Creator;
	generator?: Creator;
	// Intended audience
	audience?: Audience | Audience[];
	accessibility?: string | string[];
	motivation?: AnyMotivation | AnyMotivation[];
	// Rights
	rights?: string | string[];
	// Other identities
	canonical?: string;
	via?: string | string[];
};
export type ResourceBaseProperties = Prettify<OtherProperties & {
	role?: string;
}>;
export type ExternalResourceTypes = "Dataset" | "Image" | "Video" | "Sound" | "Text";
export type ExternalWebResource = Prettify<ResourceBaseProperties & {
	id?: string;
	type: "Dataset" | "Image" | "Video" | "Sound" | "Text";
	format?: string;
	language?: string | string[];
	processingLanguage?: string;
	textDirection?: "ltr" | "rtl" | "auto";
}>;
export type EmbeddedResource = Prettify<ResourceBaseProperties & {
	id?: string;
	type: "TextualBody";
	purpose?: string | string[];
	value?: string;
	language?: string | string[];
	format?: string;
}>;
export type SpecificResource<Type = LinkedResource> = Prettify<ResourceBaseProperties & {
	id?: string;
	type: "SpecificResource";
	state?: State | State[];
	purpose?: AnyMotivation | AnyMotivation[];
	source?: Type;
	selector?: Selector | Selector[];
	styleClass?: string;
	renderedVia?: Agent | Agent[];
	scope?: LinkedResource;
}>;
export type Body = string | EmbeddedResource | ExternalWebResource | SpecificResource;
export type Target = string | ExternalWebResource | SpecificResource;
export type RefinedBy = {
	refinedBy?: string | FragmentSelector | CssSelector | XPathSelector | TextQuoteSelector | TextPositionSelector | DataPositionSelector | SvgSelector;
};
export type FragmentSelector = Prettify<RefinedBy & {
	type: "FragmentSelector";
	value: string;
	conformsTo?: string;
}>;
export type CssSelector = Prettify<RefinedBy & {
	type: "CssSelector";
	value: string;
}>;
export type XPathSelector = Prettify<RefinedBy & {
	type: "XPathSelector";
	value: string;
}>;
export type TextQuoteSelector = Prettify<RefinedBy & {
	type: "TextQuoteSelector";
	exact: string;
	prefix?: string;
	suffix?: string;
}>;
export type TextPositionSelector = Prettify<RefinedBy & {
	type: "TextPositionSelector";
	start: number;
	end: number;
}>;
export type DataPositionSelector = Prettify<RefinedBy & {
	type: "DataPositionSelector";
	start: number;
	end: number;
}>;
export type SvgSelector = Prettify<RefinedBy & {
	type: "SvgSelector";
	value: string;
}> | {
	type: "SvgSelector";
	id: string;
};
export type RangeSelector<T> = {
	type: "RangeSelector";
	startSelector: T;
	endSelector: T;
};
/**
 * The Image API Selector is used to describe the operations available via the Image API in order to retrieve a
 * particular image representation. In this case the resource is the abstract image as identified by the IIIF Image
 * API base URI plus identifier, and the retrieval process involves adding the correct parameters after that base URI.
 * For example, the top left hand quadrant of an image has the region parameter of pct:0,0,50,50 which must be put into
 * the requested URI to obtain the appropriate representation.
 *
 * In order to make this as easy as possible for the situations when a IIIF Image API endpoint exists, we introduce a
 * new Selector class called ImageApiSelector. It has properties that give the parameter values needed to fill out the
 * URL structure in the request. If the property is not given, then a default should be used.
 *
 * One use of this is within the IIIF Presentation API, when a Canvas is being painted by part of an image, or an image
 * that requires rotation before display.
 */
export type ImageApiSelector = {
	type: "ImageApiSelector";
	/**
	 * The string to put in the region parameter of the URI.
	 * Default: "full"
	 */
	region?: string;
	/**
	 * The string to put in the size parameter of the URI.
	 * Default: "full"
	 */
	size?: string;
	/**
	 * The string to put in the rotation parameter of the URI. Note that this must be a string in order to allow
	 * mirroring, for example “!90”.
	 * Default: "0"
	 */
	rotation?: string;
	/**
	 * The string to put in the quality parameter of the URI.
	 * Default: "default"
	 */
	quality?: string;
	/**
	 * The string to put in the format parameter of the URI. Note that the ‘.’ character is not part of the format,
	 * just the URI syntax.
	 * Default: "jpg"
	 */
	format?: string;
};
/**
 * There are common use cases in which a point, rather than a range or area, is the target of the Annotation. For
 * example, putting a pin in a map should result in an exact point, not a very small rectangle. Points in time are not
 * very short durations, and user interfaces should also treat these differently. This is particularly important when
 * zooming in (either spatially or temporally) beyond the scale of the frame of reference. Even if the point takes up a
 * 10 by 10 pixel square at the user’s current resolution, it is not a rectangle bounding an area.
 *
 * It is not possible to select a point using URI Fragments with the Media Fragment specification, as zero-sized
 * fragments are not allowed. In order to fulfill the use cases, this specification defines a new Selector class
 * called PointSelector.
 */
export type PointSelector = {
	type: "PointSelector";
	/**
	 * Optional. An integer giving the x coordinate of the point, relative to the dimensions of the target resource.
	 */
	x?: number;
	/**
	 * Optional. An integer giving the y coordinate of the point, relative to the dimensions of the target resource.
	 */
	y?: number;
	/**
	 * Optional. A floating point number giving the time of the point in seconds, relative to the duration of the target
	 * resource.
	 */
	t?: number;
};
export type AudioContentSelector = {
	type: "AudioContentSelector";
};
export type VisualContentSelector = {
	type: "VisualContentSelector";
};
export type Selector = string | FragmentSelector | CssSelector | XPathSelector | TextQuoteSelector | TextPositionSelector | DataPositionSelector | SvgSelector | ImageApiSelector | PointSelector | AudioContentSelector | VisualContentSelector | RangeSelector<FragmentSelector> | RangeSelector<CssSelector> | RangeSelector<XPathSelector> | RangeSelector<TextQuoteSelector> | RangeSelector<TextPositionSelector> | RangeSelector<DataPositionSelector> | RangeSelector<SvgSelector> | RangeSelector<PointSelector>;
export type State = BasicState | TimeState | RequestHeaderState;
export type BasicState = Prettify<RefinedByState & {
	id: string;
}>;
export type RefinedByState = {
	refinedBy?: FragmentSelector | CssSelector | XPathSelector | TextQuoteSelector | TextPositionSelector | DataPositionSelector | SvgSelector | State;
};
export type TimeState = Prettify<RefinedByState & {
	type: "TimeState";
	sourceDate: string | string[];
	cached?: string | string[];
}> | Prettify<RefinedByState & {
	type: "TimeState";
	sourceDateStart: string;
	sourceDateEnd: string;
	cached?: string | string[];
}>;
export type RequestHeaderState = Prettify<RefinedByState & {
	type: "HttpRequestState";
	value: string;
}>;
export type Stylesheet = {
	id: string;
	type: "CssStylesheet";
} | {
	type: "CssStylesheet";
	format?: string;
	value?: string | string[];
};
export type ChoiceBody = {
	id?: string;
	type: "Choice";
	items: Body[];
};
export type ChoiceTarget = {
	type: "Choice";
	items: Target[];
};
export type Creator = string | string[] | Agent | Agent[];
export type W3CAnnotationBody = Body | ChoiceBody;
export type W3CAnnotationTarget = Target | ChoiceTarget | TargetComposite | TargetList | TargetIndependents;
export type AnnotationBody = ChoiceBody | ContentResource | ContentResourceString;
export type AnnotationTarget = W3CAnnotationTarget | ContentResource | ContentResourceString;
export type TargetComposite = {
	type: "Composite";
	items: Array<Target | string>;
};
export type TargetList = {
	type: "List";
	items: Array<Target | string>;
};
export type TargetIndependents = {
	type: "Independents";
	items: Array<Target | string>;
};
export type Audience = {
	id: string;
	type: "Audience" | string;
	[T: string]: string;
};
export type Agent = {
	id?: string;
	type?: "Person" | "Organisation" | "Software";
	name?: string | string[];
	nickname?: string;
	account?: string;
	email?: string;
	email_sha1?: string;
	homepage?: string | string[];
	// ?
	"schema:softwareVersion"?: any;
};
export type AnnotationW3C = Prettify<OtherProperties & {
	"@context"?: "http://www.w3.org/ns/anno.jsonld";
	body?: W3CAnnotationBody | W3CAnnotationBody[];
	bodyValue?: string;
	target?: W3CAnnotationTarget | W3CAnnotationTarget[];
	canonical?: string;
	via?: string;
	stylesheet?: string | Stylesheet;
}>;
export type Annotation = Prettify<SomeRequired<AnnotationTechnical, "id" | "type"> & Partial<AnnotationDescriptive> & Partial<AnnotationLinking> & Partial<OmitProperties<AnnotationW3C, "body" | "target">> & TextGranularityExtension & {
	type: "Annotation";
	body?: AnnotationBody | AnnotationBody[];
	target?: AnnotationTarget | AnnotationTarget[];
}>;
export type ManifestItems = Canvas;
export type ManifestOmittedTechnical = "format" | "profile" | "height" | "width" | "duration" | "timeMode" | "motivation";
export type ManifestOmittedDescriptive = "language";
export type ManifestOmittedLinking = "supplementary";
export type ManifestTechnical = OmitProperties<TechnicalProperties, ManifestOmittedTechnical>;
export type ManifestDescriptive = OmitProperties<DescriptiveProperties, ManifestOmittedDescriptive>;
export type ManifestStructural = StructuralProperties<Canvas>;
export type ManifestLinking = OmitProperties<LinkingProperties, ManifestOmittedLinking>;
export type Manifest = Prettify<SomeRequired<ManifestTechnical, "id" | "type"> & SomeRequired<ManifestDescriptive, "label"> & SomeRequired<ManifestStructural, "items"> & Partial<ManifestLinking> & NavPlaceExtension & JsonLDContext & {
	type: "Manifest";
}>;
export type ManifestItemSchemas = "Canvas";

export {};
