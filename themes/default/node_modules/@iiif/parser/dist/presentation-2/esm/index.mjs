var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
const types = [
  "sc:Collection",
  "sc:Manifest",
  "sc:Canvas",
  "sc:AnnotationList",
  "oa:Annotation",
  "sc:Range",
  "sc:Layer",
  "sc:Sequence",
  "oa:Choice",
  "Service",
  "ContentResource"
];
function identifyResource(resource) {
  if (typeof resource === "undefined" || resource === null) {
    throw new Error("Null or undefined is not a valid entity.");
  }
  if (Array.isArray(resource)) {
    throw new Error("Array is not a valid entity");
  }
  if (typeof resource !== "object") {
    throw new Error(`${typeof resource} is not a valid entity`);
  }
  if (typeof resource["@type"] === "string") {
    const hasType = types.indexOf(resource["@type"]);
    if (hasType !== -1) {
      return types[hasType];
    }
  }
  if (resource.profile) {
    return "Service";
  }
  if (resource.format) {
    return "ContentResource";
  }
  if (resource["@type"]) {
    return "ContentResource";
  }
  throw new Error("Resource type is not known");
}
class Traverse {
  constructor(traversals, options = {}) {
    __publicField(this, "traversals");
    __publicField(this, "options");
    this.traversals = {
      collection: [],
      manifest: [],
      canvas: [],
      annotationList: [],
      sequence: [],
      annotation: [],
      contentResource: [],
      choice: [],
      range: [],
      service: [],
      layer: [],
      ...traversals
    };
    this.options = {
      convertPropsToArray: true,
      mergeMemberProperties: true,
      allowUndefinedReturn: false,
      ...options
    };
  }
  static all(traversal) {
    return new Traverse({
      collection: [traversal],
      manifest: [traversal],
      canvas: [traversal],
      annotationList: [traversal],
      sequence: [traversal],
      annotation: [traversal],
      contentResource: [traversal],
      choice: [traversal],
      range: [traversal],
      service: [traversal],
      layer: [traversal]
    });
  }
  traverseCollection(collection) {
    return this.traverseType(
      this.traverseDescriptive(this.traverseLinking(this.traverseCollectionItems(collection))),
      this.traversals.collection
    );
  }
  traverseCollectionItems(collection) {
    if (this.options.mergeMemberProperties) {
      const members = [
        ...(collection.manifests || []).map((manifest) => {
          if (typeof manifest === "string") {
            return { "@id": manifest, "@type": "sc:Manifest" };
          }
          return manifest;
        }),
        ...(collection.collections || []).map((subCollection) => {
          if (typeof subCollection === "string") {
            return { "@id": subCollection, "@type": "sc:Collection" };
          }
          return subCollection;
        }),
        ...collection.members || []
      ];
      delete collection.collections;
      delete collection.manifests;
      collection.members = members;
    }
    if (collection.manifests) {
      collection.manifests = collection.manifests.map(
        (manifest) => this.traverseManifest(
          typeof manifest === "string" ? { "@id": manifest, "@type": "sc:Manifest" } : manifest
        )
      );
    }
    if (collection.collections) {
      collection.collections = collection.collections.map(
        (subCollection) => this.traverseCollection(
          typeof subCollection === "string" ? { "@id": subCollection, "@type": "sc:Collection" } : subCollection
        )
      );
    }
    if (collection.members) {
      collection.members = collection.members.map((member) => {
        if (typeof member === "string") {
          return member;
        }
        return this.traverseUnknown(member);
      });
    }
    return collection;
  }
  traverseManifest(manifest) {
    return this.traverseType(
      this.traverseDescriptive(this.traverseLinking(this.traverseManifestItems(manifest))),
      this.traversals.manifest
    );
  }
  traverseManifestItems(manifest) {
    if (manifest.sequences) {
      manifest.sequences = manifest.sequences.map((sequence) => this.traverseSequence(sequence));
    }
    if (manifest.structures) {
      manifest.structures = manifest.structures.map((structure) => this.traverseRange(structure));
    }
    return manifest;
  }
  traverseSequence(sequence) {
    return this.traverseType(
      this.traverseDescriptive(this.traverseLinking(this.traverseSequenceItems(sequence))),
      this.traversals.sequence
    );
  }
  traverseSequenceItems(sequence) {
    if (sequence.canvases) {
      sequence.canvases = sequence.canvases.map((canvas) => this.traverseCanvas(canvas));
    }
    return sequence;
  }
  traverseCanvas(canvas) {
    return this.traverseType(
      this.traverseDescriptive(this.traverseLinking(this.traverseCanvasItems(canvas))),
      this.traversals.canvas
    );
  }
  traverseCanvasItems(canvas) {
    if (canvas.images) {
      canvas.images = canvas.images.map((image) => this.traverseAnnotation(image));
    }
    if (canvas.otherContent) {
      canvas.otherContent = canvas.otherContent.map((annotationList) => this.traverseAnnotationList(annotationList));
    }
    return canvas;
  }
  traverseRange(range) {
    return this.traverseType(
      this.traverseDescriptive(this.traverseLinking(this.traverseRangeItems(range))),
      this.traversals.range
    );
  }
  traverseRangeItems(range) {
    if (this.options.mergeMemberProperties) {
      const members = [
        ...(range.ranges || []).map((innerRange) => {
          if (typeof innerRange === "string") {
            return { "@id": innerRange, "@type": "sc:Range" };
          }
          return innerRange;
        }),
        ...(range.canvases || []).map((canvas) => {
          if (typeof canvas === "string") {
            return { "@id": canvas, "@type": "sc:Canvas" };
          }
          return canvas;
        }),
        ...range.members || []
      ];
      delete range.ranges;
      delete range.canvases;
      range.members = members.length ? members.map((member) => this.traverseUnknown(member)) : void 0;
    }
    return range;
  }
  traverseAnnotationList(annotationList) {
    const list = typeof annotationList === "string" ? { "@id": annotationList, "@type": "sc:AnnotationList" } : annotationList;
    return this.traverseType(
      this.traverseDescriptive(this.traverseAnnotationListItems(list)),
      this.traversals.annotationList
    );
  }
  traverseAnnotationListItems(annotationList) {
    if (annotationList.resources) {
      annotationList.resources = annotationList.resources.map((annotation) => this.traverseAnnotation(annotation));
    }
    return annotationList;
  }
  traverseAnnotation(annotation) {
    return this.traverseType(
      this.traverseDescriptive(this.traverseLinking(this.traverseAnnotationItems(annotation))),
      this.traversals.annotation
    );
  }
  traverseAnnotationItems(annotation) {
    if (annotation.resource) {
      if (Array.isArray(annotation.resource)) {
        annotation.resource = annotation.resource.map(
          (res) => this.traverseContentResource(res)
        );
      } else {
        annotation.resource = this.traverseContentResource(annotation.resource);
      }
    }
    if (annotation.on)
      ;
    return annotation;
  }
  traverseLayer(layer) {
    return this.traverseType(this.traverseLinking(this.traverseLayerItems(layer)), this.traversals.layer);
  }
  traverseLayerItems(layer) {
    if (layer.otherContent) {
      layer.otherContent = layer.otherContent.map((annotationList) => this.traverseAnnotationList(annotationList));
    }
    return layer;
  }
  traverseChoice(choice) {
    return this.traverseType(this.traverseChoiceItems(choice), this.traversals.choice);
  }
  traverseChoiceItems(choice) {
    if (choice.default && choice.default !== "rdf:nil") {
      choice.default = this.traverseContentResource(choice.default);
    }
    if (choice.item && choice.item !== "rdf:nil") {
      choice.item = choice.item.map((item) => this.traverseContentResource(item));
    }
    return choice;
  }
  traverseService(service) {
    return this.traverseType(this.traverseLinking(service), this.traversals.service);
  }
  traverseContentResource(contentResource) {
    if (contentResource["@type"] === "oa:Choice") {
      return this.traverseChoice(contentResource);
    }
    return this.traverseType(
      this.traverseDescriptive(this.traverseLinking(contentResource)),
      this.traversals.contentResource
    );
  }
  traverseUnknown(item) {
    if (!item["@type"] || typeof item === "string") {
      return item;
    }
    switch (identifyResource(item)) {
      case "sc:Collection":
        return this.traverseCollection(item);
      case "sc:Manifest":
        return this.traverseManifest(item);
      case "sc:Canvas":
        return this.traverseCanvas(item);
      case "sc:Sequence":
        return this.traverseSequence(item);
      case "sc:Range":
        return this.traverseRange(item);
      case "oa:Annotation":
        return this.traverseAnnotation(item);
      case "sc:AnnotationList":
        return this.traverseAnnotationList(item);
      case "sc:Layer":
        return this.traverseLayer(item);
      case "Service":
        return this.traverseService(item);
      case "oa:Choice":
        return this.traverseChoice(item);
      case "ContentResource":
        return this.traverseContentResource(item);
    }
    if (item.profile) {
      return this.traverseService(item);
    }
    return item;
  }
  traverseImageResource(contentResource) {
    const wasArray = Array.isArray(contentResource);
    const resourceList = Array.isArray(contentResource) ? contentResource : [contentResource];
    const newResourceList = [];
    for (const singleResource of resourceList) {
      if (typeof singleResource === "string") {
        newResourceList.push(
          this.traverseContentResource({
            "@id": singleResource,
            "@type": "dctypes:Image"
          })
        );
      } else {
        newResourceList.push(this.traverseContentResource(singleResource));
      }
    }
    if (!wasArray && !this.options.convertPropsToArray) {
      return newResourceList[0];
    }
    return newResourceList;
  }
  traverseDescriptive(resource) {
    if (resource.thumbnail) {
      resource.thumbnail = this.traverseImageResource(resource.thumbnail);
    }
    if (resource.logo) {
      resource.logo = this.traverseImageResource(resource.logo);
    }
    return resource;
  }
  traverseOneOrMoreServices(allServices) {
    const wasArray = Array.isArray(allServices);
    const services = Array.isArray(allServices) ? allServices : [allServices];
    const newServices = [];
    for (const service of services) {
      newServices.push(this.traverseService(service));
    }
    if (!wasArray && !this.options.convertPropsToArray) {
      return newServices[0];
    }
    return newServices;
  }
  traverseLinking(resource) {
    if (resource.related) {
      resource.related = this.traverseOneOrManyType(resource.related, this.traversals.contentResource);
    }
    if (resource.rendering) {
      resource.rendering = this.traverseOneOrManyType(resource.rendering, this.traversals.contentResource);
    }
    if (resource.service) {
      resource.service = this.traverseOneOrMoreServices(resource.service);
    }
    if (resource.seeAlso) {
      resource.seeAlso = this.traverseOneOrManyType(resource.seeAlso, this.traversals.contentResource);
    }
    if (resource.within) {
      if (typeof resource.within === "string")
        ;
      else {
        resource.within = this.traverseOneOrManyType(
          resource.within,
          this.traversals.contentResource
        );
      }
    }
    if (resource.startCanvas) {
      if (typeof resource.startCanvas === "string") {
        resource.startCanvas = this.traverseType(
          { "@id": resource.startCanvas, "@type": "sc:Canvas" },
          this.traversals.canvas
        );
      } else if (resource.startCanvas) {
        this.traverseType(resource.startCanvas, this.traversals.canvas);
      }
    }
    if (resource.contentLayer) {
      if (typeof resource.contentLayer === "string") {
        resource.contentLayer = this.traverseLayer({
          "@id": resource.contentLayer,
          "@type": "sc:Layer"
        });
      } else {
        resource.contentLayer = this.traverseLayer(resource.contentLayer);
      }
    }
    return resource;
  }
  traverseOneOrManyType(object, traversals) {
    if (!Array.isArray(object)) {
      if (this.options.convertPropsToArray) {
        object = [object];
      } else {
        return this.traverseType(object, traversals);
      }
    }
    return object.map((singleObj) => this.traverseType(singleObj, traversals));
  }
  traverseType(object, traversals) {
    return traversals.reduce((acc, traversal) => {
      const returnValue = traversal(acc);
      if (typeof returnValue === "undefined" && !this.options.allowUndefinedReturn) {
        return acc;
      }
      return returnValue;
    }, object);
  }
}
const STANFORD_IIIF_IMAGE_COMPLIANCE_0 = "http://library.stanford.edu/iiif/image-api/compliance.html#level0";
const STANFORD_IIIF_IMAGE_COMPLIANCE_1 = "http://library.stanford.edu/iiif/image-api/compliance.html#level1";
const STANFORD_IIIF_IMAGE_COMPLIANCE_2 = "http://library.stanford.edu/iiif/image-api/compliance.html#level2";
const STANFORD_IIIF_IMAGE_CONFORMANCE_0 = "http://library.stanford.edu/iiif/image-api/conformance.html#level0";
const STANFORD_IIIF_IMAGE_CONFORMANCE_1 = "http://library.stanford.edu/iiif/image-api/conformance.html#level1";
const STANFORD_IIIF_IMAGE_CONFORMANCE_2 = "http://library.stanford.edu/iiif/image-api/conformance.html#level2";
const STANFORD_IIIF_1_IMAGE_COMPLIANCE_0 = "http://library.stanford.edu/iiif/image-api/1.1/compliance.html#level0";
const STANFORD_IIIF_1_IMAGE_COMPLIANCE_1 = "http://library.stanford.edu/iiif/image-api/1.1/compliance.html#level1";
const STANFORD_IIIF_1_IMAGE_COMPLIANCE_2 = "http://library.stanford.edu/iiif/image-api/1.1/compliance.html#level2";
const STANFORD_IIIF_1_IMAGE_CONFORMANCE_0 = "http://library.stanford.edu/iiif/image-api/1.1/conformance.html#level0";
const STANFORD_IIIF_1_IMAGE_CONFORMANCE_1 = "http://library.stanford.edu/iiif/image-api/1.1/conformance.html#level1";
const STANFORD_IIIF_1_IMAGE_CONFORMANCE_2 = "http://library.stanford.edu/iiif/image-api/1.1/conformance.html#level2";
const IIIF_1_IMAGE_LEVEL_0 = "http://iiif.io/api/image/1/level0.json";
const IIIF_1_IMAGE_LEVEL_0_PROFILE = "http://iiif.io/api/image/1/profiles/level0.json";
const IIIF_1_IMAGE_LEVEL_1 = "http://iiif.io/api/image/1/level1.json";
const IIIF_1_IMAGE_LEVEL_1_PROFILE = "http://iiif.io/api/image/1/profiles/level1.json";
const IIIF_1_IMAGE_LEVEL_2 = "http://iiif.io/api/image/1/level2.json";
const IIIF_1_IMAGE_LEVEL_2_PROFILE = "http://iiif.io/api/image/1/profiles/level2.json";
const IIIF_2_IMAGE_LEVEL_0 = "http://iiif.io/api/image/2/level0.json";
const IIIF_2_IMAGE_LEVEL_0_PROFILE = "http://iiif.io/api/image/2/profiles/level0.json";
const IIIF_2_IMAGE_LEVEL_1 = "http://iiif.io/api/image/2/level1.json";
const IIIF_2_IMAGE_LEVEL_1_PROFILE = "http://iiif.io/api/image/2/profiles/level1.json";
const IIIF_2_IMAGE_LEVEL_2 = "http://iiif.io/api/image/2/level2.json";
const IIIF_2_IMAGE_LEVEL_2_PROFILE = "http://iiif.io/api/image/2/profiles/level2.json";
const IIIF_3_IMAGE_LEVEL_0 = "level0";
const IIIF_3_IMAGE_LEVEL_1 = "level1";
const IIIF_3_IMAGE_LEVEL_2 = "level2";
const IIIF_2_IMAGE_LEVEL_0_NO_JSON = "http://iiif.io/api/image/2/level0";
const IIIF_2_IMAGE_LEVEL_1_NO_JSON = "http://iiif.io/api/image/2/level1";
const IIIF_2_IMAGE_LEVEL_2_NO_JSON = "http://iiif.io/api/image/2/level2";
const level1Support = [
  IIIF_2_IMAGE_LEVEL_1_NO_JSON,
  IIIF_2_IMAGE_LEVEL_2_NO_JSON,
  STANFORD_IIIF_IMAGE_COMPLIANCE_1,
  STANFORD_IIIF_IMAGE_COMPLIANCE_2,
  STANFORD_IIIF_IMAGE_CONFORMANCE_1,
  STANFORD_IIIF_IMAGE_CONFORMANCE_2,
  STANFORD_IIIF_1_IMAGE_COMPLIANCE_1,
  STANFORD_IIIF_1_IMAGE_COMPLIANCE_2,
  STANFORD_IIIF_1_IMAGE_CONFORMANCE_1,
  STANFORD_IIIF_1_IMAGE_CONFORMANCE_2,
  IIIF_1_IMAGE_LEVEL_1,
  IIIF_1_IMAGE_LEVEL_1_PROFILE,
  IIIF_1_IMAGE_LEVEL_2,
  IIIF_1_IMAGE_LEVEL_2_PROFILE,
  IIIF_2_IMAGE_LEVEL_1,
  IIIF_2_IMAGE_LEVEL_1_PROFILE,
  IIIF_2_IMAGE_LEVEL_2,
  IIIF_2_IMAGE_LEVEL_2_PROFILE,
  IIIF_3_IMAGE_LEVEL_1,
  IIIF_3_IMAGE_LEVEL_2
];
const imageServiceProfiles = [
  IIIF_2_IMAGE_LEVEL_0_NO_JSON,
  IIIF_2_IMAGE_LEVEL_1_NO_JSON,
  IIIF_2_IMAGE_LEVEL_2_NO_JSON,
  STANFORD_IIIF_IMAGE_COMPLIANCE_0,
  STANFORD_IIIF_IMAGE_COMPLIANCE_1,
  STANFORD_IIIF_IMAGE_COMPLIANCE_2,
  STANFORD_IIIF_IMAGE_CONFORMANCE_0,
  STANFORD_IIIF_IMAGE_CONFORMANCE_1,
  STANFORD_IIIF_IMAGE_CONFORMANCE_2,
  STANFORD_IIIF_1_IMAGE_COMPLIANCE_0,
  STANFORD_IIIF_1_IMAGE_COMPLIANCE_1,
  STANFORD_IIIF_1_IMAGE_COMPLIANCE_2,
  STANFORD_IIIF_1_IMAGE_CONFORMANCE_0,
  STANFORD_IIIF_1_IMAGE_CONFORMANCE_1,
  STANFORD_IIIF_1_IMAGE_CONFORMANCE_2,
  IIIF_1_IMAGE_LEVEL_0,
  IIIF_1_IMAGE_LEVEL_0_PROFILE,
  IIIF_1_IMAGE_LEVEL_1,
  IIIF_1_IMAGE_LEVEL_1_PROFILE,
  IIIF_1_IMAGE_LEVEL_2,
  IIIF_1_IMAGE_LEVEL_2_PROFILE,
  IIIF_2_IMAGE_LEVEL_0,
  IIIF_2_IMAGE_LEVEL_0_PROFILE,
  IIIF_2_IMAGE_LEVEL_1,
  IIIF_2_IMAGE_LEVEL_1_PROFILE,
  IIIF_2_IMAGE_LEVEL_2,
  IIIF_2_IMAGE_LEVEL_2_PROFILE,
  IIIF_3_IMAGE_LEVEL_0,
  IIIF_3_IMAGE_LEVEL_1,
  IIIF_3_IMAGE_LEVEL_2
];
function ensureArray(maybeArray) {
  if (Array.isArray(maybeArray)) {
    return maybeArray;
  }
  return [maybeArray];
}
const configuration = {
  attributionLabel: "Attribution",
  lang: "none",
  providerId: "http://example.org/provider",
  providerName: "Unknown"
};
function convertLanguageMapping(inputLangProperty, defaultLang = "none") {
  if (!inputLangProperty) {
    return {};
  }
  const arrayOfValues = Array.isArray(inputLangProperty) ? inputLangProperty : [inputLangProperty];
  const languageMap = {};
  for (const language of arrayOfValues) {
    if (typeof language === "string") {
      languageMap[defaultLang] = languageMap[defaultLang] ? languageMap[defaultLang] : [];
      languageMap[defaultLang].push(language || "");
      continue;
    }
    if (!language["@language"]) {
      languageMap[defaultLang] = languageMap[defaultLang] ? languageMap[defaultLang] : [];
      languageMap[defaultLang].push(language["@value"] || "");
      continue;
    }
    const lang = language["@language"];
    languageMap[lang] = languageMap[lang] ? languageMap[lang] : [];
    languageMap[lang].push(language["@value"] || "");
  }
  return languageMap;
}
function getProfile(profile) {
  if (Array.isArray(profile)) {
    return getProfile(profile.find((s) => typeof s === "string"));
  }
  if (imageServiceProfiles.indexOf(profile) !== -1) {
    return "level2";
  }
  if (level1Support.indexOf(profile) !== -1) {
    return "level1";
  }
  if (typeof profile !== "string") {
    return void 0;
  }
  return profile;
}
function getTypeFromContext(inputContexts) {
  const contexts = Array.isArray(inputContexts) ? inputContexts : [inputContexts];
  for (const context of contexts) {
    switch (context) {
      case "http://iiif.io/api/image/2/context.json":
      case "http://library.stanford.edu/iiif/image-api/1.1/compliance.html#level2":
        return "ImageService2";
      case "http://iiif.io/api/image/1/context.json":
      case "http://library.stanford.edu/iiif/image-api/1.1/context.json":
        return "ImageService1";
      case "http://iiif.io/api/annex/openannotation/context.json":
        return "ImageApiSelector";
    }
  }
  return void 0;
}
function getTypeFromProfile(inputProfile) {
  switch (inputProfile) {
    case "http://iiif.io/api/image/2/level0.json":
    case "http://iiif.io/api/image/2/level1.json":
    case "http://iiif.io/api/image/2/level2.json":
      return "ImageService2";
    case "http://iiif.io/api/auth/1/kiosk":
    case "http://iiif.io/api/auth/1/login":
    case "http://iiif.io/api/auth/1/clickthrough":
    case "http://iiif.io/api/auth/1/external":
    case "http://iiif.io/api/auth/0/kiosk":
    case "http://iiif.io/api/auth/0/login":
    case "http://iiif.io/api/auth/0/clickthrough":
    case "http://iiif.io/api/auth/0/external":
      return "AuthCookieService1";
    case "http://iiif.io/api/auth/1/token":
    case "http://iiif.io/api/auth/0/token":
      return "AuthTokenService1";
    case "http://iiif.io/api/auth/1/logout":
    case "http://iiif.io/api/auth/0/logout":
      return "AuthLogoutService1";
    case "http://iiif.io/api/search/1/search":
    case "http://iiif.io/api/search/0/search":
      return "SearchService1";
    case "http://iiif.io/api/search/1/autocomplete":
    case "http://iiif.io/api/search/0/autocomplete":
      return "AutoCompleteService1";
  }
  return void 0;
}
function removePrefix(str) {
  for (const prefix of ["sc", "oa", "dcterms", "dctypes", "iiif"]) {
    if (str.startsWith(`${prefix}:`)) {
      return str.slice(prefix.length + 1);
    }
  }
  return str;
}
const knownTypes = ["Collection", "Manifest", "Annotation", "AnnotationPage", "Range", "Service"];
function getNewType(resource) {
  const id = resource["@id"] || resource.id;
  let oldType = resource["@type"] || resource.type;
  const profile = resource.profile || void 0;
  const context = resource["@context"] || void 0;
  if (profile) {
    const possibleType = getTypeFromProfile(profile);
    if (possibleType) {
      return possibleType;
    }
  }
  if (context) {
    const possibleType = getTypeFromContext(context);
    if (possibleType) {
      return possibleType;
    }
  }
  if (oldType) {
    if (Array.isArray(oldType)) {
      if (oldType.indexOf("oa:CssStylesheet") !== -1) {
        return "CssStylesheet";
      }
      if (oldType.indexOf("cnt:ContentAsText") !== -1) {
        return "TextualBody";
      }
      oldType = oldType[0];
    }
    for (const prefix of ["sc", "oa", "dcterms", "dctypes", "iiif"]) {
      if (oldType.startsWith(`${prefix}:`)) {
        oldType = oldType.slice(prefix.length + 1);
        break;
      }
    }
    switch (oldType) {
      case "Layer":
        return "AnnotationCollection";
      case "AnnotationList":
        return "AnnotationPage";
      case "cnt:ContentAsText":
        return "TextualBody";
    }
  }
  if (oldType && knownTypes.indexOf(oldType) !== -1) {
    return oldType;
  }
  if (resource.format) {
    if (resource.format.startsWith("image/")) {
      return "Image";
    }
    if (resource.format.startsWith("text/")) {
      return "Text";
    }
    if (resource.format === "application/pdf") {
      return "Text";
    }
    if (resource.format.startsWith("application/")) {
      return "Dataset";
    }
  }
  if (id && (id.endsWith(".jpg") || id.endsWith(".png") || id.endsWith(".jpeg"))) {
    return "Image";
  }
  if (!oldType) {
    return "unknown";
  }
  return oldType;
}
const licenseRegex = /http(s)?:\/\/(creativecommons.org|rightsstatements.org)[^"'\\<\n]+/gm;
function extractLicense(license) {
  const matches = license.match(licenseRegex);
  if (matches) {
    return matches[0];
  }
  return license;
}
function fixLicense(license, licenseLabel = "Rights/License", lang = "none") {
  let rights = null;
  const metadata = [];
  const licenseList = Array.isArray(license) ? license : [license];
  for (const rawLicense of licenseList) {
    const singleLicense = rawLicense ? extractLicense(rawLicense) : void 0;
    if (singleLicense && (singleLicense.indexOf("creativecommons.org") !== -1 || singleLicense.indexOf("rightsstatements.org") !== -1)) {
      if (singleLicense.startsWith("https://")) {
        rights = `http://${singleLicense.slice(8)}`;
      } else {
        rights = singleLicense;
      }
      continue;
    }
    if (singleLicense) {
      metadata.push({
        label: { [lang]: [licenseLabel] },
        value: { [lang]: [singleLicense] }
      });
    }
  }
  return [rights, metadata];
}
const removeContexts = [
  "http://iiif.io/api/presentation/2/context.json",
  "http://iiif.io/api/image/2/context.json",
  "http://iiif.io/api/image/1/context.json",
  "http://library.stanford.edu/iiif/image-api/1.1/context.json",
  "http://iiif.io/api/search/1/context.json",
  "http://iiif.io/api/search/0/context.json",
  "http://iiif.io/api/auth/1/context.json",
  "http://iiif.io/api/auth/0/context.json",
  "http://iiif.io/api/annex/openannotation/context.json"
];
function fixContext(inputContext) {
  if (inputContext) {
    const contexts = Array.isArray(inputContext) ? inputContext : [inputContext];
    const newContexts = [];
    for (const context of contexts) {
      if (context === "http://iiif.io/api/presentation/2/context.json") {
        newContexts.push("http://iiif.io/api/presentation/3/context.json");
      }
      if (removeContexts.indexOf(context) !== -1) {
        continue;
      }
      newContexts.push(context);
    }
    if (contexts.length) {
      return newContexts.length === 1 ? newContexts[0] : newContexts;
    }
  }
  return void 0;
}
function convertMetadata(metadata) {
  if (!metadata) {
    return [];
  }
  return metadata.map((item) => {
    return {
      label: convertLanguageMapping(item.label),
      value: convertLanguageMapping(item.value)
    };
  });
}
function removeUndefinedProperties(obj) {
  for (const prop in obj) {
    if (typeof obj[prop] === "undefined" || obj[prop] === null) {
      delete obj[prop];
    }
  }
  return obj;
}
let mintedIdCounter = 0;
function mintNewIdFromResource(resource, subresource) {
  const origId = encodeURI(resource.id || resource["@id"] || "").trim();
  if (origId && subresource) {
    return `${origId}/${subresource}`;
  }
  if (origId) {
    return origId;
  }
  mintedIdCounter++;
  return `http://example.org/${resource["@type"]}${subresource ? `/${subresource}` : ""}/${mintedIdCounter}`;
}
function technicalProperties(resource) {
  const allBehaviours = [...resource.behavior || []];
  if (resource.viewingHint) {
    allBehaviours.push(resource.viewingHint);
  }
  let motivation;
  if (Array.isArray(resource.motivation)) {
    motivation = resource.motivation.map(removePrefix);
  } else if (resource.motivation) {
    motivation = removePrefix(resource.motivation);
  }
  return {
    "@context": resource["@context"] ? fixContext(resource["@context"]) : void 0,
    id: (resource["@id"] || mintNewIdFromResource(resource)).trim(),
    type: getNewType(resource),
    behavior: allBehaviours.length ? allBehaviours : void 0,
    height: resource.height ? resource.height : void 0,
    width: resource.width ? resource.width : void 0,
    motivation,
    viewingDirection: resource.viewingDirection,
    profile: resource.profile,
    format: resource.format ? resource.format : void 0,
    duration: void 0,
    timeMode: void 0
  };
}
function descriptiveProperties(resource) {
  const [rights, extraMetadata] = fixLicense(resource.license);
  const allMetadata = [...resource.metadata ? convertMetadata(resource.metadata) : [], ...extraMetadata];
  return {
    rights,
    metadata: allMetadata.length ? allMetadata : void 0,
    label: resource.label ? convertLanguageMapping(resource.label) : void 0,
    requiredStatement: resource.attribution ? {
      label: convertLanguageMapping(configuration.attributionLabel),
      value: convertLanguageMapping(resource.attribution)
    } : void 0,
    navDate: resource.navDate,
    summary: resource.description ? convertLanguageMapping(resource.description) : void 0,
    thumbnail: resource.thumbnail
  };
}
function parseWithin(resource) {
  if (!resource.within) {
    return void 0;
  }
  const withinProperties = Array.isArray(resource.within) ? resource.within : [resource.within];
  const returnPartOf = [];
  for (const within of withinProperties) {
    if (typeof within === "string") {
      if (within) {
        switch (resource["@type"]) {
          case "sc:Manifest":
            returnPartOf.push({ id: within, type: "Collection" });
            break;
        }
      }
    } else if (within["@id"]) {
      returnPartOf.push({
        id: within["@id"],
        type: getNewType(within)
      });
    } else
      ;
  }
  return returnPartOf.length ? returnPartOf : void 0;
}
function linkingProperties(resource) {
  const related = resource.related ? Array.isArray(resource.related) ? resource.related : [resource.related] : [];
  const layer = resource.contentLayer;
  return {
    provider: resource.logo || related.length ? [
      {
        id: configuration.providerId,
        type: "Agent",
        homepage: related.length ? [related[0]] : void 0,
        logo: resource.logo ? Array.isArray(resource.logo) ? resource.logo : [resource.logo] : void 0,
        label: convertLanguageMapping(configuration.providerName)
      }
    ] : void 0,
    partOf: parseWithin(resource),
    rendering: resource.rendering,
    seeAlso: resource.seeAlso,
    start: resource.startCanvas,
    service: resource.service ? ensureArray(resource.service) : void 0,
    supplementary: layer ? [layer] : void 0
  };
}
function embeddedContentProperties(resource) {
  return {
    chars: resource.chars,
    format: resource.format ? resource.format : void 0,
    language: resource.language
  };
}
function upgradeCollection(collection) {
  return removeUndefinedProperties({
    ...technicalProperties(collection),
    ...descriptiveProperties(collection),
    ...linkingProperties(collection),
    items: collection.members
  });
}
function upgradeManifest(manifest) {
  const allCanvases = [];
  const behavior = [];
  for (const sequence of manifest.sequences || []) {
    if (sequence.canvases.length) {
      allCanvases.push(...sequence.canvases);
    }
    if (sequence.behavior) {
      behavior.push(...sequence.behavior);
    }
  }
  const technical = technicalProperties(manifest);
  if (behavior.length) {
    if (technical.behavior) {
      technical.behavior.push(...behavior);
    } else {
      technical.behavior = behavior;
    }
  }
  return removeUndefinedProperties({
    ...technical,
    ...descriptiveProperties(manifest),
    ...linkingProperties(manifest),
    items: allCanvases,
    structures: manifest.structures
  });
}
function upgradeCanvas(canvas) {
  return removeUndefinedProperties({
    ...technicalProperties(canvas),
    ...descriptiveProperties(canvas),
    ...linkingProperties(canvas),
    annotations: canvas.otherContent && canvas.otherContent.length ? canvas.otherContent : void 0,
    items: canvas.images && canvas.images.length ? [
      {
        id: mintNewIdFromResource(canvas, "annotation-page"),
        type: "AnnotationPage",
        items: canvas.images
      }
    ] : void 0
  });
}
function upgradeAnnotationList(annotationPage) {
  return removeUndefinedProperties({
    ...technicalProperties(annotationPage),
    ...descriptiveProperties(annotationPage),
    ...linkingProperties(annotationPage),
    items: annotationPage.resources && annotationPage.resources.length ? annotationPage.resources : void 0
  });
}
function upgradeSequence(sequence) {
  if (!sequence.canvases || sequence.canvases.length === 0) {
    return {
      canvases: [],
      behavior: []
    };
  }
  return {
    canvases: sequence.canvases,
    behavior: sequence.viewingHint ? [sequence.viewingHint] : []
  };
}
function upgradeAnnotation(annotation) {
  function upgradeTarget(target) {
    if (Array.isArray(target)) {
      if (target.length > 1) {
        return { type: "List", items: target.map(upgradeTarget) };
      }
      target = target[0];
    }
    if (typeof target === "string") {
      return encodeURI(target).trim();
    } else if ("@type" in target) {
      let source;
      if (typeof target.full === "string") {
        source = target.full;
      } else if (target.full["@type"] === "dctypes:Image") {
        source = { id: target.full["@id"], type: "Image" };
      } else if (target.full["@type"] === "sc:Canvas") {
        source = { id: target.full["@id"], type: "Canvas" };
      } else {
        throw new Error(`Unsupported source type on annotation: ${target.full["@type"]}`);
      }
      return {
        type: "SpecificResource",
        source,
        selector: upgradeSelector(target.selector)
      };
    } else {
      return encodeURI(target["@id"]).trim();
    }
  }
  return removeUndefinedProperties({
    ...technicalProperties(annotation),
    ...descriptiveProperties(annotation),
    ...linkingProperties(annotation),
    target: upgradeTarget(annotation.on),
    body: Array.isArray(annotation.resource) ? annotation.resource.map(upgradeContentResource) : upgradeContentResource(annotation.resource)
  });
}
function upgradeContentResource(inputContentResource) {
  const contentResource = inputContentResource;
  return removeUndefinedProperties({
    ...technicalProperties(contentResource),
    ...descriptiveProperties(contentResource),
    ...linkingProperties(contentResource),
    ...embeddedContentProperties(contentResource)
  });
}
function upgradeChoice(choice) {
  const items = [];
  if (choice.default && choice.default !== "rdf:nil") {
    items.push(choice.default);
  }
  if (choice.item && choice.item !== "rdf:nil") {
    items.push(...choice.item);
  }
  return {
    ...technicalProperties(choice),
    ...descriptiveProperties(choice),
    items
  };
}
function upgradeRange(range) {
  return removeUndefinedProperties({
    ...technicalProperties(range),
    ...descriptiveProperties(range),
    ...linkingProperties(range),
    items: range.members
  });
}
function upgradeService(service) {
  const { "@id": id, "@type": type, "@context": context, profile, ...additionalProps } = service;
  const newService = {};
  if (id) {
    newService["@id"] = id;
  }
  newService["@type"] = getNewType(service);
  if (newService["@type"] === "unknown") {
    if (context && context.length) {
      newService["@context"] = context;
    }
    newService["@type"] = "Service";
  }
  if (profile) {
    newService.profile = getProfile(profile);
  }
  return removeUndefinedProperties({
    ...newService,
    ...additionalProps
  });
}
function upgradeLayer(layer) {
  return removeUndefinedProperties({
    ...technicalProperties(layer),
    ...descriptiveProperties(layer),
    ...linkingProperties(layer)
  });
}
const presentation2to3 = new Traverse({
  collection: [upgradeCollection],
  manifest: [upgradeManifest],
  canvas: [upgradeCanvas],
  annotationList: [upgradeAnnotationList],
  sequence: [upgradeSequence],
  annotation: [upgradeAnnotation],
  contentResource: [upgradeContentResource],
  choice: [upgradeChoice],
  range: [upgradeRange],
  service: [upgradeService],
  layer: [upgradeLayer]
});
function convertPresentation2(entity) {
  if (entity && entity["@context"] && (entity["@context"] === "http://iiif.io/api/presentation/2/context.json" || entity["@context"].indexOf("http://iiif.io/api/presentation/2/context.json") !== -1 || entity["@context"] === "http://www.shared-canvas.org/ns/context.json") || entity["@context"] === "http://iiif.io/api/image/2/context.json") {
    return presentation2to3.traverseUnknown(entity);
  }
  return entity;
}
function upgradeSelector(selector) {
  const isSvgSelector = (Array.isArray(selector["@type"]) && selector["@type"].includes("oa:SvgSelector") || selector["@type"] == "oa:SvgSelector") && ("chars" in selector || "value" in selector);
  if (isSvgSelector) {
    return {
      type: "SvgSelector",
      value: "chars" in selector ? selector.chars : selector.value
    };
  }
  if (selector["@type"] === "oa:FragmentSelector") {
    return {
      type: "FragmentSelector",
      value: selector.value
    };
  }
  if (selector["@type"] === "oa:Choice") {
    return [
      upgradeSelector(selector.default),
      ...(Array.isArray(selector.item) ? selector.item : [selector.item]).map(
        upgradeSelector
      )
    ];
  }
  if (selector["@type"] == "iiif:ImageApiSelector") {
    return {
      type: "ImageApiSelector",
      region: "region" in selector ? selector.region : void 0,
      rotation: "rotation" in selector ? selector.rotation : void 0
    };
  }
  throw new Error(`Unsupported selector type: ${selector["@type"]}`);
}
export {
  Traverse,
  convertLanguageMapping,
  convertPresentation2,
  getProfile,
  getTypeFromContext,
  identifyResource,
  presentation2to3,
  types
};
//# sourceMappingURL=index.mjs.map
