// Generated by dts-bundle-generator v6.13.0

import * as Presentation2 from '@iiif/presentation-2';
import { Annotation, AnnotationList, Canvas, ChoiceEmbeddedContent, Collection, CommonContentResource, ContentResource, DescriptiveProperties, Layer, LinkingProperties, Manifest, OneOrMany, Range, RightsProperties, Sequence, Service, TraversableEntityTypes, Traversal, TraversalMap } from '@iiif/presentation-2';
import * as Presentation3 from '@iiif/presentation-3';

export declare const types: TraversableEntityTypes[];
export declare type TraverseOptions = {
	convertPropsToArray: boolean;
	mergeMemberProperties: boolean;
	allowUndefinedReturn: boolean;
};
export declare function identifyResource(resource: any): TraversableEntityTypes;
export declare class Traverse<T extends {
	Collection: any;
	Manifest: any;
	Canvas: any;
	AnnotationList: any;
	Sequence: any;
	Annotation: any;
	ContentResource: any;
	Choice: any;
	Range: any;
	Service: any;
	Layer: any;
} = {
	Collection: Collection;
	Manifest: Manifest;
	Canvas: Canvas;
	AnnotationList: AnnotationList;
	Sequence: Sequence;
	Annotation: Annotation;
	ContentResource: CommonContentResource;
	Choice: ChoiceEmbeddedContent;
	Range: Range;
	Service: Service;
	Layer: Layer;
}> {
	private traversals;
	private options;
	constructor(traversals: Partial<TraversalMap>, options?: Partial<TraverseOptions>);
	static all(traversal: (resource: any) => any): Traverse<{
		Collection: Collection;
		Manifest: Manifest;
		Canvas: Canvas;
		AnnotationList: AnnotationList;
		Sequence: Sequence;
		Annotation: Annotation;
		ContentResource: CommonContentResource;
		Choice: ChoiceEmbeddedContent;
		Range: Range;
		Service: import("@iiif/presentation-3").Service;
		Layer: Layer;
	}>;
	traverseCollection(collection: Collection): T["Collection"];
	traverseCollectionItems(collection: Collection): Collection;
	traverseManifest(manifest: Manifest): T["Manifest"];
	traverseManifestItems(manifest: Manifest): Manifest;
	traverseSequence(sequence: Sequence): T["Sequence"];
	traverseSequenceItems(sequence: Sequence): Sequence;
	traverseCanvas(canvas: Canvas): T["Canvas"];
	traverseCanvasItems(canvas: Canvas): Canvas;
	traverseRange(range: Range): T["Range"];
	traverseRangeItems(range: Range): Range;
	traverseAnnotationList(annotationList: AnnotationList): T["AnnotationList"];
	traverseAnnotationListItems(annotationList: AnnotationList): AnnotationList;
	traverseAnnotation(annotation: Annotation): T["Annotation"];
	traverseAnnotationItems(annotation: Annotation): Annotation;
	traverseLayer(layer: Layer): T["Layer"];
	traverseLayerItems(layer: Layer): Layer;
	traverseChoice(choice: ChoiceEmbeddedContent): T["Choice"];
	traverseChoiceItems(choice: ChoiceEmbeddedContent): ChoiceEmbeddedContent;
	traverseService(service: Service): T["Service"];
	traverseContentResource(contentResource: CommonContentResource): T["ContentResource"];
	traverseUnknown(item: any): any;
	traverseImageResource(contentResource: OneOrMany<string | ContentResource>): any;
	traverseDescriptive<T extends Partial<DescriptiveProperties & RightsProperties>>(resource: T): T;
	traverseOneOrMoreServices(allServices: OneOrMany<any>): T["Service"] | T["Service"][];
	traverseLinking<T extends Partial<LinkingProperties>>(resource: T): T;
	traverseOneOrManyType<T, Return = T>(object: T | T[], traversals: Array<Traversal<T>>): Return;
	traverseType<T, Return = T>(object: T, traversals: Array<Traversal<T>>): Return;
}
export declare function convertLanguageMapping(inputLangProperty?: Presentation2.OneOrMany<Presentation2.LanguageProperty>, defaultLang?: string): Presentation3.InternationalString;
export declare function getProfile(profile: any | any[]): string | undefined;
export declare function getTypeFromContext(inputContexts: string | string[]): string | undefined;
export declare const presentation2to3: Traverse<{
	Collection: Presentation3.Collection;
	Manifest: Presentation3.Manifest;
	Canvas: Presentation3.Canvas;
	AnnotationList: Presentation3.AnnotationPage;
	Sequence: Presentation3.Canvas[];
	Annotation: Presentation3.Annotation;
	ContentResource: Presentation3.ContentResource;
	Choice: Presentation3.ChoiceBody;
	Range: Presentation3.Range;
	Service: Presentation3.Service;
	Layer: Presentation3.AnnotationCollection;
}>;
export declare function convertPresentation2(entity: any): Presentation3.Manifest | Presentation3.Collection;

export {};
