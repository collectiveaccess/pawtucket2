// Generated by dts-bundle-generator v6.13.0

import * as Presentation2 from '@iiif/presentation-2';
import { Annotation, AnnotationCollection, AnnotationCollectionNormalized, AnnotationNormalized, AnnotationPage, AnnotationPageNormalized, Canvas, CanvasNormalized, ChoiceBody, ChoiceTarget, Collection, CollectionNormalized, ContentResource, DescriptiveProperties, InternationalString, LinkingProperties, Manifest, ManifestNormalized, Range, RangeNormalized, Reference, ResourceProvider, ResourceProviderNormalized, Selector, Service, ServiceNormalized } from '@iiif/presentation-3';

export declare const EMPTY: never[];
export declare const emptyAnnotation: AnnotationNormalized;
export declare const emptyAnnotationPage: AnnotationPageNormalized;
export declare const emptyCanvas: CanvasNormalized;
export declare const emptyCollection: CollectionNormalized;
export declare const emptyManifest: ManifestNormalized;
export declare const emptyRange: RangeNormalized;
export declare const emptyAgent: ResourceProviderNormalized;
export declare const UNSET = "__$UNSET$__";
export declare const UNWRAP = "__$UNWRAP$__";
export declare type Field = any[];
export declare type CompatibleStore<T extends string = string> = {
	requests: {
		[url: string]: {
			resourceUri?: string;
		} & any;
	};
	entities: {
		[type in T]: {
			[id: string]: NormalizedEntity;
		};
	};
	mapping: {
		[id: string]: T;
	};
};
export declare type NormalizedEntity = CollectionNormalized | ManifestNormalized | CanvasNormalized | AnnotationPageNormalized | AnnotationCollectionNormalized | AnnotationCollection | AnnotationNormalized | ContentResource | RangeNormalized | ServiceNormalized | Selector | ResourceProviderNormalized;
export declare type SerializerContext = {
	isTopLevel?: boolean;
};
export declare type Serializer<Type extends NormalizedEntity> = (entity: Type, state: any, context: SerializerContext) => Generator<Reference | Reference[], typeof UNSET | Field[], any>;
export declare type SerializeConfig = {
	Collection?: Serializer<CollectionNormalized>;
	Manifest?: Serializer<ManifestNormalized>;
	Canvas?: Serializer<CanvasNormalized>;
	AnnotationPage?: Serializer<AnnotationPageNormalized>;
	AnnotationCollection?: Serializer<AnnotationCollectionNormalized>;
	Annotation?: Serializer<AnnotationNormalized>;
	ContentResource?: Serializer<ContentResource>;
	Range?: Serializer<RangeNormalized>;
	Service?: Serializer<ServiceNormalized>;
	Selector?: Serializer<Selector>;
	Agent?: Serializer<ResourceProviderNormalized>;
};
export declare function serializedFieldsToObject<T>(fields: Field[] | [
	string
]): T;
export declare function serialize<Return>(state: CompatibleStore, subject: Reference, config: SerializeConfig): Return;
export declare const defaultEntities: {
	Collection: {};
	Manifest: {};
	Canvas: {};
	AnnotationPage: {};
	AnnotationCollection: {};
	Annotation: {};
	ContentResource: {};
	Range: {};
	Service: {};
	Selector: {};
	Agent: {};
};
export declare function getDefaultEntities(): {
	Collection: {};
	Manifest: {};
	Canvas: {};
	AnnotationPage: {};
	AnnotationCollection: {};
	Annotation: {};
	ContentResource: {};
	Range: {};
	Service: {};
	Selector: {};
	Agent: {};
};
export declare function mergeEntities(existing: NormalizedEntity, incoming: any): NormalizedEntity;
export declare function normalize(unknownEntity: unknown): {
	entities: {
		Collection: {};
		Manifest: {};
		Canvas: {};
		AnnotationPage: {};
		AnnotationCollection: {};
		Annotation: {};
		ContentResource: {};
		Range: {};
		Service: {};
		Selector: {};
		Agent: {};
	};
	resource: Reference<string>;
	mapping: {};
};
export declare const types: string[];
export declare type Traversal<T> = (jsonLd: T) => Partial<T> | any;
export declare type TraversalMap = {
	collection?: Array<Traversal<Collection>>;
	manifest?: Array<Traversal<Manifest>>;
	canvas?: Array<Traversal<Canvas>>;
	annotationCollection?: Array<Traversal<AnnotationCollection>>;
	annotationPage?: Array<Traversal<AnnotationPage>>;
	annotation?: Array<Traversal<Annotation>>;
	contentResource?: Array<Traversal<ContentResource>>;
	choice?: Array<Traversal<ChoiceTarget | ChoiceBody>>;
	range?: Array<Traversal<Range>>;
	service?: Array<Traversal<Service>>;
	agent?: Array<Traversal<ResourceProvider>>;
};
export declare type TraverseOptions = {
	allowUndefinedReturn: boolean;
};
export declare function identifyResource(resource: any): string;
export declare class Traverse {
	private traversals;
	private options;
	constructor(traversals: TraversalMap, options?: Partial<TraverseOptions>);
	static all(traversal: (resource: any) => any): Traverse;
	traverseDescriptive<T extends Partial<DescriptiveProperties>>(resource: T): T;
	traverseLinking<T extends Partial<LinkingProperties>>(resource: T): T;
	traverseCollectionItems(collection: Collection): Collection;
	traverseCollection(collection: Collection): Collection;
	traverseManifestItems(manifest: Manifest): Manifest;
	traverseManifestStructures(manifest: Manifest): Manifest;
	traverseManifest(manifest: Manifest): Manifest;
	traverseCanvasItems(canvas: Canvas): Canvas;
	traverseInlineAnnotationPages<T extends Manifest | Canvas | Range | string>(resource: T): T;
	traverseCanvas(canvas: Canvas): Canvas;
	traverseAnnotationPageItems(annotationPage: AnnotationPage): AnnotationPage;
	traverseAnnotationPage(annotationPageJson: AnnotationPage): AnnotationPage;
	traverseAnnotationBody(annotation: Annotation): Annotation;
	traversePosterCanvas<T extends Collection | Manifest | Canvas | Range>(json: T): T;
	traverseAnnotation(annotationJson: Annotation): Annotation;
	traverseContentResourceLinking(contentResourceJson: ContentResource): ContentResource;
	traverseContentResource(contentResourceJson: ContentResource): ContentResource;
	traverseRangeRanges(range: Range): Range;
	traverseRange(range: Range): Range;
	traverseAgent(agent: ResourceProvider): ResourceProvider;
	traverseType<T>(object: T, traversals: Array<Traversal<T>>): T;
	traverseService(service: Service): Service;
	traverseUnknown(resource: any): ({
		id: string;
	} & {
		label: string;
		confirmLabel?: string | undefined;
		header?: string | undefined;
		description?: string | undefined;
		failureHeader?: string | undefined;
		failureDescription?: string | undefined;
	} & {
		profile: "http://iiif.io/api/auth/1/login" | "AuthCookieService1";
		service: (import("@iiif/presentation-3").AuthLoginService | import("@iiif/presentation-3").AuthLogoutService)[];
	}) | ({
		"@id": string;
	} & {
		label: string;
		confirmLabel?: string | undefined;
		header?: string | undefined;
		description?: string | undefined;
		failureHeader?: string | undefined;
		failureDescription?: string | undefined;
	} & {
		profile: "http://iiif.io/api/auth/1/login" | "AuthCookieService1";
		service: (import("@iiif/presentation-3").AuthLoginService | import("@iiif/presentation-3").AuthLogoutService)[];
	}) | ({
		id: string;
	} & {
		profile: "http://iiif.io/api/auth/1/clickthrough";
		service: import("@iiif/presentation-3").AuthAccessTokenService;
	}) | ({
		"@id": string;
	} & {
		profile: "http://iiif.io/api/auth/1/clickthrough";
		service: import("@iiif/presentation-3").AuthAccessTokenService;
	}) | ({
		id: string;
	} & {
		label: string;
		confirmLabel?: string | undefined;
		header?: string | undefined;
		description?: string | undefined;
		failureHeader?: string | undefined;
		failureDescription?: string | undefined;
	} & {
		profile: "http://iiif.io/api/auth/1/kiosk";
		service: import("@iiif/presentation-3").AuthAccessTokenService;
	}) | ({
		"@id": string;
	} & {
		label: string;
		confirmLabel?: string | undefined;
		header?: string | undefined;
		description?: string | undefined;
		failureHeader?: string | undefined;
		failureDescription?: string | undefined;
	} & {
		profile: "http://iiif.io/api/auth/1/kiosk";
		service: import("@iiif/presentation-3").AuthAccessTokenService;
	}) | ({
		id: string;
	} & {
		label: string;
		confirmLabel?: string | undefined;
		header?: string | undefined;
		description?: string | undefined;
		failureHeader?: string | undefined;
		failureDescription?: string | undefined;
	} & {
		profile: "http://iiif.io/api/auth/1/external";
		service: import("@iiif/presentation-3").AuthAccessTokenService;
	}) | ({
		"@id": string;
	} & {
		label: string;
		confirmLabel?: string | undefined;
		header?: string | undefined;
		description?: string | undefined;
		failureHeader?: string | undefined;
		failureDescription?: string | undefined;
	} & {
		profile: "http://iiif.io/api/auth/1/external";
		service: import("@iiif/presentation-3").AuthAccessTokenService;
	}) | ({
		"@context": "http://geojson.org/geojson-ld/geojson-context.jsonld";
		profile: never;
	} & {
		"@id": string;
	} & Partial<import("geojson").Point>) | ({
		"@context": "http://geojson.org/geojson-ld/geojson-context.jsonld";
		profile: never;
	} & {
		"@id": string;
	} & Partial<import("geojson").MultiPoint>) | ({
		"@context": "http://geojson.org/geojson-ld/geojson-context.jsonld";
		profile: never;
	} & {
		"@id": string;
	} & Partial<import("geojson").LineString>) | ({
		"@context": "http://geojson.org/geojson-ld/geojson-context.jsonld";
		profile: never;
	} & {
		"@id": string;
	} & Partial<import("geojson").MultiLineString>) | ({
		"@context": "http://geojson.org/geojson-ld/geojson-context.jsonld";
		profile: never;
	} & {
		"@id": string;
	} & Partial<import("geojson").Polygon>) | ({
		"@context": "http://geojson.org/geojson-ld/geojson-context.jsonld";
		profile: never;
	} & {
		"@id": string;
	} & Partial<import("geojson").MultiPolygon>) | ({
		"@context": "http://geojson.org/geojson-ld/geojson-context.jsonld";
		profile: never;
	} & {
		"@id": string;
	} & Partial<import("geojson").GeometryCollection<import("geojson").Geometry>>) | ({
		"@context": "http://geojson.org/geojson-ld/geojson-context.jsonld";
		profile: never;
	} & {
		"@id": string;
	} & Partial<import("geojson").Feature<import("geojson").Geometry, import("geojson").GeoJsonProperties>>) | ({
		"@context": "http://geojson.org/geojson-ld/geojson-context.jsonld";
		profile: never;
	} & {
		"@id": string;
	} & Partial<import("geojson").FeatureCollection<import("geojson").Geometry, import("geojson").GeoJsonProperties>>) | ({
		"@context": "http://geojson.org/geojson-ld/geojson-context.jsonld";
		profile: never;
	} & {
		id: string;
	} & Partial<import("geojson").Point>) | ({
		"@context": "http://geojson.org/geojson-ld/geojson-context.jsonld";
		profile: never;
	} & {
		id: string;
	} & Partial<import("geojson").MultiPoint>) | ({
		"@context": "http://geojson.org/geojson-ld/geojson-context.jsonld";
		profile: never;
	} & {
		id: string;
	} & Partial<import("geojson").LineString>) | ({
		"@context": "http://geojson.org/geojson-ld/geojson-context.jsonld";
		profile: never;
	} & {
		id: string;
	} & Partial<import("geojson").MultiLineString>) | ({
		"@context": "http://geojson.org/geojson-ld/geojson-context.jsonld";
		profile: never;
	} & {
		id: string;
	} & Partial<import("geojson").Polygon>) | ({
		"@context": "http://geojson.org/geojson-ld/geojson-context.jsonld";
		profile: never;
	} & {
		id: string;
	} & Partial<import("geojson").MultiPolygon>) | ({
		"@context": "http://geojson.org/geojson-ld/geojson-context.jsonld";
		profile: never;
	} & {
		id: string;
	} & Partial<import("geojson").GeometryCollection<import("geojson").Geometry>>) | ({
		"@context": "http://geojson.org/geojson-ld/geojson-context.jsonld";
		profile: never;
	} & {
		id: string;
	} & Partial<import("geojson").Feature<import("geojson").Geometry, import("geojson").GeoJsonProperties>>) | ({
		"@context": "http://geojson.org/geojson-ld/geojson-context.jsonld";
		profile: never;
	} & {
		id: string;
	} & Partial<import("geojson").FeatureCollection<import("geojson").Geometry, import("geojson").GeoJsonProperties>>) | import("@iiif/presentation-3").ImageService | ({
		id: string;
	} & {
		"@context": "http://iiif.io/api/search/1/context.json";
		profile: "http://iiif.io/api/search/1/search" | "SearchService1";
	}) | ({
		"@id": string;
	} & {
		"@context": "http://iiif.io/api/search/1/context.json";
		profile: "http://iiif.io/api/search/1/search" | "SearchService1";
	}) | import("@iiif/presentation-3").ExternalWebResource | import("@iiif/presentation-3").SpecificResource<any> | AnnotationPage | Collection | Manifest | Canvas | Annotation | import("@iiif/presentation-3").EmbeddedResource | Range | ResourceProvider;
}
export declare function languageString2to3(value: InternationalString | null | undefined): Presentation2.LanguageProperty | Presentation2.LanguageProperty[] | undefined;
export declare const serializeConfigPresentation2: SerializeConfig;
export declare const serializeConfigPresentation3: SerializeConfig;

export {};
