{"version":3,"file":"thumbnail.js","sources":["../../../src/thumbnail.ts"],"sourcesContent":["import {\n  AnnotationNormalized,\n  AnnotationPageNormalized,\n  CanvasNormalized,\n  ChoiceBody,\n  CollectionItemSchemas,\n  CollectionNormalized,\n  ContentResource,\n  ManifestNormalized,\n  Reference,\n} from '@iiif/presentation-3';\nimport { Vault } from '@iiif/vault';\nimport {\n  FixedSizeImage,\n  FixedSizeImageService,\n  getFixedSizeFromImage,\n  ImageCandidate,\n  ImageCandidateRequest,\n  ImageServiceLoader,\n  UnknownSizeImage,\n  VariableSizeImage,\n} from '@atlas-viewer/iiif-image-api';\n\nexport function createThumbnailHelper(vault: Vault, dependencies: { imageServiceLoader?: ImageServiceLoader } = {}) {\n  const imageServiceLoader = dependencies.imageServiceLoader || new ImageServiceLoader();\n\n  async function getBestThumbnailAtSize(\n    input:\n      | string\n      | Reference<CollectionItemSchemas>\n      | Reference<'Collection'>\n      | Reference<'Manifest'>\n      | Reference<'Canvas'>\n      | Reference<'Annotation'>\n      | Reference<'AnnotationPage'>\n      | Reference<'ContentResource'>\n      | CollectionNormalized\n      | ManifestNormalized\n      | CanvasNormalized\n      | AnnotationNormalized\n      | AnnotationPageNormalized\n      | ContentResource,\n    request: ImageCandidateRequest,\n    dereference?: boolean,\n    candidates: Array<ImageCandidate> = [],\n    dimensions?: { width: number; height: number }\n  ): Promise<{\n    best: null | undefined | FixedSizeImage | FixedSizeImageService | VariableSizeImage | UnknownSizeImage;\n    fallback: Array<ImageCandidate>;\n    log: string[];\n  }> {\n    if (typeof input === 'string') {\n      // Best shot we have.\n      return { best: getFixedSizeFromImage(input as any), fallback: [], log: [] };\n    }\n\n    // Run through from ref, just in case.\n    const fullInput:\n      | string\n      | ManifestNormalized\n      | CollectionNormalized\n      | CanvasNormalized\n      | AnnotationNormalized\n      | AnnotationPageNormalized\n      | ContentResource = vault.get(input as any) as any;\n\n    if (typeof fullInput === 'string') {\n      return { best: getFixedSizeFromImage(fullInput as any), fallback: [], log: [] };\n    }\n\n    switch (fullInput.type) {\n      case 'Annotation': {\n        // Grab the body.\n        const contentResources = fullInput.body;\n        // @todo this could be configuration.\n        const firstContentResources = vault.get<ContentResource>(contentResources[0]);\n        if (dimensions && !(firstContentResources as any).width) {\n          (firstContentResources as any).width = dimensions.width;\n          (firstContentResources as any).height = dimensions.height;\n        }\n\n        return await imageServiceLoader.getThumbnailFromResource(\n          firstContentResources as any,\n          request,\n          dereference,\n          candidates\n        );\n      }\n\n      case 'Canvas': {\n        const canvas = fullInput as CanvasNormalized;\n        // check for thumbnail resource first?\n        if (canvas.thumbnail && canvas.thumbnail.length) {\n          const thumbnail = vault.get<ContentResource>(canvas.thumbnail[0]);\n          const potentialThumbnails = await imageServiceLoader.getImageCandidates(thumbnail as any, dereference);\n          if (potentialThumbnails && potentialThumbnails.length) {\n            candidates.push(...potentialThumbnails);\n          }\n        }\n\n        return getBestThumbnailAtSize(canvas.items[0], request, dereference, candidates, {\n          width: canvas.width,\n          height: canvas.height,\n        });\n      }\n\n      // Unsupported for now.\n      case 'AnnotationPage': {\n        const annotationPage = fullInput as AnnotationPageNormalized;\n        return getBestThumbnailAtSize(annotationPage.items[0], request, dereference, candidates, dimensions);\n      }\n\n      case 'Choice': {\n        const choice: ChoiceBody = fullInput as any;\n        // @todo this could also be configuration, just choosing the first choice.\n        return getBestThumbnailAtSize(choice.items[0] as any, request, dereference, candidates, dimensions);\n      }\n      case 'Collection': {\n        // This one is tricky, as the manifests may not have been loaded. But we will give it a shot.\n        const collection = fullInput as CollectionNormalized;\n        const firstManifest = collection.items[0];\n        return getBestThumbnailAtSize(firstManifest, request, dereference, candidates, dimensions);\n      }\n\n      case 'Manifest': {\n        const manifest = fullInput as ManifestNormalized;\n        const firstCanvas = manifest.items[0];\n        return getBestThumbnailAtSize(firstCanvas, request, dereference, candidates, dimensions);\n      }\n\n      case 'SpecificResource':\n      case 'Image':\n      case 'Dataset':\n      case 'Sound':\n      case 'Text':\n      case 'TextualBody':\n      case 'Video':\n        if (dimensions && !(fullInput as any).width) {\n          (fullInput as any).width = dimensions.width;\n          (fullInput as any).height = dimensions.height;\n        }\n\n        return imageServiceLoader.getThumbnailFromResource(fullInput as any, request, dereference, candidates);\n\n      // Seems unlikely these would appear, but it would be an error..\n      case 'Service': // @todo could do something with vault.\n      case 'Range':\n      case 'AnnotationCollection':\n      case 'CanvasReference':\n      case 'ContentResource':\n        return { best: undefined, fallback: [], log: [] };\n    }\n\n    return { best: undefined, fallback: [], log: [] };\n  }\n\n  return {\n    getBestThumbnailAtSize,\n  };\n}\n"],"names":["createThumbnailHelper","vault","dependencies","imageServiceLoader","ImageServiceLoader","getBestThumbnailAtSize","input","request","dereference","candidates","dimensions","getFixedSizeFromImage","fullInput","contentResources","firstContentResources","canvas","thumbnail","potentialThumbnails","firstManifest","firstCanvas"],"mappings":"0JAuBO,SAASA,EAAsBC,EAAcC,EAA4D,GAAI,CAClH,MAAMC,EAAqBD,EAAa,oBAAsB,IAAIE,EAAmB,mBAErF,eAAeC,EACbC,EAeAC,EACAC,EACAC,EAAoC,GACpCC,EAKC,CACG,GAAA,OAAOJ,GAAU,SAEZ,MAAA,CAAE,KAAMK,EAAAA,sBAAsBL,CAAY,EAAG,SAAU,CAAC,EAAG,IAAK,CAAA,GAInE,MAAAM,EAOgBX,EAAM,IAAIK,CAAY,EAExC,GAAA,OAAOM,GAAc,SAChB,MAAA,CAAE,KAAMD,EAAAA,sBAAsBC,CAAgB,EAAG,SAAU,CAAC,EAAG,IAAK,CAAA,GAG7E,OAAQA,EAAU,UACX,aAAc,CAEjB,MAAMC,EAAmBD,EAAU,KAE7BE,EAAwBb,EAAM,IAAqBY,EAAiB,EAAE,EACxE,OAAAH,GAAc,CAAEI,EAA8B,QAC/CA,EAA8B,MAAQJ,EAAW,MACjDI,EAA8B,OAASJ,EAAW,QAG9C,MAAMP,EAAmB,yBAC9BW,EACAP,EACAC,EACAC,CAAA,CAEJ,KAEK,SAAU,CACb,MAAMM,EAASH,EAEf,GAAIG,EAAO,WAAaA,EAAO,UAAU,OAAQ,CAC/C,MAAMC,EAAYf,EAAM,IAAqBc,EAAO,UAAU,EAAE,EAC1DE,EAAsB,MAAMd,EAAmB,mBAAmBa,EAAkBR,CAAW,EACjGS,GAAuBA,EAAoB,QAClCR,EAAA,KAAK,GAAGQ,CAAmB,CAE1C,CAEA,OAAOZ,EAAuBU,EAAO,MAAM,GAAIR,EAASC,EAAaC,EAAY,CAC/E,MAAOM,EAAO,MACd,OAAQA,EAAO,MAAA,CAChB,CACH,KAGK,iBAEH,OAAOV,EADgBO,EACsB,MAAM,GAAIL,EAASC,EAAaC,EAAYC,CAAU,MAGhG,SAGH,OAAOL,EAFoBO,EAEU,MAAM,GAAWL,EAASC,EAAaC,EAAYC,CAAU,MAE/F,aAAc,CAGX,MAAAQ,EADaN,EACc,MAAM,GACvC,OAAOP,EAAuBa,EAAeX,EAASC,EAAaC,EAAYC,CAAU,CAC3F,KAEK,WAAY,CAET,MAAAS,EADWP,EACY,MAAM,GACnC,OAAOP,EAAuBc,EAAaZ,EAASC,EAAaC,EAAYC,CAAU,CACzF,KAEK,uBACA,YACA,cACA,YACA,WACA,kBACA,QACC,OAAAA,GAAc,CAAEE,EAAkB,QACnCA,EAAkB,MAAQF,EAAW,MACrCE,EAAkB,OAASF,EAAW,QAGlCP,EAAmB,yBAAyBS,EAAkBL,EAASC,EAAaC,CAAU,MAGlG,cACA,YACA,2BACA,sBACA,kBACI,MAAA,CAAE,KAAM,OAAW,SAAU,GAAI,IAAK,CAAA,GAG1C,MAAA,CAAE,KAAM,OAAW,SAAU,GAAI,IAAK,CAAA,EAC/C,CAEO,MAAA,CACL,uBAAAJ,CAAA,CAEJ"}