{"version":3,"file":"thumbnail.mjs","sources":["../../../src/thumbnail.ts"],"sourcesContent":["import {\n  AnnotationNormalized,\n  AnnotationPageNormalized,\n  CanvasNormalized,\n  ChoiceBody,\n  CollectionItemSchemas,\n  CollectionNormalized,\n  ContentResource,\n  ManifestNormalized,\n  Reference,\n} from '@iiif/presentation-3';\nimport { Vault } from '@iiif/vault';\nimport {\n  FixedSizeImage,\n  FixedSizeImageService,\n  getFixedSizeFromImage,\n  ImageCandidate,\n  ImageCandidateRequest,\n  ImageServiceLoader,\n  UnknownSizeImage,\n  VariableSizeImage,\n} from '@atlas-viewer/iiif-image-api';\n\nexport function createThumbnailHelper(vault: Vault, dependencies: { imageServiceLoader?: ImageServiceLoader } = {}) {\n  const imageServiceLoader = dependencies.imageServiceLoader || new ImageServiceLoader();\n\n  async function getBestThumbnailAtSize(\n    input:\n      | string\n      | Reference<CollectionItemSchemas>\n      | Reference<'Collection'>\n      | Reference<'Manifest'>\n      | Reference<'Canvas'>\n      | Reference<'Annotation'>\n      | Reference<'AnnotationPage'>\n      | Reference<'ContentResource'>\n      | CollectionNormalized\n      | ManifestNormalized\n      | CanvasNormalized\n      | AnnotationNormalized\n      | AnnotationPageNormalized\n      | ContentResource,\n    request: ImageCandidateRequest,\n    dereference?: boolean,\n    candidates: Array<ImageCandidate> = [],\n    dimensions?: { width: number; height: number }\n  ): Promise<{\n    best: null | undefined | FixedSizeImage | FixedSizeImageService | VariableSizeImage | UnknownSizeImage;\n    fallback: Array<ImageCandidate>;\n    log: string[];\n  }> {\n    if (typeof input === 'string') {\n      // Best shot we have.\n      return { best: getFixedSizeFromImage(input as any), fallback: [], log: [] };\n    }\n\n    // Run through from ref, just in case.\n    const fullInput:\n      | string\n      | ManifestNormalized\n      | CollectionNormalized\n      | CanvasNormalized\n      | AnnotationNormalized\n      | AnnotationPageNormalized\n      | ContentResource = vault.get(input as any) as any;\n\n    if (typeof fullInput === 'string') {\n      return { best: getFixedSizeFromImage(fullInput as any), fallback: [], log: [] };\n    }\n\n    switch (fullInput.type) {\n      case 'Annotation': {\n        // Grab the body.\n        const contentResources = fullInput.body;\n        // @todo this could be configuration.\n        const firstContentResources = vault.get<ContentResource>(contentResources[0]);\n        if (dimensions && !(firstContentResources as any).width) {\n          (firstContentResources as any).width = dimensions.width;\n          (firstContentResources as any).height = dimensions.height;\n        }\n\n        return await imageServiceLoader.getThumbnailFromResource(\n          firstContentResources as any,\n          request,\n          dereference,\n          candidates\n        );\n      }\n\n      case 'Canvas': {\n        const canvas = fullInput as CanvasNormalized;\n        // check for thumbnail resource first?\n        if (canvas.thumbnail && canvas.thumbnail.length) {\n          const thumbnail = vault.get<ContentResource>(canvas.thumbnail[0]);\n          const potentialThumbnails = await imageServiceLoader.getImageCandidates(thumbnail as any, dereference);\n          if (potentialThumbnails && potentialThumbnails.length) {\n            candidates.push(...potentialThumbnails);\n          }\n        }\n\n        return getBestThumbnailAtSize(canvas.items[0], request, dereference, candidates, {\n          width: canvas.width,\n          height: canvas.height,\n        });\n      }\n\n      // Unsupported for now.\n      case 'AnnotationPage': {\n        const annotationPage = fullInput as AnnotationPageNormalized;\n        return getBestThumbnailAtSize(annotationPage.items[0], request, dereference, candidates, dimensions);\n      }\n\n      case 'Choice': {\n        const choice: ChoiceBody = fullInput as any;\n        // @todo this could also be configuration, just choosing the first choice.\n        return getBestThumbnailAtSize(choice.items[0] as any, request, dereference, candidates, dimensions);\n      }\n      case 'Collection': {\n        // This one is tricky, as the manifests may not have been loaded. But we will give it a shot.\n        const collection = fullInput as CollectionNormalized;\n        const firstManifest = collection.items[0];\n        return getBestThumbnailAtSize(firstManifest, request, dereference, candidates, dimensions);\n      }\n\n      case 'Manifest': {\n        const manifest = fullInput as ManifestNormalized;\n        const firstCanvas = manifest.items[0];\n        return getBestThumbnailAtSize(firstCanvas, request, dereference, candidates, dimensions);\n      }\n\n      case 'SpecificResource':\n      case 'Image':\n      case 'Dataset':\n      case 'Sound':\n      case 'Text':\n      case 'TextualBody':\n      case 'Video':\n        if (dimensions && !(fullInput as any).width) {\n          (fullInput as any).width = dimensions.width;\n          (fullInput as any).height = dimensions.height;\n        }\n\n        return imageServiceLoader.getThumbnailFromResource(fullInput as any, request, dereference, candidates);\n\n      // Seems unlikely these would appear, but it would be an error..\n      case 'Service': // @todo could do something with vault.\n      case 'Range':\n      case 'AnnotationCollection':\n      case 'CanvasReference':\n      case 'ContentResource':\n        return { best: undefined, fallback: [], log: [] };\n    }\n\n    return { best: undefined, fallback: [], log: [] };\n  }\n\n  return {\n    getBestThumbnailAtSize,\n  };\n}\n"],"names":[],"mappings":";AAuBO,SAAS,sBAAsB,OAAc,eAA4D,IAAI;AAClH,QAAM,qBAAqB,aAAa,sBAAsB,IAAI,mBAAmB;AAErF,iBAAe,uBACb,OAeA,SACA,aACA,aAAoC,IACpC,YAKC;AACG,QAAA,OAAO,UAAU,UAAU;AAEtB,aAAA,EAAE,MAAM,sBAAsB,KAAY,GAAG,UAAU,CAAC,GAAG,KAAK,CAAA;IACzE;AAGM,UAAA,YAOgB,MAAM,IAAI,KAAY;AAExC,QAAA,OAAO,cAAc,UAAU;AAC1B,aAAA,EAAE,MAAM,sBAAsB,SAAgB,GAAG,UAAU,CAAC,GAAG,KAAK,CAAA;IAC7E;AAEA,YAAQ,UAAU;AAAA,WACX,cAAc;AAEjB,cAAM,mBAAmB,UAAU;AAEnC,cAAM,wBAAwB,MAAM,IAAqB,iBAAiB,EAAE;AACxE,YAAA,cAAc,CAAE,sBAA8B,OAAO;AACtD,gCAA8B,QAAQ,WAAW;AACjD,gCAA8B,SAAS,WAAW;AAAA,QACrD;AAEA,eAAO,MAAM,mBAAmB;AAAA,UAC9B;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QAAA;AAAA,MAEJ;AAAA,WAEK,UAAU;AACb,cAAM,SAAS;AAEf,YAAI,OAAO,aAAa,OAAO,UAAU,QAAQ;AAC/C,gBAAM,YAAY,MAAM,IAAqB,OAAO,UAAU,EAAE;AAChE,gBAAM,sBAAsB,MAAM,mBAAmB,mBAAmB,WAAkB,WAAW;AACjG,cAAA,uBAAuB,oBAAoB,QAAQ;AAC1C,uBAAA,KAAK,GAAG,mBAAmB;AAAA,UACxC;AAAA,QACF;AAEA,eAAO,uBAAuB,OAAO,MAAM,IAAI,SAAS,aAAa,YAAY;AAAA,UAC/E,OAAO,OAAO;AAAA,UACd,QAAQ,OAAO;AAAA,QAAA,CAChB;AAAA,MACH;AAAA,WAGK,kBAAkB;AACrB,cAAM,iBAAiB;AACvB,eAAO,uBAAuB,eAAe,MAAM,IAAI,SAAS,aAAa,YAAY,UAAU;AAAA,MACrG;AAAA,WAEK,UAAU;AACb,cAAM,SAAqB;AAE3B,eAAO,uBAAuB,OAAO,MAAM,IAAW,SAAS,aAAa,YAAY,UAAU;AAAA,MACpG;AAAA,WACK,cAAc;AAEjB,cAAM,aAAa;AACb,cAAA,gBAAgB,WAAW,MAAM;AACvC,eAAO,uBAAuB,eAAe,SAAS,aAAa,YAAY,UAAU;AAAA,MAC3F;AAAA,WAEK,YAAY;AACf,cAAM,WAAW;AACX,cAAA,cAAc,SAAS,MAAM;AACnC,eAAO,uBAAuB,aAAa,SAAS,aAAa,YAAY,UAAU;AAAA,MACzF;AAAA,WAEK;AAAA,WACA;AAAA,WACA;AAAA,WACA;AAAA,WACA;AAAA,WACA;AAAA,WACA;AACC,YAAA,cAAc,CAAE,UAAkB,OAAO;AAC1C,oBAAkB,QAAQ,WAAW;AACrC,oBAAkB,SAAS,WAAW;AAAA,QACzC;AAEA,eAAO,mBAAmB,yBAAyB,WAAkB,SAAS,aAAa,UAAU;AAAA,WAGlG;AAAA,WACA;AAAA,WACA;AAAA,WACA;AAAA,WACA;AACI,eAAA,EAAE,MAAM,QAAW,UAAU,IAAI,KAAK,CAAA;;AAG1C,WAAA,EAAE,MAAM,QAAW,UAAU,IAAI,KAAK,CAAA;EAC/C;AAEO,SAAA;AAAA,IACL;AAAA,EAAA;AAEJ;;"}