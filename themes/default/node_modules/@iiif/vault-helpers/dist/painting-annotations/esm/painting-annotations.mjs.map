{"version":3,"file":"painting-annotations.mjs","sources":["../../../src/painting-annotations/parse-specific-resource.ts","../../../src/painting-annotations/helper.ts"],"sourcesContent":["import { ContentResource } from '@iiif/presentation-3';\n\nexport function parseSpecificResource(resource: ContentResource) {\n  if (resource.type === 'SpecificResource') {\n    return [resource.source, { selector: resource.selector }];\n  }\n\n  return [resource, { selector: null }];\n}\n","import { Vault } from '@iiif/vault';\nimport {\n  AnnotationNormalized,\n  AnnotationPageNormalized,\n  CanvasNormalized,\n  ContentResource,\n  IIIFExternalWebResource,\n} from '@iiif/presentation-3';\nimport { Paintables } from './types';\nimport { parseSpecificResource } from './parse-specific-resource';\n\nexport function createPaintingAnnotationsHelper(vault: Vault) {\n  function getAllPaintingAnnotations(canvasOrId: string | CanvasNormalized | undefined | null) {\n    const canvas = canvasOrId\n      ? typeof canvasOrId === 'string'\n        ? vault.get<CanvasNormalized>(canvasOrId)\n        : canvasOrId\n      : null;\n\n    if (!canvas) {\n      return [];\n    }\n    const annotationPages = vault.get<AnnotationPageNormalized>(canvas.items);\n    const flatAnnotations: AnnotationNormalized[] = [];\n    for (const page of annotationPages) {\n      flatAnnotations.push(...vault.get<AnnotationNormalized>(page.items));\n    }\n    return flatAnnotations;\n  }\n\n  function getPaintables(\n    paintingAnnotationsOrCanvas: string | CanvasNormalized | AnnotationNormalized[],\n    enabledChoices: string[] = []\n  ): Paintables {\n    const paintingAnnotations = Array.isArray(paintingAnnotationsOrCanvas)\n      ? paintingAnnotationsOrCanvas\n      : getAllPaintingAnnotations(paintingAnnotationsOrCanvas);\n\n    const types: string[] = [];\n    let choice: Paintables['choice'] = null;\n    const items: Paintables['items'] = [];\n\n    for (const annotation of paintingAnnotations) {\n      if (annotation.type !== 'Annotation') {\n        throw new Error(`getPaintables() accept either a canvas or list of annotations`);\n      }\n      const bodies = vault.get<ContentResource>(annotation.body);\n      for (const unknownBody of bodies) {\n        const [body, { selector }] = parseSpecificResource(unknownBody);\n        const type = (body.type || 'unknown').toLowerCase();\n\n        // Choice\n        if (type === 'choice') {\n          const nestedBodies = vault.get<ContentResource>(body.items) as ContentResource[];\n\n          // Which are active? By default, the first, but we could push multiple here.\n          const selected = enabledChoices.length\n            ? enabledChoices.map((cid) => nestedBodies.find((b) => b.id === cid)).filter(Boolean)\n            : [nestedBodies[0]];\n\n          if (selected.length === 0) {\n            selected.push(nestedBodies[0]);\n          }\n\n          // Store choice.\n          choice = {\n            type: 'single-choice',\n            items: nestedBodies.map((b) => ({\n              id: b.id,\n              label: (b as any).label as any,\n              selected: selected.indexOf(b) !== -1,\n            })) as any[],\n            label: (unknownBody as any).label,\n          };\n\n          // @todo insert in the right order.\n          bodies.push(...(selected as any[]));\n\n          continue;\n        }\n\n        if (types.indexOf(type) === -1) {\n          types.push(type);\n        }\n\n        items.push({\n          type: type,\n          resource: body as IIIFExternalWebResource,\n          target: annotation.target,\n          selector,\n        });\n      }\n    }\n\n    return {\n      types,\n      items,\n      choice,\n    };\n  }\n\n  function extractChoices(paintingAnnotationsOrCanvas: string | CanvasNormalized | AnnotationNormalized[]) {\n    const { choice } = getPaintables(paintingAnnotationsOrCanvas);\n    return choice;\n  }\n\n  return {\n    getAllPaintingAnnotations,\n    getPaintables,\n    extractChoices,\n  };\n}\n"],"names":[],"mappings":"AAEO,SAAS,sBAAsB,UAA2B;AAC3D,MAAA,SAAS,SAAS,oBAAoB;AACxC,WAAO,CAAC,SAAS,QAAQ,EAAE,UAAU,SAAS,UAAU;AAAA,EAC1D;AAEA,SAAO,CAAC,UAAU,EAAE,UAAU,KAAM,CAAA;AACtC;ACGO,SAAS,gCAAgC,OAAc;AAC5D,WAAS,0BAA0B,YAA0D;AACrF,UAAA,SAAS,aACX,OAAO,eAAe,WACpB,MAAM,IAAsB,UAAU,IACtC,aACF;AAEJ,QAAI,CAAC,QAAQ;AACX,aAAO;IACT;AACA,UAAM,kBAAkB,MAAM,IAA8B,OAAO,KAAK;AACxE,UAAM,kBAA0C,CAAA;AAChD,eAAW,QAAQ,iBAAiB;AAClC,sBAAgB,KAAK,GAAG,MAAM,IAA0B,KAAK,KAAK,CAAC;AAAA,IACrE;AACO,WAAA;AAAA,EACT;AAEA,WAAS,cACP,6BACA,iBAA2B,IACf;AACZ,UAAM,sBAAsB,MAAM,QAAQ,2BAA2B,IACjE,8BACA,0BAA0B,2BAA2B;AAEzD,UAAM,QAAkB,CAAA;AACxB,QAAI,SAA+B;AACnC,UAAM,QAA6B,CAAA;AAEnC,eAAW,cAAc,qBAAqB;AACxC,UAAA,WAAW,SAAS,cAAc;AAC9B,cAAA,IAAI,MAAM,+DAA+D;AAAA,MACjF;AACA,YAAM,SAAS,MAAM,IAAqB,WAAW,IAAI;AACzD,iBAAW,eAAe,QAAQ;AAChC,cAAM,CAAC,MAAM,EAAE,SAAU,CAAA,IAAI,sBAAsB,WAAW;AAC9D,cAAM,QAAQ,KAAK,QAAQ,WAAW,YAAY;AAGlD,YAAI,SAAS,UAAU;AACrB,gBAAM,eAAe,MAAM,IAAqB,KAAK,KAAK;AAGpD,gBAAA,WAAW,eAAe,SAC5B,eAAe,IAAI,CAAC,QAAQ,aAAa,KAAK,CAAC,MAAM,EAAE,OAAO,GAAG,CAAC,EAAE,OAAO,OAAO,IAClF,CAAC,aAAa,EAAE;AAEhB,cAAA,SAAS,WAAW,GAAG;AAChB,qBAAA,KAAK,aAAa,EAAE;AAAA,UAC/B;AAGS,mBAAA;AAAA,YACP,MAAM;AAAA,YACN,OAAO,aAAa,IAAI,CAAC,OAAO;AAAA,cAC9B,IAAI,EAAE;AAAA,cACN,OAAQ,EAAU;AAAA,cAClB,UAAU,SAAS,QAAQ,CAAC,MAAM;AAAA,YAAA,EAClC;AAAA,YACF,OAAQ,YAAoB;AAAA,UAAA;AAIvB,iBAAA,KAAK,GAAI,QAAkB;AAElC;AAAA,QACF;AAEA,YAAI,MAAM,QAAQ,IAAI,MAAM,IAAI;AAC9B,gBAAM,KAAK,IAAI;AAAA,QACjB;AAEA,cAAM,KAAK;AAAA,UACT;AAAA,UACA,UAAU;AAAA,UACV,QAAQ,WAAW;AAAA,UACnB;AAAA,QAAA,CACD;AAAA,MACH;AAAA,IACF;AAEO,WAAA;AAAA,MACL;AAAA,MACA;AAAA,MACA;AAAA,IAAA;AAAA,EAEJ;AAEA,WAAS,eAAe,6BAAiF;AACvG,UAAM,EAAE,OAAA,IAAW,cAAc,2BAA2B;AACrD,WAAA;AAAA,EACT;AAEO,SAAA;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,EAAA;AAEJ;;"}