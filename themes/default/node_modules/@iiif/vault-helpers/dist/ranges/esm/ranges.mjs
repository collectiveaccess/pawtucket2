function createRangeHelper(vault) {
  return {
    findFirstCanvasFromRange: (range) => findFirstCanvasFromRange(vault, range),
    findAllCanvasesInRange: (range) => findAllCanvasesInRange(vault, range),
    findManifestSelectedRange: (manifest, canvasId) => findManifestSelectedRange(vault, manifest, canvasId),
    findSelectedRange: (range, canvasId) => findSelectedRange(vault, range, canvasId)
  };
}
function findFirstCanvasFromRange(vault, range) {
  for (const inner of range.items) {
    if (inner.type === "Canvas") {
      return inner;
    }
    if (inner.type === "Range") {
      const found = findFirstCanvasFromRange(vault, vault.get(inner));
      if (found) {
        return found;
      }
    }
  }
  return null;
}
function findAllCanvasesInRange(vault, range) {
  const found = [];
  for (const inner of range.items) {
    if (inner.type === "Canvas") {
      if (inner.id.indexOf("#") !== -1) {
        found.push({ id: inner.id.split("#")[0], type: "Canvas" });
      } else {
        found.push(inner);
      }
    }
    if (inner.type === "Range") {
      found.push(...findAllCanvasesInRange(vault, vault.get(inner)));
    }
    if (inner.type === "SpecificResource") {
      const sourceId = typeof inner.source === "string" ? inner.source : inner.source.id;
      found.push({ id: sourceId, type: "Canvas" });
    }
  }
  return found;
}
function findManifestSelectedRange(vault, manifest, canvasId) {
  for (const range of manifest.structures) {
    const found = findSelectedRange(vault, vault.get(range), canvasId);
    if (found) {
      return found;
    }
  }
  return null;
}
function findSelectedRange(vault, range, canvasId) {
  var _a;
  for (const inner of range.items) {
    const parsedId = (_a = inner.id) == null ? void 0 : _a.split("#")[0];
    if (inner.type === "SpecificResource" && inner.source === canvasId) {
      return range;
    }
    if (inner.type === "Canvas" && canvasId === parsedId) {
      return range;
    }
    if (inner.type === "Range") {
      const found = findSelectedRange(vault, vault.get(inner), canvasId);
      if (found) {
        return found;
      }
    }
  }
  return null;
}
export { createRangeHelper, findAllCanvasesInRange, findFirstCanvasFromRange, findManifestSelectedRange, findSelectedRange };
//# sourceMappingURL=ranges.mjs.map
