import { ManifestNormalized, RangeNormalized, Reference } from '@iiif/presentation-3';
import { Vault } from '@iiif/vault';
export declare function createSequenceHelper(vault: Vault): {
    getVisibleCanvasesFromCanvasId: (manifestOrRange: ManifestNormalized | RangeNormalized, canvasId: string | null, preventPaged?: boolean) => Reference<"Canvas">[];
    getManifestSequence: (manifestOrRange: ManifestNormalized | RangeNormalized, options?: {
        disablePaging?: boolean;
        skipNonPaged?: boolean;
    }) => [Reference<"Canvas">[], number[][]];
};
/**
 * Get visible canvases from canvas ID
 *
 * This function returns a list of canvas references that should all be displayed
 * when the passed canvasId is visible. This should work for individual items,
 * 2-up paged view and continuous (scrolls).
 *
 * The options are listed below (from IIIF docs)
 *
 * - `unordered` - Valid on Collections, Manifests and Ranges. The Canvases included in resources that have this behavior
 *    have no inherent order, and user interfaces should avoid implying an order to the user. Disjoint with individuals,
 *    continuous, and paged.
 *
 * - `individuals` - Valid on Collections, Manifests, and Ranges. For Collections that have this behavior, each of the
 *    included Manifests are distinct objects in the given order. For Manifests and Ranges, the included Canvases are
 *    distinct views, and should not be presented in a page-turning interface. This is the default layout behavior if
 *    not specified. Disjoint with unordered, continuous, and paged.
 *
 * - `continuous`  Valid on Collections, Manifests and Ranges, which include Canvases that have at least height and
 *    width dimensions. Canvases included in resources that have this behavior are partial views and an appropriate
 *    rendering might display all of the Canvases virtually stitched together, such as a long scroll split into
 *    sections. This behavior has no implication for audio resources. The viewingDirection of the Manifest will
 *    determine the appropriate arrangement of the Canvases. Disjoint with unordered, individuals and paged.
 *
 * - `paged`  Valid on Collections, Manifests and Ranges, which include Canvases that have at least height and width
 *    dimensions. Canvases included in resources that have this behavior represent views that should be presented in
 *    a page-turning interface if one is available. The first canvas is a single view (the first recto) and thus the
 *    second canvas likely represents the back of the object in the first canvas. If this is not the case, see the
 *    behavior value non-paged. Disjoint with unordered, individuals, continuous, facing-pages and non-paged.
 *
 */
export declare function getVisibleCanvasesFromCanvasId(vault: Vault, manifestOrRange: ManifestNormalized | RangeNormalized, canvasId: string | null, preventPaged?: boolean): Reference<'Canvas'>[];
export declare function getManifestSequence(vault: Vault, manifestOrRange: ManifestNormalized | RangeNormalized, { disablePaging, skipNonPaged }?: {
    disablePaging?: boolean;
    skipNonPaged?: boolean;
}): [Reference<'Canvas'>[], number[][]];
