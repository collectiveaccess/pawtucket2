/// <reference types="react" />
import type * as Stitches from "@stitches/react";
export type { VariantProps } from "@stitches/react";
export declare const styled: <Type extends import("@stitches/react/types/util").Function | keyof JSX.IntrinsicElements | import("react").ComponentType<any>, Composers extends (string | import("@stitches/react/types/util").Function | import("react").ComponentType<any> | {
    [name: string]: unknown;
})[], CSS_1 = import("@stitches/react/types/css-util").CSS<{
    bp1: "(min-width: 520px)";
    bp2: "(min-width: 900px)";
    bp3: "(min-width: 1200px)";
    bp4: "(min-width: 1800px)";
    motion: "(prefers-reduced-motion)";
    hover: "(any-hover: hover)";
    dark: "(prefers-color-scheme: dark)";
    light: "(prefers-color-scheme: light)";
}, {
    colors: {
        white: string;
        red: string;
        gold: string;
        yellow: string;
        blue: string;
        blueDark: string;
        green: string;
        greenDark: string;
        mediumGrey: string;
        lightGrey: string;
        lightGrey2: string;
        richBlack80: string;
        richBlack50: string;
        richBlack20: string;
        richBlack10: string;
        nuPurple120: string;
        nuPurple: string;
        nuPurple70: string;
        nuPurple60: string;
        nuPurple30: string;
        nuPurple10: string;
    };
    fonts: {
        sans: string;
        sansLight: string;
        sansBold: string;
        display: string;
        headline: string;
        headlineBold: string;
    };
    fontSizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
    };
    lineHeights: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
    };
    sizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
    };
    space: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
    };
    radii: {
        1: string;
        2: string;
        3: string;
        4: string;
        round: string;
        pill: string;
    };
    zIndices: {
        1: string;
        2: string;
        3: string;
        4: string;
        max: string;
    };
}, import("@stitches/react/types/config").DefaultThemeMap, {
    p: (value: Stitches.PropertyValue<"padding">) => {
        padding: {
            readonly [Stitches.$$PropertyValue]: "padding";
        };
    };
    pt: (value: Stitches.PropertyValue<"paddingTop">) => {
        paddingTop: {
            readonly [Stitches.$$PropertyValue]: "paddingTop";
        };
    };
    pr: (value: Stitches.PropertyValue<"paddingRight">) => {
        paddingRight: {
            readonly [Stitches.$$PropertyValue]: "paddingRight";
        };
    };
    pb: (value: Stitches.PropertyValue<"paddingBottom">) => {
        paddingBottom: {
            readonly [Stitches.$$PropertyValue]: "paddingBottom";
        };
    };
    pl: (value: Stitches.PropertyValue<"paddingLeft">) => {
        paddingLeft: {
            readonly [Stitches.$$PropertyValue]: "paddingLeft";
        };
    };
    px: (value: Stitches.PropertyValue<"paddingLeft">) => {
        paddingLeft: {
            readonly [Stitches.$$PropertyValue]: "paddingLeft";
        };
        paddingRight: {
            readonly [Stitches.$$PropertyValue]: "paddingLeft";
        };
    };
    py: (value: Stitches.PropertyValue<"paddingTop">) => {
        paddingTop: {
            readonly [Stitches.$$PropertyValue]: "paddingTop";
        };
        paddingBottom: {
            readonly [Stitches.$$PropertyValue]: "paddingTop";
        };
    };
    m: (value: Stitches.PropertyValue<"margin">) => {
        margin: {
            readonly [Stitches.$$PropertyValue]: "margin";
        };
    };
    mt: (value: Stitches.PropertyValue<"marginTop">) => {
        marginTop: {
            readonly [Stitches.$$PropertyValue]: "marginTop";
        };
    };
    mr: (value: Stitches.PropertyValue<"marginRight">) => {
        marginRight: {
            readonly [Stitches.$$PropertyValue]: "marginRight";
        };
    };
    mb: (value: Stitches.PropertyValue<"marginBottom">) => {
        marginBottom: {
            readonly [Stitches.$$PropertyValue]: "marginBottom";
        };
    };
    ml: (value: Stitches.PropertyValue<"marginLeft">) => {
        marginLeft: {
            readonly [Stitches.$$PropertyValue]: "marginLeft";
        };
    };
    mx: (value: Stitches.PropertyValue<"marginLeft">) => {
        marginLeft: {
            readonly [Stitches.$$PropertyValue]: "marginLeft";
        };
        marginRight: {
            readonly [Stitches.$$PropertyValue]: "marginLeft";
        };
    };
    my: (value: Stitches.PropertyValue<"marginTop">) => {
        marginTop: {
            readonly [Stitches.$$PropertyValue]: "marginTop";
        };
        marginBottom: {
            readonly [Stitches.$$PropertyValue]: "marginTop";
        };
    };
    ta: (value: Stitches.PropertyValue<"textAlign">) => {
        textAlign: {
            readonly [Stitches.$$PropertyValue]: "textAlign";
        };
    };
    fd: (value: Stitches.PropertyValue<"flexDirection">) => {
        flexDirection: {
            readonly [Stitches.$$PropertyValue]: "flexDirection";
        };
    };
    fw: (value: Stitches.PropertyValue<"flexWrap">) => {
        flexWrap: {
            readonly [Stitches.$$PropertyValue]: "flexWrap";
        };
    };
    ai: (value: Stitches.PropertyValue<"alignItems">) => {
        alignItems: {
            readonly [Stitches.$$PropertyValue]: "alignItems";
        };
    };
    ac: (value: Stitches.PropertyValue<"alignContent">) => {
        alignContent: {
            readonly [Stitches.$$PropertyValue]: "alignContent";
        };
    };
    jc: (value: Stitches.PropertyValue<"justifyContent">) => {
        justifyContent: {
            readonly [Stitches.$$PropertyValue]: "justifyContent";
        };
    };
    as: (value: Stitches.PropertyValue<"alignSelf">) => {
        alignSelf: {
            readonly [Stitches.$$PropertyValue]: "alignSelf";
        };
    };
    fg: (value: Stitches.PropertyValue<"flexGrow">) => {
        flexGrow: {
            readonly [Stitches.$$PropertyValue]: "flexGrow";
        };
    };
    fs: (value: Stitches.PropertyValue<"flexShrink">) => {
        flexShrink: {
            readonly [Stitches.$$PropertyValue]: "flexShrink";
        };
    };
    fb: (value: Stitches.PropertyValue<"flexBasis">) => {
        flexBasis: {
            readonly [Stitches.$$PropertyValue]: "flexBasis";
        };
    };
    bc: (value: Stitches.PropertyValue<"backgroundColor">) => {
        backgroundColor: {
            readonly [Stitches.$$PropertyValue]: "backgroundColor";
        };
    };
    br: (value: Stitches.PropertyValue<"borderRadius">) => {
        borderRadius: {
            readonly [Stitches.$$PropertyValue]: "borderRadius";
        };
    };
    btrr: (value: Stitches.PropertyValue<"borderTopRightRadius">) => {
        borderTopRightRadius: {
            readonly [Stitches.$$PropertyValue]: "borderTopRightRadius";
        };
    };
    bbrr: (value: Stitches.PropertyValue<"borderBottomRightRadius">) => {
        borderBottomRightRadius: {
            readonly [Stitches.$$PropertyValue]: "borderBottomRightRadius";
        };
    };
    bblr: (value: Stitches.PropertyValue<"borderBottomLeftRadius">) => {
        borderBottomLeftRadius: {
            readonly [Stitches.$$PropertyValue]: "borderBottomLeftRadius";
        };
    };
    btlr: (value: Stitches.PropertyValue<"borderTopLeftRadius">) => {
        borderTopLeftRadius: {
            readonly [Stitches.$$PropertyValue]: "borderTopLeftRadius";
        };
    };
    bs: (value: Stitches.PropertyValue<"boxShadow">) => {
        boxShadow: {
            readonly [Stitches.$$PropertyValue]: "boxShadow";
        };
    };
    lh: (value: Stitches.PropertyValue<"lineHeight">) => {
        lineHeight: {
            readonly [Stitches.$$PropertyValue]: "lineHeight";
        };
    };
    ox: (value: Stitches.PropertyValue<"overflowX">) => {
        overflowX: {
            readonly [Stitches.$$PropertyValue]: "overflowX";
        };
    };
    oy: (value: Stitches.PropertyValue<"overflowY">) => {
        overflowY: {
            readonly [Stitches.$$PropertyValue]: "overflowY";
        };
    };
    pe: (value: Stitches.PropertyValue<"pointerEvents">) => {
        pointerEvents: {
            readonly [Stitches.$$PropertyValue]: "pointerEvents";
        };
    };
    us: (value: Stitches.PropertyValue<"userSelect">) => {
        WebkitUserSelect: {
            readonly [Stitches.$$PropertyValue]: "userSelect";
        };
        userSelect: {
            readonly [Stitches.$$PropertyValue]: "userSelect";
        };
    };
    userSelect: (value: Stitches.PropertyValue<"userSelect">) => {
        WebkitUserSelect: {
            readonly [Stitches.$$PropertyValue]: "userSelect";
        };
        userSelect: {
            readonly [Stitches.$$PropertyValue]: "userSelect";
        };
    };
    size: (value: Stitches.PropertyValue<"width">) => {
        width: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
        height: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
    };
    appearance: (value: Stitches.PropertyValue<"appearance">) => {
        WebkitAppearance: {
            readonly [Stitches.$$PropertyValue]: "appearance";
        };
        appearance: {
            readonly [Stitches.$$PropertyValue]: "appearance";
        };
    };
    backgroundClip: (value: Stitches.PropertyValue<"backgroundClip">) => {
        WebkitBackgroundClip: {
            readonly [Stitches.$$PropertyValue]: "backgroundClip";
        };
        backgroundClip: {
            readonly [Stitches.$$PropertyValue]: "backgroundClip";
        };
    };
}>>(type: Type, ...composers: { [K in keyof Composers]: string extends Composers[K] ? Composers[K] : Composers[K] extends string | import("@stitches/react/types/util").Function | import("react").ComponentType<any> ? Composers[K] : import("@stitches/react/types/stitches").RemoveIndex<CSS_1> & {
    variants?: {
        [x: string]: {
            [x: string]: CSS_1;
            [x: number]: CSS_1;
        };
    } | undefined;
    compoundVariants?: (("variants" extends keyof Composers[K] ? Composers[K][keyof Composers[K] & "variants"] extends infer T ? { [Name in keyof T]?: import("@stitches/react/types/util").String | import("@stitches/react/types/util").Widen<keyof Composers[K][keyof Composers[K] & "variants"][Name]> | undefined; } : never : import("@stitches/react/types/util").WideObject) & {
        css: CSS_1;
    })[] | undefined;
    defaultVariants?: ("variants" extends keyof Composers[K] ? Composers[K][keyof Composers[K] & "variants"] extends infer T_1 ? { [Name_1 in keyof T_1]?: import("@stitches/react/types/util").String | import("@stitches/react/types/util").Widen<keyof Composers[K][keyof Composers[K] & "variants"][Name_1]> | undefined; } : never : import("@stitches/react/types/util").WideObject) | undefined;
} & CSS_1 & (Composers[K] extends infer T_2 ? { [K2 in keyof T_2]: K2 extends "compoundVariants" | "defaultVariants" | "variants" ? unknown : K2 extends keyof CSS_1 ? CSS_1[K2] : unknown; } : never); }) => import("@stitches/react/types/styled-component").StyledComponent<Type, import("@stitches/react/types/styled-component").StyledComponentProps<Composers>, {
    bp1: "(min-width: 520px)";
    bp2: "(min-width: 900px)";
    bp3: "(min-width: 1200px)";
    bp4: "(min-width: 1800px)";
    motion: "(prefers-reduced-motion)";
    hover: "(any-hover: hover)";
    dark: "(prefers-color-scheme: dark)";
    light: "(prefers-color-scheme: light)";
}, import("@stitches/react/types/css-util").CSS<{
    bp1: "(min-width: 520px)";
    bp2: "(min-width: 900px)";
    bp3: "(min-width: 1200px)";
    bp4: "(min-width: 1800px)";
    motion: "(prefers-reduced-motion)";
    hover: "(any-hover: hover)";
    dark: "(prefers-color-scheme: dark)";
    light: "(prefers-color-scheme: light)";
}, {
    colors: {
        white: string;
        red: string;
        gold: string;
        yellow: string;
        blue: string;
        blueDark: string;
        green: string;
        greenDark: string;
        mediumGrey: string;
        lightGrey: string;
        lightGrey2: string;
        richBlack80: string;
        richBlack50: string;
        richBlack20: string;
        richBlack10: string;
        nuPurple120: string;
        nuPurple: string;
        nuPurple70: string;
        nuPurple60: string;
        nuPurple30: string;
        nuPurple10: string;
    };
    fonts: {
        sans: string;
        sansLight: string;
        sansBold: string;
        display: string;
        headline: string;
        headlineBold: string;
    };
    fontSizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
    };
    lineHeights: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
    };
    sizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
    };
    space: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
    };
    radii: {
        1: string;
        2: string;
        3: string;
        4: string;
        round: string;
        pill: string;
    };
    zIndices: {
        1: string;
        2: string;
        3: string;
        4: string;
        max: string;
    };
}, import("@stitches/react/types/config").DefaultThemeMap, {
    p: (value: Stitches.PropertyValue<"padding">) => {
        padding: {
            readonly [Stitches.$$PropertyValue]: "padding";
        };
    };
    pt: (value: Stitches.PropertyValue<"paddingTop">) => {
        paddingTop: {
            readonly [Stitches.$$PropertyValue]: "paddingTop";
        };
    };
    pr: (value: Stitches.PropertyValue<"paddingRight">) => {
        paddingRight: {
            readonly [Stitches.$$PropertyValue]: "paddingRight";
        };
    };
    pb: (value: Stitches.PropertyValue<"paddingBottom">) => {
        paddingBottom: {
            readonly [Stitches.$$PropertyValue]: "paddingBottom";
        };
    };
    pl: (value: Stitches.PropertyValue<"paddingLeft">) => {
        paddingLeft: {
            readonly [Stitches.$$PropertyValue]: "paddingLeft";
        };
    };
    px: (value: Stitches.PropertyValue<"paddingLeft">) => {
        paddingLeft: {
            readonly [Stitches.$$PropertyValue]: "paddingLeft";
        };
        paddingRight: {
            readonly [Stitches.$$PropertyValue]: "paddingLeft";
        };
    };
    py: (value: Stitches.PropertyValue<"paddingTop">) => {
        paddingTop: {
            readonly [Stitches.$$PropertyValue]: "paddingTop";
        };
        paddingBottom: {
            readonly [Stitches.$$PropertyValue]: "paddingTop";
        };
    };
    m: (value: Stitches.PropertyValue<"margin">) => {
        margin: {
            readonly [Stitches.$$PropertyValue]: "margin";
        };
    };
    mt: (value: Stitches.PropertyValue<"marginTop">) => {
        marginTop: {
            readonly [Stitches.$$PropertyValue]: "marginTop";
        };
    };
    mr: (value: Stitches.PropertyValue<"marginRight">) => {
        marginRight: {
            readonly [Stitches.$$PropertyValue]: "marginRight";
        };
    };
    mb: (value: Stitches.PropertyValue<"marginBottom">) => {
        marginBottom: {
            readonly [Stitches.$$PropertyValue]: "marginBottom";
        };
    };
    ml: (value: Stitches.PropertyValue<"marginLeft">) => {
        marginLeft: {
            readonly [Stitches.$$PropertyValue]: "marginLeft";
        };
    };
    mx: (value: Stitches.PropertyValue<"marginLeft">) => {
        marginLeft: {
            readonly [Stitches.$$PropertyValue]: "marginLeft";
        };
        marginRight: {
            readonly [Stitches.$$PropertyValue]: "marginLeft";
        };
    };
    my: (value: Stitches.PropertyValue<"marginTop">) => {
        marginTop: {
            readonly [Stitches.$$PropertyValue]: "marginTop";
        };
        marginBottom: {
            readonly [Stitches.$$PropertyValue]: "marginTop";
        };
    };
    ta: (value: Stitches.PropertyValue<"textAlign">) => {
        textAlign: {
            readonly [Stitches.$$PropertyValue]: "textAlign";
        };
    };
    fd: (value: Stitches.PropertyValue<"flexDirection">) => {
        flexDirection: {
            readonly [Stitches.$$PropertyValue]: "flexDirection";
        };
    };
    fw: (value: Stitches.PropertyValue<"flexWrap">) => {
        flexWrap: {
            readonly [Stitches.$$PropertyValue]: "flexWrap";
        };
    };
    ai: (value: Stitches.PropertyValue<"alignItems">) => {
        alignItems: {
            readonly [Stitches.$$PropertyValue]: "alignItems";
        };
    };
    ac: (value: Stitches.PropertyValue<"alignContent">) => {
        alignContent: {
            readonly [Stitches.$$PropertyValue]: "alignContent";
        };
    };
    jc: (value: Stitches.PropertyValue<"justifyContent">) => {
        justifyContent: {
            readonly [Stitches.$$PropertyValue]: "justifyContent";
        };
    };
    as: (value: Stitches.PropertyValue<"alignSelf">) => {
        alignSelf: {
            readonly [Stitches.$$PropertyValue]: "alignSelf";
        };
    };
    fg: (value: Stitches.PropertyValue<"flexGrow">) => {
        flexGrow: {
            readonly [Stitches.$$PropertyValue]: "flexGrow";
        };
    };
    fs: (value: Stitches.PropertyValue<"flexShrink">) => {
        flexShrink: {
            readonly [Stitches.$$PropertyValue]: "flexShrink";
        };
    };
    fb: (value: Stitches.PropertyValue<"flexBasis">) => {
        flexBasis: {
            readonly [Stitches.$$PropertyValue]: "flexBasis";
        };
    };
    bc: (value: Stitches.PropertyValue<"backgroundColor">) => {
        backgroundColor: {
            readonly [Stitches.$$PropertyValue]: "backgroundColor";
        };
    };
    br: (value: Stitches.PropertyValue<"borderRadius">) => {
        borderRadius: {
            readonly [Stitches.$$PropertyValue]: "borderRadius";
        };
    };
    btrr: (value: Stitches.PropertyValue<"borderTopRightRadius">) => {
        borderTopRightRadius: {
            readonly [Stitches.$$PropertyValue]: "borderTopRightRadius";
        };
    };
    bbrr: (value: Stitches.PropertyValue<"borderBottomRightRadius">) => {
        borderBottomRightRadius: {
            readonly [Stitches.$$PropertyValue]: "borderBottomRightRadius";
        };
    };
    bblr: (value: Stitches.PropertyValue<"borderBottomLeftRadius">) => {
        borderBottomLeftRadius: {
            readonly [Stitches.$$PropertyValue]: "borderBottomLeftRadius";
        };
    };
    btlr: (value: Stitches.PropertyValue<"borderTopLeftRadius">) => {
        borderTopLeftRadius: {
            readonly [Stitches.$$PropertyValue]: "borderTopLeftRadius";
        };
    };
    bs: (value: Stitches.PropertyValue<"boxShadow">) => {
        boxShadow: {
            readonly [Stitches.$$PropertyValue]: "boxShadow";
        };
    };
    lh: (value: Stitches.PropertyValue<"lineHeight">) => {
        lineHeight: {
            readonly [Stitches.$$PropertyValue]: "lineHeight";
        };
    };
    ox: (value: Stitches.PropertyValue<"overflowX">) => {
        overflowX: {
            readonly [Stitches.$$PropertyValue]: "overflowX";
        };
    };
    oy: (value: Stitches.PropertyValue<"overflowY">) => {
        overflowY: {
            readonly [Stitches.$$PropertyValue]: "overflowY";
        };
    };
    pe: (value: Stitches.PropertyValue<"pointerEvents">) => {
        pointerEvents: {
            readonly [Stitches.$$PropertyValue]: "pointerEvents";
        };
    };
    us: (value: Stitches.PropertyValue<"userSelect">) => {
        WebkitUserSelect: {
            readonly [Stitches.$$PropertyValue]: "userSelect";
        };
        userSelect: {
            readonly [Stitches.$$PropertyValue]: "userSelect";
        };
    };
    userSelect: (value: Stitches.PropertyValue<"userSelect">) => {
        WebkitUserSelect: {
            readonly [Stitches.$$PropertyValue]: "userSelect";
        };
        userSelect: {
            readonly [Stitches.$$PropertyValue]: "userSelect";
        };
    };
    size: (value: Stitches.PropertyValue<"width">) => {
        width: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
        height: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
    };
    appearance: (value: Stitches.PropertyValue<"appearance">) => {
        WebkitAppearance: {
            readonly [Stitches.$$PropertyValue]: "appearance";
        };
        appearance: {
            readonly [Stitches.$$PropertyValue]: "appearance";
        };
    };
    backgroundClip: (value: Stitches.PropertyValue<"backgroundClip">) => {
        WebkitBackgroundClip: {
            readonly [Stitches.$$PropertyValue]: "backgroundClip";
        };
        backgroundClip: {
            readonly [Stitches.$$PropertyValue]: "backgroundClip";
        };
    };
}>>, css: <Composers extends (string | import("@stitches/react/types/util").Function | import("react").ExoticComponent<any> | import("react").JSXElementConstructor<any> | {
    [name: string]: unknown;
})[], CSS_1 = import("@stitches/react/types/css-util").CSS<{
    bp1: "(min-width: 520px)";
    bp2: "(min-width: 900px)";
    bp3: "(min-width: 1200px)";
    bp4: "(min-width: 1800px)";
    motion: "(prefers-reduced-motion)";
    hover: "(any-hover: hover)";
    dark: "(prefers-color-scheme: dark)";
    light: "(prefers-color-scheme: light)";
}, {
    colors: {
        white: string;
        red: string;
        gold: string;
        yellow: string;
        blue: string;
        blueDark: string;
        green: string;
        greenDark: string;
        mediumGrey: string;
        lightGrey: string;
        lightGrey2: string;
        richBlack80: string;
        richBlack50: string;
        richBlack20: string;
        richBlack10: string;
        nuPurple120: string;
        nuPurple: string;
        nuPurple70: string;
        nuPurple60: string;
        nuPurple30: string;
        nuPurple10: string;
    };
    fonts: {
        sans: string;
        sansLight: string;
        sansBold: string;
        display: string;
        headline: string;
        headlineBold: string;
    };
    fontSizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
    };
    lineHeights: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
    };
    sizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
    };
    space: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
    };
    radii: {
        1: string;
        2: string;
        3: string;
        4: string;
        round: string;
        pill: string;
    };
    zIndices: {
        1: string;
        2: string;
        3: string;
        4: string;
        max: string;
    };
}, import("@stitches/react/types/config").DefaultThemeMap, {
    p: (value: Stitches.PropertyValue<"padding">) => {
        padding: {
            readonly [Stitches.$$PropertyValue]: "padding";
        };
    };
    pt: (value: Stitches.PropertyValue<"paddingTop">) => {
        paddingTop: {
            readonly [Stitches.$$PropertyValue]: "paddingTop";
        };
    };
    pr: (value: Stitches.PropertyValue<"paddingRight">) => {
        paddingRight: {
            readonly [Stitches.$$PropertyValue]: "paddingRight";
        };
    };
    pb: (value: Stitches.PropertyValue<"paddingBottom">) => {
        paddingBottom: {
            readonly [Stitches.$$PropertyValue]: "paddingBottom";
        };
    };
    pl: (value: Stitches.PropertyValue<"paddingLeft">) => {
        paddingLeft: {
            readonly [Stitches.$$PropertyValue]: "paddingLeft";
        };
    };
    px: (value: Stitches.PropertyValue<"paddingLeft">) => {
        paddingLeft: {
            readonly [Stitches.$$PropertyValue]: "paddingLeft";
        };
        paddingRight: {
            readonly [Stitches.$$PropertyValue]: "paddingLeft";
        };
    };
    py: (value: Stitches.PropertyValue<"paddingTop">) => {
        paddingTop: {
            readonly [Stitches.$$PropertyValue]: "paddingTop";
        };
        paddingBottom: {
            readonly [Stitches.$$PropertyValue]: "paddingTop";
        };
    };
    m: (value: Stitches.PropertyValue<"margin">) => {
        margin: {
            readonly [Stitches.$$PropertyValue]: "margin";
        };
    };
    mt: (value: Stitches.PropertyValue<"marginTop">) => {
        marginTop: {
            readonly [Stitches.$$PropertyValue]: "marginTop";
        };
    };
    mr: (value: Stitches.PropertyValue<"marginRight">) => {
        marginRight: {
            readonly [Stitches.$$PropertyValue]: "marginRight";
        };
    };
    mb: (value: Stitches.PropertyValue<"marginBottom">) => {
        marginBottom: {
            readonly [Stitches.$$PropertyValue]: "marginBottom";
        };
    };
    ml: (value: Stitches.PropertyValue<"marginLeft">) => {
        marginLeft: {
            readonly [Stitches.$$PropertyValue]: "marginLeft";
        };
    };
    mx: (value: Stitches.PropertyValue<"marginLeft">) => {
        marginLeft: {
            readonly [Stitches.$$PropertyValue]: "marginLeft";
        };
        marginRight: {
            readonly [Stitches.$$PropertyValue]: "marginLeft";
        };
    };
    my: (value: Stitches.PropertyValue<"marginTop">) => {
        marginTop: {
            readonly [Stitches.$$PropertyValue]: "marginTop";
        };
        marginBottom: {
            readonly [Stitches.$$PropertyValue]: "marginTop";
        };
    };
    ta: (value: Stitches.PropertyValue<"textAlign">) => {
        textAlign: {
            readonly [Stitches.$$PropertyValue]: "textAlign";
        };
    };
    fd: (value: Stitches.PropertyValue<"flexDirection">) => {
        flexDirection: {
            readonly [Stitches.$$PropertyValue]: "flexDirection";
        };
    };
    fw: (value: Stitches.PropertyValue<"flexWrap">) => {
        flexWrap: {
            readonly [Stitches.$$PropertyValue]: "flexWrap";
        };
    };
    ai: (value: Stitches.PropertyValue<"alignItems">) => {
        alignItems: {
            readonly [Stitches.$$PropertyValue]: "alignItems";
        };
    };
    ac: (value: Stitches.PropertyValue<"alignContent">) => {
        alignContent: {
            readonly [Stitches.$$PropertyValue]: "alignContent";
        };
    };
    jc: (value: Stitches.PropertyValue<"justifyContent">) => {
        justifyContent: {
            readonly [Stitches.$$PropertyValue]: "justifyContent";
        };
    };
    as: (value: Stitches.PropertyValue<"alignSelf">) => {
        alignSelf: {
            readonly [Stitches.$$PropertyValue]: "alignSelf";
        };
    };
    fg: (value: Stitches.PropertyValue<"flexGrow">) => {
        flexGrow: {
            readonly [Stitches.$$PropertyValue]: "flexGrow";
        };
    };
    fs: (value: Stitches.PropertyValue<"flexShrink">) => {
        flexShrink: {
            readonly [Stitches.$$PropertyValue]: "flexShrink";
        };
    };
    fb: (value: Stitches.PropertyValue<"flexBasis">) => {
        flexBasis: {
            readonly [Stitches.$$PropertyValue]: "flexBasis";
        };
    };
    bc: (value: Stitches.PropertyValue<"backgroundColor">) => {
        backgroundColor: {
            readonly [Stitches.$$PropertyValue]: "backgroundColor";
        };
    };
    br: (value: Stitches.PropertyValue<"borderRadius">) => {
        borderRadius: {
            readonly [Stitches.$$PropertyValue]: "borderRadius";
        };
    };
    btrr: (value: Stitches.PropertyValue<"borderTopRightRadius">) => {
        borderTopRightRadius: {
            readonly [Stitches.$$PropertyValue]: "borderTopRightRadius";
        };
    };
    bbrr: (value: Stitches.PropertyValue<"borderBottomRightRadius">) => {
        borderBottomRightRadius: {
            readonly [Stitches.$$PropertyValue]: "borderBottomRightRadius";
        };
    };
    bblr: (value: Stitches.PropertyValue<"borderBottomLeftRadius">) => {
        borderBottomLeftRadius: {
            readonly [Stitches.$$PropertyValue]: "borderBottomLeftRadius";
        };
    };
    btlr: (value: Stitches.PropertyValue<"borderTopLeftRadius">) => {
        borderTopLeftRadius: {
            readonly [Stitches.$$PropertyValue]: "borderTopLeftRadius";
        };
    };
    bs: (value: Stitches.PropertyValue<"boxShadow">) => {
        boxShadow: {
            readonly [Stitches.$$PropertyValue]: "boxShadow";
        };
    };
    lh: (value: Stitches.PropertyValue<"lineHeight">) => {
        lineHeight: {
            readonly [Stitches.$$PropertyValue]: "lineHeight";
        };
    };
    ox: (value: Stitches.PropertyValue<"overflowX">) => {
        overflowX: {
            readonly [Stitches.$$PropertyValue]: "overflowX";
        };
    };
    oy: (value: Stitches.PropertyValue<"overflowY">) => {
        overflowY: {
            readonly [Stitches.$$PropertyValue]: "overflowY";
        };
    };
    pe: (value: Stitches.PropertyValue<"pointerEvents">) => {
        pointerEvents: {
            readonly [Stitches.$$PropertyValue]: "pointerEvents";
        };
    };
    us: (value: Stitches.PropertyValue<"userSelect">) => {
        WebkitUserSelect: {
            readonly [Stitches.$$PropertyValue]: "userSelect";
        };
        userSelect: {
            readonly [Stitches.$$PropertyValue]: "userSelect";
        };
    };
    userSelect: (value: Stitches.PropertyValue<"userSelect">) => {
        WebkitUserSelect: {
            readonly [Stitches.$$PropertyValue]: "userSelect";
        };
        userSelect: {
            readonly [Stitches.$$PropertyValue]: "userSelect";
        };
    };
    size: (value: Stitches.PropertyValue<"width">) => {
        width: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
        height: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
    };
    appearance: (value: Stitches.PropertyValue<"appearance">) => {
        WebkitAppearance: {
            readonly [Stitches.$$PropertyValue]: "appearance";
        };
        appearance: {
            readonly [Stitches.$$PropertyValue]: "appearance";
        };
    };
    backgroundClip: (value: Stitches.PropertyValue<"backgroundClip">) => {
        WebkitBackgroundClip: {
            readonly [Stitches.$$PropertyValue]: "backgroundClip";
        };
        backgroundClip: {
            readonly [Stitches.$$PropertyValue]: "backgroundClip";
        };
    };
}>>(...composers: { [K in keyof Composers]: string extends Composers[K] ? Composers[K] : Composers[K] extends string | import("@stitches/react/types/util").Function | import("react").ExoticComponent<any> | import("react").JSXElementConstructor<any> ? Composers[K] : import("@stitches/react/types/stitches").RemoveIndex<CSS_1> & {
    variants?: {
        [x: string]: {
            [x: string]: CSS_1;
            [x: number]: CSS_1;
        };
    } | undefined;
    compoundVariants?: (("variants" extends keyof Composers[K] ? Composers[K][keyof Composers[K] & "variants"] extends infer T ? { [Name in keyof T]?: import("@stitches/react/types/util").String | import("@stitches/react/types/util").Widen<keyof Composers[K][keyof Composers[K] & "variants"][Name]> | undefined; } : never : import("@stitches/react/types/util").WideObject) & {
        css: CSS_1;
    })[] | undefined;
    defaultVariants?: ("variants" extends keyof Composers[K] ? Composers[K][keyof Composers[K] & "variants"] extends infer T_1 ? { [Name_1 in keyof T_1]?: import("@stitches/react/types/util").String | import("@stitches/react/types/util").Widen<keyof Composers[K][keyof Composers[K] & "variants"][Name_1]> | undefined; } : never : import("@stitches/react/types/util").WideObject) | undefined;
} & CSS_1 & (Composers[K] extends infer T_2 ? { [K2 in keyof T_2]: K2 extends "compoundVariants" | "defaultVariants" | "variants" ? unknown : K2 extends keyof CSS_1 ? CSS_1[K2] : unknown; } : never); }) => import("@stitches/react/types/styled-component").CssComponent<import("@stitches/react/types/styled-component").StyledComponentType<Composers>, import("@stitches/react/types/styled-component").StyledComponentProps<Composers>, {
    bp1: "(min-width: 520px)";
    bp2: "(min-width: 900px)";
    bp3: "(min-width: 1200px)";
    bp4: "(min-width: 1800px)";
    motion: "(prefers-reduced-motion)";
    hover: "(any-hover: hover)";
    dark: "(prefers-color-scheme: dark)";
    light: "(prefers-color-scheme: light)";
}, CSS_1>, globalCss: <Styles extends {
    [K: string]: any;
}>(...styles: ({
    '@import'?: unknown;
    '@font-face'?: unknown;
} & { [K in keyof Styles]: K extends "@import" ? string | string[] : K extends "@font-face" ? import("@stitches/react/types/css").AtRule.FontFace | import("@stitches/react/types/css").AtRule.FontFace[] : K extends `@keyframes ${string}` ? {
    [x: string]: import("@stitches/react/types/css-util").CSS<{
        bp1: "(min-width: 520px)";
        bp2: "(min-width: 900px)";
        bp3: "(min-width: 1200px)";
        bp4: "(min-width: 1800px)";
        motion: "(prefers-reduced-motion)";
        hover: "(any-hover: hover)";
        dark: "(prefers-color-scheme: dark)";
        light: "(prefers-color-scheme: light)";
    }, {
        colors: {
            white: string;
            red: string;
            gold: string;
            yellow: string;
            blue: string;
            blueDark: string;
            green: string;
            greenDark: string;
            mediumGrey: string;
            lightGrey: string;
            lightGrey2: string;
            richBlack80: string;
            richBlack50: string;
            richBlack20: string;
            richBlack10: string;
            nuPurple120: string;
            nuPurple: string;
            nuPurple70: string;
            nuPurple60: string;
            nuPurple30: string;
            nuPurple10: string;
        };
        fonts: {
            sans: string;
            sansLight: string;
            sansBold: string;
            display: string;
            headline: string;
            headlineBold: string;
        };
        fontSizes: {
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            6: string;
            7: string;
            8: string;
            9: string;
        };
        lineHeights: {
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            6: string;
            7: string;
            8: string;
            9: string;
        };
        sizes: {
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            6: string;
            7: string;
            8: string;
            9: string;
        };
        space: {
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            6: string;
            7: string;
            8: string;
            9: string;
        };
        radii: {
            1: string;
            2: string;
            3: string;
            4: string;
            round: string;
            pill: string;
        };
        zIndices: {
            1: string;
            2: string;
            3: string;
            4: string;
            max: string;
        };
    }, import("@stitches/react/types/config").DefaultThemeMap, {
        p: (value: Stitches.PropertyValue<"padding">) => {
            padding: {
                readonly [Stitches.$$PropertyValue]: "padding";
            };
        };
        pt: (value: Stitches.PropertyValue<"paddingTop">) => {
            paddingTop: {
                readonly [Stitches.$$PropertyValue]: "paddingTop";
            };
        };
        pr: (value: Stitches.PropertyValue<"paddingRight">) => {
            paddingRight: {
                readonly [Stitches.$$PropertyValue]: "paddingRight";
            };
        };
        pb: (value: Stitches.PropertyValue<"paddingBottom">) => {
            paddingBottom: {
                readonly [Stitches.$$PropertyValue]: "paddingBottom";
            };
        };
        pl: (value: Stitches.PropertyValue<"paddingLeft">) => {
            paddingLeft: {
                readonly [Stitches.$$PropertyValue]: "paddingLeft";
            };
        };
        px: (value: Stitches.PropertyValue<"paddingLeft">) => {
            paddingLeft: {
                readonly [Stitches.$$PropertyValue]: "paddingLeft";
            };
            paddingRight: {
                readonly [Stitches.$$PropertyValue]: "paddingLeft";
            };
        };
        py: (value: Stitches.PropertyValue<"paddingTop">) => {
            paddingTop: {
                readonly [Stitches.$$PropertyValue]: "paddingTop";
            };
            paddingBottom: {
                readonly [Stitches.$$PropertyValue]: "paddingTop";
            };
        };
        m: (value: Stitches.PropertyValue<"margin">) => {
            margin: {
                readonly [Stitches.$$PropertyValue]: "margin";
            };
        };
        mt: (value: Stitches.PropertyValue<"marginTop">) => {
            marginTop: {
                readonly [Stitches.$$PropertyValue]: "marginTop";
            };
        };
        mr: (value: Stitches.PropertyValue<"marginRight">) => {
            marginRight: {
                readonly [Stitches.$$PropertyValue]: "marginRight";
            };
        };
        mb: (value: Stitches.PropertyValue<"marginBottom">) => {
            marginBottom: {
                readonly [Stitches.$$PropertyValue]: "marginBottom";
            };
        };
        ml: (value: Stitches.PropertyValue<"marginLeft">) => {
            marginLeft: {
                readonly [Stitches.$$PropertyValue]: "marginLeft";
            };
        };
        mx: (value: Stitches.PropertyValue<"marginLeft">) => {
            marginLeft: {
                readonly [Stitches.$$PropertyValue]: "marginLeft";
            };
            marginRight: {
                readonly [Stitches.$$PropertyValue]: "marginLeft";
            };
        };
        my: (value: Stitches.PropertyValue<"marginTop">) => {
            marginTop: {
                readonly [Stitches.$$PropertyValue]: "marginTop";
            };
            marginBottom: {
                readonly [Stitches.$$PropertyValue]: "marginTop";
            };
        };
        ta: (value: Stitches.PropertyValue<"textAlign">) => {
            textAlign: {
                readonly [Stitches.$$PropertyValue]: "textAlign";
            };
        };
        fd: (value: Stitches.PropertyValue<"flexDirection">) => {
            flexDirection: {
                readonly [Stitches.$$PropertyValue]: "flexDirection";
            };
        };
        fw: (value: Stitches.PropertyValue<"flexWrap">) => {
            flexWrap: {
                readonly [Stitches.$$PropertyValue]: "flexWrap";
            };
        };
        ai: (value: Stitches.PropertyValue<"alignItems">) => {
            alignItems: {
                readonly [Stitches.$$PropertyValue]: "alignItems";
            };
        };
        ac: (value: Stitches.PropertyValue<"alignContent">) => {
            alignContent: {
                readonly [Stitches.$$PropertyValue]: "alignContent";
            };
        };
        jc: (value: Stitches.PropertyValue<"justifyContent">) => {
            justifyContent: {
                readonly [Stitches.$$PropertyValue]: "justifyContent";
            };
        };
        as: (value: Stitches.PropertyValue<"alignSelf">) => {
            alignSelf: {
                readonly [Stitches.$$PropertyValue]: "alignSelf";
            };
        };
        fg: (value: Stitches.PropertyValue<"flexGrow">) => {
            flexGrow: {
                readonly [Stitches.$$PropertyValue]: "flexGrow";
            };
        };
        fs: (value: Stitches.PropertyValue<"flexShrink">) => {
            flexShrink: {
                readonly [Stitches.$$PropertyValue]: "flexShrink";
            };
        };
        fb: (value: Stitches.PropertyValue<"flexBasis">) => {
            flexBasis: {
                readonly [Stitches.$$PropertyValue]: "flexBasis";
            };
        };
        bc: (value: Stitches.PropertyValue<"backgroundColor">) => {
            backgroundColor: {
                readonly [Stitches.$$PropertyValue]: "backgroundColor";
            };
        };
        br: (value: Stitches.PropertyValue<"borderRadius">) => {
            borderRadius: {
                readonly [Stitches.$$PropertyValue]: "borderRadius";
            };
        };
        btrr: (value: Stitches.PropertyValue<"borderTopRightRadius">) => {
            borderTopRightRadius: {
                readonly [Stitches.$$PropertyValue]: "borderTopRightRadius";
            };
        };
        bbrr: (value: Stitches.PropertyValue<"borderBottomRightRadius">) => {
            borderBottomRightRadius: {
                readonly [Stitches.$$PropertyValue]: "borderBottomRightRadius";
            };
        };
        bblr: (value: Stitches.PropertyValue<"borderBottomLeftRadius">) => {
            borderBottomLeftRadius: {
                readonly [Stitches.$$PropertyValue]: "borderBottomLeftRadius";
            };
        };
        btlr: (value: Stitches.PropertyValue<"borderTopLeftRadius">) => {
            borderTopLeftRadius: {
                readonly [Stitches.$$PropertyValue]: "borderTopLeftRadius";
            };
        };
        bs: (value: Stitches.PropertyValue<"boxShadow">) => {
            boxShadow: {
                readonly [Stitches.$$PropertyValue]: "boxShadow";
            };
        };
        lh: (value: Stitches.PropertyValue<"lineHeight">) => {
            lineHeight: {
                readonly [Stitches.$$PropertyValue]: "lineHeight";
            };
        };
        ox: (value: Stitches.PropertyValue<"overflowX">) => {
            overflowX: {
                readonly [Stitches.$$PropertyValue]: "overflowX";
            };
        };
        oy: (value: Stitches.PropertyValue<"overflowY">) => {
            overflowY: {
                readonly [Stitches.$$PropertyValue]: "overflowY";
            };
        };
        pe: (value: Stitches.PropertyValue<"pointerEvents">) => {
            pointerEvents: {
                readonly [Stitches.$$PropertyValue]: "pointerEvents";
            };
        };
        us: (value: Stitches.PropertyValue<"userSelect">) => {
            WebkitUserSelect: {
                readonly [Stitches.$$PropertyValue]: "userSelect";
            };
            userSelect: {
                readonly [Stitches.$$PropertyValue]: "userSelect";
            };
        };
        userSelect: (value: Stitches.PropertyValue<"userSelect">) => {
            WebkitUserSelect: {
                readonly [Stitches.$$PropertyValue]: "userSelect";
            };
            userSelect: {
                readonly [Stitches.$$PropertyValue]: "userSelect";
            };
        };
        size: (value: Stitches.PropertyValue<"width">) => {
            width: {
                readonly [Stitches.$$PropertyValue]: "width";
            };
            height: {
                readonly [Stitches.$$PropertyValue]: "width";
            };
        };
        appearance: (value: Stitches.PropertyValue<"appearance">) => {
            WebkitAppearance: {
                readonly [Stitches.$$PropertyValue]: "appearance";
            };
            appearance: {
                readonly [Stitches.$$PropertyValue]: "appearance";
            };
        };
        backgroundClip: (value: Stitches.PropertyValue<"backgroundClip">) => {
            WebkitBackgroundClip: {
                readonly [Stitches.$$PropertyValue]: "backgroundClip";
            };
            backgroundClip: {
                readonly [Stitches.$$PropertyValue]: "backgroundClip";
            };
        };
    }>;
} : K extends `@property ${string}` ? import("@stitches/react/types/css").AtRule.Property : import("@stitches/react/types/css-util").CSS<{
    bp1: "(min-width: 520px)";
    bp2: "(min-width: 900px)";
    bp3: "(min-width: 1200px)";
    bp4: "(min-width: 1800px)";
    motion: "(prefers-reduced-motion)";
    hover: "(any-hover: hover)";
    dark: "(prefers-color-scheme: dark)";
    light: "(prefers-color-scheme: light)";
}, {
    colors: {
        white: string;
        red: string;
        gold: string;
        yellow: string;
        blue: string;
        blueDark: string;
        green: string;
        greenDark: string;
        mediumGrey: string;
        lightGrey: string;
        lightGrey2: string;
        richBlack80: string;
        richBlack50: string;
        richBlack20: string;
        richBlack10: string;
        nuPurple120: string;
        nuPurple: string;
        nuPurple70: string;
        nuPurple60: string;
        nuPurple30: string;
        nuPurple10: string;
    };
    fonts: {
        sans: string;
        sansLight: string;
        sansBold: string;
        display: string;
        headline: string;
        headlineBold: string;
    };
    fontSizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
    };
    lineHeights: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
    };
    sizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
    };
    space: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
    };
    radii: {
        1: string;
        2: string;
        3: string;
        4: string;
        round: string;
        pill: string;
    };
    zIndices: {
        1: string;
        2: string;
        3: string;
        4: string;
        max: string;
    };
}, import("@stitches/react/types/config").DefaultThemeMap, {
    p: (value: Stitches.PropertyValue<"padding">) => {
        padding: {
            readonly [Stitches.$$PropertyValue]: "padding";
        };
    };
    pt: (value: Stitches.PropertyValue<"paddingTop">) => {
        paddingTop: {
            readonly [Stitches.$$PropertyValue]: "paddingTop";
        };
    };
    pr: (value: Stitches.PropertyValue<"paddingRight">) => {
        paddingRight: {
            readonly [Stitches.$$PropertyValue]: "paddingRight";
        };
    };
    pb: (value: Stitches.PropertyValue<"paddingBottom">) => {
        paddingBottom: {
            readonly [Stitches.$$PropertyValue]: "paddingBottom";
        };
    };
    pl: (value: Stitches.PropertyValue<"paddingLeft">) => {
        paddingLeft: {
            readonly [Stitches.$$PropertyValue]: "paddingLeft";
        };
    };
    px: (value: Stitches.PropertyValue<"paddingLeft">) => {
        paddingLeft: {
            readonly [Stitches.$$PropertyValue]: "paddingLeft";
        };
        paddingRight: {
            readonly [Stitches.$$PropertyValue]: "paddingLeft";
        };
    };
    py: (value: Stitches.PropertyValue<"paddingTop">) => {
        paddingTop: {
            readonly [Stitches.$$PropertyValue]: "paddingTop";
        };
        paddingBottom: {
            readonly [Stitches.$$PropertyValue]: "paddingTop";
        };
    };
    m: (value: Stitches.PropertyValue<"margin">) => {
        margin: {
            readonly [Stitches.$$PropertyValue]: "margin";
        };
    };
    mt: (value: Stitches.PropertyValue<"marginTop">) => {
        marginTop: {
            readonly [Stitches.$$PropertyValue]: "marginTop";
        };
    };
    mr: (value: Stitches.PropertyValue<"marginRight">) => {
        marginRight: {
            readonly [Stitches.$$PropertyValue]: "marginRight";
        };
    };
    mb: (value: Stitches.PropertyValue<"marginBottom">) => {
        marginBottom: {
            readonly [Stitches.$$PropertyValue]: "marginBottom";
        };
    };
    ml: (value: Stitches.PropertyValue<"marginLeft">) => {
        marginLeft: {
            readonly [Stitches.$$PropertyValue]: "marginLeft";
        };
    };
    mx: (value: Stitches.PropertyValue<"marginLeft">) => {
        marginLeft: {
            readonly [Stitches.$$PropertyValue]: "marginLeft";
        };
        marginRight: {
            readonly [Stitches.$$PropertyValue]: "marginLeft";
        };
    };
    my: (value: Stitches.PropertyValue<"marginTop">) => {
        marginTop: {
            readonly [Stitches.$$PropertyValue]: "marginTop";
        };
        marginBottom: {
            readonly [Stitches.$$PropertyValue]: "marginTop";
        };
    };
    ta: (value: Stitches.PropertyValue<"textAlign">) => {
        textAlign: {
            readonly [Stitches.$$PropertyValue]: "textAlign";
        };
    };
    fd: (value: Stitches.PropertyValue<"flexDirection">) => {
        flexDirection: {
            readonly [Stitches.$$PropertyValue]: "flexDirection";
        };
    };
    fw: (value: Stitches.PropertyValue<"flexWrap">) => {
        flexWrap: {
            readonly [Stitches.$$PropertyValue]: "flexWrap";
        };
    };
    ai: (value: Stitches.PropertyValue<"alignItems">) => {
        alignItems: {
            readonly [Stitches.$$PropertyValue]: "alignItems";
        };
    };
    ac: (value: Stitches.PropertyValue<"alignContent">) => {
        alignContent: {
            readonly [Stitches.$$PropertyValue]: "alignContent";
        };
    };
    jc: (value: Stitches.PropertyValue<"justifyContent">) => {
        justifyContent: {
            readonly [Stitches.$$PropertyValue]: "justifyContent";
        };
    };
    as: (value: Stitches.PropertyValue<"alignSelf">) => {
        alignSelf: {
            readonly [Stitches.$$PropertyValue]: "alignSelf";
        };
    };
    fg: (value: Stitches.PropertyValue<"flexGrow">) => {
        flexGrow: {
            readonly [Stitches.$$PropertyValue]: "flexGrow";
        };
    };
    fs: (value: Stitches.PropertyValue<"flexShrink">) => {
        flexShrink: {
            readonly [Stitches.$$PropertyValue]: "flexShrink";
        };
    };
    fb: (value: Stitches.PropertyValue<"flexBasis">) => {
        flexBasis: {
            readonly [Stitches.$$PropertyValue]: "flexBasis";
        };
    };
    bc: (value: Stitches.PropertyValue<"backgroundColor">) => {
        backgroundColor: {
            readonly [Stitches.$$PropertyValue]: "backgroundColor";
        };
    };
    br: (value: Stitches.PropertyValue<"borderRadius">) => {
        borderRadius: {
            readonly [Stitches.$$PropertyValue]: "borderRadius";
        };
    };
    btrr: (value: Stitches.PropertyValue<"borderTopRightRadius">) => {
        borderTopRightRadius: {
            readonly [Stitches.$$PropertyValue]: "borderTopRightRadius";
        };
    };
    bbrr: (value: Stitches.PropertyValue<"borderBottomRightRadius">) => {
        borderBottomRightRadius: {
            readonly [Stitches.$$PropertyValue]: "borderBottomRightRadius";
        };
    };
    bblr: (value: Stitches.PropertyValue<"borderBottomLeftRadius">) => {
        borderBottomLeftRadius: {
            readonly [Stitches.$$PropertyValue]: "borderBottomLeftRadius";
        };
    };
    btlr: (value: Stitches.PropertyValue<"borderTopLeftRadius">) => {
        borderTopLeftRadius: {
            readonly [Stitches.$$PropertyValue]: "borderTopLeftRadius";
        };
    };
    bs: (value: Stitches.PropertyValue<"boxShadow">) => {
        boxShadow: {
            readonly [Stitches.$$PropertyValue]: "boxShadow";
        };
    };
    lh: (value: Stitches.PropertyValue<"lineHeight">) => {
        lineHeight: {
            readonly [Stitches.$$PropertyValue]: "lineHeight";
        };
    };
    ox: (value: Stitches.PropertyValue<"overflowX">) => {
        overflowX: {
            readonly [Stitches.$$PropertyValue]: "overflowX";
        };
    };
    oy: (value: Stitches.PropertyValue<"overflowY">) => {
        overflowY: {
            readonly [Stitches.$$PropertyValue]: "overflowY";
        };
    };
    pe: (value: Stitches.PropertyValue<"pointerEvents">) => {
        pointerEvents: {
            readonly [Stitches.$$PropertyValue]: "pointerEvents";
        };
    };
    us: (value: Stitches.PropertyValue<"userSelect">) => {
        WebkitUserSelect: {
            readonly [Stitches.$$PropertyValue]: "userSelect";
        };
        userSelect: {
            readonly [Stitches.$$PropertyValue]: "userSelect";
        };
    };
    userSelect: (value: Stitches.PropertyValue<"userSelect">) => {
        WebkitUserSelect: {
            readonly [Stitches.$$PropertyValue]: "userSelect";
        };
        userSelect: {
            readonly [Stitches.$$PropertyValue]: "userSelect";
        };
    };
    size: (value: Stitches.PropertyValue<"width">) => {
        width: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
        height: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
    };
    appearance: (value: Stitches.PropertyValue<"appearance">) => {
        WebkitAppearance: {
            readonly [Stitches.$$PropertyValue]: "appearance";
        };
        appearance: {
            readonly [Stitches.$$PropertyValue]: "appearance";
        };
    };
    backgroundClip: (value: Stitches.PropertyValue<"backgroundClip">) => {
        WebkitBackgroundClip: {
            readonly [Stitches.$$PropertyValue]: "backgroundClip";
        };
        backgroundClip: {
            readonly [Stitches.$$PropertyValue]: "backgroundClip";
        };
    };
}>; })[]) => () => string, keyframes: (style: {
    [offset: string]: import("@stitches/react/types/css-util").CSS<{
        bp1: "(min-width: 520px)";
        bp2: "(min-width: 900px)";
        bp3: "(min-width: 1200px)";
        bp4: "(min-width: 1800px)";
        motion: "(prefers-reduced-motion)";
        hover: "(any-hover: hover)";
        dark: "(prefers-color-scheme: dark)";
        light: "(prefers-color-scheme: light)";
    }, {
        colors: {
            white: string;
            red: string;
            gold: string;
            yellow: string;
            blue: string;
            blueDark: string;
            green: string;
            greenDark: string;
            mediumGrey: string;
            lightGrey: string;
            lightGrey2: string;
            richBlack80: string;
            richBlack50: string;
            richBlack20: string;
            richBlack10: string;
            nuPurple120: string;
            nuPurple: string;
            nuPurple70: string;
            nuPurple60: string;
            nuPurple30: string;
            nuPurple10: string;
        };
        fonts: {
            sans: string;
            sansLight: string;
            sansBold: string;
            display: string;
            headline: string;
            headlineBold: string;
        };
        fontSizes: {
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            6: string;
            7: string;
            8: string;
            9: string;
        };
        lineHeights: {
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            6: string;
            7: string;
            8: string;
            9: string;
        };
        sizes: {
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            6: string;
            7: string;
            8: string;
            9: string;
        };
        space: {
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            6: string;
            7: string;
            8: string;
            9: string;
        };
        radii: {
            1: string;
            2: string;
            3: string;
            4: string;
            round: string;
            pill: string;
        };
        zIndices: {
            1: string;
            2: string;
            3: string;
            4: string;
            max: string;
        };
    }, import("@stitches/react/types/config").DefaultThemeMap, {
        p: (value: Stitches.PropertyValue<"padding">) => {
            padding: {
                readonly [Stitches.$$PropertyValue]: "padding";
            };
        };
        pt: (value: Stitches.PropertyValue<"paddingTop">) => {
            paddingTop: {
                readonly [Stitches.$$PropertyValue]: "paddingTop";
            };
        };
        pr: (value: Stitches.PropertyValue<"paddingRight">) => {
            paddingRight: {
                readonly [Stitches.$$PropertyValue]: "paddingRight";
            };
        };
        pb: (value: Stitches.PropertyValue<"paddingBottom">) => {
            paddingBottom: {
                readonly [Stitches.$$PropertyValue]: "paddingBottom";
            };
        };
        pl: (value: Stitches.PropertyValue<"paddingLeft">) => {
            paddingLeft: {
                readonly [Stitches.$$PropertyValue]: "paddingLeft";
            };
        };
        px: (value: Stitches.PropertyValue<"paddingLeft">) => {
            paddingLeft: {
                readonly [Stitches.$$PropertyValue]: "paddingLeft";
            };
            paddingRight: {
                readonly [Stitches.$$PropertyValue]: "paddingLeft";
            };
        };
        py: (value: Stitches.PropertyValue<"paddingTop">) => {
            paddingTop: {
                readonly [Stitches.$$PropertyValue]: "paddingTop";
            };
            paddingBottom: {
                readonly [Stitches.$$PropertyValue]: "paddingTop";
            };
        };
        m: (value: Stitches.PropertyValue<"margin">) => {
            margin: {
                readonly [Stitches.$$PropertyValue]: "margin";
            };
        };
        mt: (value: Stitches.PropertyValue<"marginTop">) => {
            marginTop: {
                readonly [Stitches.$$PropertyValue]: "marginTop";
            };
        };
        mr: (value: Stitches.PropertyValue<"marginRight">) => {
            marginRight: {
                readonly [Stitches.$$PropertyValue]: "marginRight";
            };
        };
        mb: (value: Stitches.PropertyValue<"marginBottom">) => {
            marginBottom: {
                readonly [Stitches.$$PropertyValue]: "marginBottom";
            };
        };
        ml: (value: Stitches.PropertyValue<"marginLeft">) => {
            marginLeft: {
                readonly [Stitches.$$PropertyValue]: "marginLeft";
            };
        };
        mx: (value: Stitches.PropertyValue<"marginLeft">) => {
            marginLeft: {
                readonly [Stitches.$$PropertyValue]: "marginLeft";
            };
            marginRight: {
                readonly [Stitches.$$PropertyValue]: "marginLeft";
            };
        };
        my: (value: Stitches.PropertyValue<"marginTop">) => {
            marginTop: {
                readonly [Stitches.$$PropertyValue]: "marginTop";
            };
            marginBottom: {
                readonly [Stitches.$$PropertyValue]: "marginTop";
            };
        };
        ta: (value: Stitches.PropertyValue<"textAlign">) => {
            textAlign: {
                readonly [Stitches.$$PropertyValue]: "textAlign";
            };
        };
        fd: (value: Stitches.PropertyValue<"flexDirection">) => {
            flexDirection: {
                readonly [Stitches.$$PropertyValue]: "flexDirection";
            };
        };
        fw: (value: Stitches.PropertyValue<"flexWrap">) => {
            flexWrap: {
                readonly [Stitches.$$PropertyValue]: "flexWrap";
            };
        };
        ai: (value: Stitches.PropertyValue<"alignItems">) => {
            alignItems: {
                readonly [Stitches.$$PropertyValue]: "alignItems";
            };
        };
        ac: (value: Stitches.PropertyValue<"alignContent">) => {
            alignContent: {
                readonly [Stitches.$$PropertyValue]: "alignContent";
            };
        };
        jc: (value: Stitches.PropertyValue<"justifyContent">) => {
            justifyContent: {
                readonly [Stitches.$$PropertyValue]: "justifyContent";
            };
        };
        as: (value: Stitches.PropertyValue<"alignSelf">) => {
            alignSelf: {
                readonly [Stitches.$$PropertyValue]: "alignSelf";
            };
        };
        fg: (value: Stitches.PropertyValue<"flexGrow">) => {
            flexGrow: {
                readonly [Stitches.$$PropertyValue]: "flexGrow";
            };
        };
        fs: (value: Stitches.PropertyValue<"flexShrink">) => {
            flexShrink: {
                readonly [Stitches.$$PropertyValue]: "flexShrink";
            };
        };
        fb: (value: Stitches.PropertyValue<"flexBasis">) => {
            flexBasis: {
                readonly [Stitches.$$PropertyValue]: "flexBasis";
            };
        };
        bc: (value: Stitches.PropertyValue<"backgroundColor">) => {
            backgroundColor: {
                readonly [Stitches.$$PropertyValue]: "backgroundColor";
            };
        };
        br: (value: Stitches.PropertyValue<"borderRadius">) => {
            borderRadius: {
                readonly [Stitches.$$PropertyValue]: "borderRadius";
            };
        };
        btrr: (value: Stitches.PropertyValue<"borderTopRightRadius">) => {
            borderTopRightRadius: {
                readonly [Stitches.$$PropertyValue]: "borderTopRightRadius";
            };
        };
        bbrr: (value: Stitches.PropertyValue<"borderBottomRightRadius">) => {
            borderBottomRightRadius: {
                readonly [Stitches.$$PropertyValue]: "borderBottomRightRadius";
            };
        };
        bblr: (value: Stitches.PropertyValue<"borderBottomLeftRadius">) => {
            borderBottomLeftRadius: {
                readonly [Stitches.$$PropertyValue]: "borderBottomLeftRadius";
            };
        };
        btlr: (value: Stitches.PropertyValue<"borderTopLeftRadius">) => {
            borderTopLeftRadius: {
                readonly [Stitches.$$PropertyValue]: "borderTopLeftRadius";
            };
        };
        bs: (value: Stitches.PropertyValue<"boxShadow">) => {
            boxShadow: {
                readonly [Stitches.$$PropertyValue]: "boxShadow";
            };
        };
        lh: (value: Stitches.PropertyValue<"lineHeight">) => {
            lineHeight: {
                readonly [Stitches.$$PropertyValue]: "lineHeight";
            };
        };
        ox: (value: Stitches.PropertyValue<"overflowX">) => {
            overflowX: {
                readonly [Stitches.$$PropertyValue]: "overflowX";
            };
        };
        oy: (value: Stitches.PropertyValue<"overflowY">) => {
            overflowY: {
                readonly [Stitches.$$PropertyValue]: "overflowY";
            };
        };
        pe: (value: Stitches.PropertyValue<"pointerEvents">) => {
            pointerEvents: {
                readonly [Stitches.$$PropertyValue]: "pointerEvents";
            };
        };
        us: (value: Stitches.PropertyValue<"userSelect">) => {
            WebkitUserSelect: {
                readonly [Stitches.$$PropertyValue]: "userSelect";
            };
            userSelect: {
                readonly [Stitches.$$PropertyValue]: "userSelect";
            };
        };
        userSelect: (value: Stitches.PropertyValue<"userSelect">) => {
            WebkitUserSelect: {
                readonly [Stitches.$$PropertyValue]: "userSelect";
            };
            userSelect: {
                readonly [Stitches.$$PropertyValue]: "userSelect";
            };
        };
        size: (value: Stitches.PropertyValue<"width">) => {
            width: {
                readonly [Stitches.$$PropertyValue]: "width";
            };
            height: {
                readonly [Stitches.$$PropertyValue]: "width";
            };
        };
        appearance: (value: Stitches.PropertyValue<"appearance">) => {
            WebkitAppearance: {
                readonly [Stitches.$$PropertyValue]: "appearance";
            };
            appearance: {
                readonly [Stitches.$$PropertyValue]: "appearance";
            };
        };
        backgroundClip: (value: Stitches.PropertyValue<"backgroundClip">) => {
            WebkitBackgroundClip: {
                readonly [Stitches.$$PropertyValue]: "backgroundClip";
            };
            backgroundClip: {
                readonly [Stitches.$$PropertyValue]: "backgroundClip";
            };
        };
    }>;
}) => {
    (): string;
    name: string;
}, getCssText: () => string, theme: string & {
    className: string;
    selector: string;
} & {
    colors: {
        white: import("@stitches/react/types/theme").Token<"white", string, "colors", "">;
        red: import("@stitches/react/types/theme").Token<"red", string, "colors", "">;
        gold: import("@stitches/react/types/theme").Token<"gold", string, "colors", "">;
        yellow: import("@stitches/react/types/theme").Token<"yellow", string, "colors", "">;
        blue: import("@stitches/react/types/theme").Token<"blue", string, "colors", "">;
        blueDark: import("@stitches/react/types/theme").Token<"blueDark", string, "colors", "">;
        green: import("@stitches/react/types/theme").Token<"green", string, "colors", "">;
        greenDark: import("@stitches/react/types/theme").Token<"greenDark", string, "colors", "">;
        mediumGrey: import("@stitches/react/types/theme").Token<"mediumGrey", string, "colors", "">;
        lightGrey: import("@stitches/react/types/theme").Token<"lightGrey", string, "colors", "">;
        lightGrey2: import("@stitches/react/types/theme").Token<"lightGrey2", string, "colors", "">;
        richBlack80: import("@stitches/react/types/theme").Token<"richBlack80", string, "colors", "">;
        richBlack50: import("@stitches/react/types/theme").Token<"richBlack50", string, "colors", "">;
        richBlack20: import("@stitches/react/types/theme").Token<"richBlack20", string, "colors", "">;
        richBlack10: import("@stitches/react/types/theme").Token<"richBlack10", string, "colors", "">;
        nuPurple120: import("@stitches/react/types/theme").Token<"nuPurple120", string, "colors", "">;
        nuPurple: import("@stitches/react/types/theme").Token<"nuPurple", string, "colors", "">;
        nuPurple70: import("@stitches/react/types/theme").Token<"nuPurple70", string, "colors", "">;
        nuPurple60: import("@stitches/react/types/theme").Token<"nuPurple60", string, "colors", "">;
        nuPurple30: import("@stitches/react/types/theme").Token<"nuPurple30", string, "colors", "">;
        nuPurple10: import("@stitches/react/types/theme").Token<"nuPurple10", string, "colors", "">;
    };
    fonts: {
        sans: import("@stitches/react/types/theme").Token<"sans", string, "fonts", "">;
        sansLight: import("@stitches/react/types/theme").Token<"sansLight", string, "fonts", "">;
        sansBold: import("@stitches/react/types/theme").Token<"sansBold", string, "fonts", "">;
        display: import("@stitches/react/types/theme").Token<"display", string, "fonts", "">;
        headline: import("@stitches/react/types/theme").Token<"headline", string, "fonts", "">;
        headlineBold: import("@stitches/react/types/theme").Token<"headlineBold", string, "fonts", "">;
    };
    fontSizes: {
        1: import("@stitches/react/types/theme").Token<"1", string, "fontSizes", "">;
        2: import("@stitches/react/types/theme").Token<"2", string, "fontSizes", "">;
        3: import("@stitches/react/types/theme").Token<"3", string, "fontSizes", "">;
        4: import("@stitches/react/types/theme").Token<"4", string, "fontSizes", "">;
        5: import("@stitches/react/types/theme").Token<"5", string, "fontSizes", "">;
        6: import("@stitches/react/types/theme").Token<"6", string, "fontSizes", "">;
        7: import("@stitches/react/types/theme").Token<"7", string, "fontSizes", "">;
        8: import("@stitches/react/types/theme").Token<"8", string, "fontSizes", "">;
        9: import("@stitches/react/types/theme").Token<"9", string, "fontSizes", "">;
    };
    lineHeights: {
        1: import("@stitches/react/types/theme").Token<"1", string, "lineHeights", "">;
        2: import("@stitches/react/types/theme").Token<"2", string, "lineHeights", "">;
        3: import("@stitches/react/types/theme").Token<"3", string, "lineHeights", "">;
        4: import("@stitches/react/types/theme").Token<"4", string, "lineHeights", "">;
        5: import("@stitches/react/types/theme").Token<"5", string, "lineHeights", "">;
        6: import("@stitches/react/types/theme").Token<"6", string, "lineHeights", "">;
        7: import("@stitches/react/types/theme").Token<"7", string, "lineHeights", "">;
        8: import("@stitches/react/types/theme").Token<"8", string, "lineHeights", "">;
        9: import("@stitches/react/types/theme").Token<"9", string, "lineHeights", "">;
    };
    sizes: {
        1: import("@stitches/react/types/theme").Token<"1", string, "sizes", "">;
        2: import("@stitches/react/types/theme").Token<"2", string, "sizes", "">;
        3: import("@stitches/react/types/theme").Token<"3", string, "sizes", "">;
        4: import("@stitches/react/types/theme").Token<"4", string, "sizes", "">;
        5: import("@stitches/react/types/theme").Token<"5", string, "sizes", "">;
        6: import("@stitches/react/types/theme").Token<"6", string, "sizes", "">;
        7: import("@stitches/react/types/theme").Token<"7", string, "sizes", "">;
        8: import("@stitches/react/types/theme").Token<"8", string, "sizes", "">;
        9: import("@stitches/react/types/theme").Token<"9", string, "sizes", "">;
    };
    space: {
        1: import("@stitches/react/types/theme").Token<"1", string, "space", "">;
        2: import("@stitches/react/types/theme").Token<"2", string, "space", "">;
        3: import("@stitches/react/types/theme").Token<"3", string, "space", "">;
        4: import("@stitches/react/types/theme").Token<"4", string, "space", "">;
        5: import("@stitches/react/types/theme").Token<"5", string, "space", "">;
        6: import("@stitches/react/types/theme").Token<"6", string, "space", "">;
        7: import("@stitches/react/types/theme").Token<"7", string, "space", "">;
        8: import("@stitches/react/types/theme").Token<"8", string, "space", "">;
        9: import("@stitches/react/types/theme").Token<"9", string, "space", "">;
    };
    radii: {
        1: import("@stitches/react/types/theme").Token<"1", string, "radii", "">;
        2: import("@stitches/react/types/theme").Token<"2", string, "radii", "">;
        3: import("@stitches/react/types/theme").Token<"3", string, "radii", "">;
        4: import("@stitches/react/types/theme").Token<"4", string, "radii", "">;
        round: import("@stitches/react/types/theme").Token<"round", string, "radii", "">;
        pill: import("@stitches/react/types/theme").Token<"pill", string, "radii", "">;
    };
    zIndices: {
        1: import("@stitches/react/types/theme").Token<"1", string, "zIndices", "">;
        2: import("@stitches/react/types/theme").Token<"2", string, "zIndices", "">;
        3: import("@stitches/react/types/theme").Token<"3", string, "zIndices", "">;
        4: import("@stitches/react/types/theme").Token<"4", string, "zIndices", "">;
        max: import("@stitches/react/types/theme").Token<"max", string, "zIndices", "">;
    };
}, createTheme: <Argument0 extends string | ({
    colors?: {
        white?: string | number | boolean | undefined;
        red?: string | number | boolean | undefined;
        gold?: string | number | boolean | undefined;
        yellow?: string | number | boolean | undefined;
        blue?: string | number | boolean | undefined;
        blueDark?: string | number | boolean | undefined;
        green?: string | number | boolean | undefined;
        greenDark?: string | number | boolean | undefined;
        mediumGrey?: string | number | boolean | undefined;
        lightGrey?: string | number | boolean | undefined;
        lightGrey2?: string | number | boolean | undefined;
        richBlack80?: string | number | boolean | undefined;
        richBlack50?: string | number | boolean | undefined;
        richBlack20?: string | number | boolean | undefined;
        richBlack10?: string | number | boolean | undefined;
        nuPurple120?: string | number | boolean | undefined;
        nuPurple?: string | number | boolean | undefined;
        nuPurple70?: string | number | boolean | undefined;
        nuPurple60?: string | number | boolean | undefined;
        nuPurple30?: string | number | boolean | undefined;
        nuPurple10?: string | number | boolean | undefined;
    } | undefined;
    fonts?: {
        sans?: string | number | boolean | undefined;
        sansLight?: string | number | boolean | undefined;
        sansBold?: string | number | boolean | undefined;
        display?: string | number | boolean | undefined;
        headline?: string | number | boolean | undefined;
        headlineBold?: string | number | boolean | undefined;
    } | undefined;
    fontSizes?: {
        1?: string | number | boolean | undefined;
        2?: string | number | boolean | undefined;
        3?: string | number | boolean | undefined;
        4?: string | number | boolean | undefined;
        5?: string | number | boolean | undefined;
        6?: string | number | boolean | undefined;
        7?: string | number | boolean | undefined;
        8?: string | number | boolean | undefined;
        9?: string | number | boolean | undefined;
    } | undefined;
    lineHeights?: {
        1?: string | number | boolean | undefined;
        2?: string | number | boolean | undefined;
        3?: string | number | boolean | undefined;
        4?: string | number | boolean | undefined;
        5?: string | number | boolean | undefined;
        6?: string | number | boolean | undefined;
        7?: string | number | boolean | undefined;
        8?: string | number | boolean | undefined;
        9?: string | number | boolean | undefined;
    } | undefined;
    sizes?: {
        1?: string | number | boolean | undefined;
        2?: string | number | boolean | undefined;
        3?: string | number | boolean | undefined;
        4?: string | number | boolean | undefined;
        5?: string | number | boolean | undefined;
        6?: string | number | boolean | undefined;
        7?: string | number | boolean | undefined;
        8?: string | number | boolean | undefined;
        9?: string | number | boolean | undefined;
    } | undefined;
    space?: {
        1?: string | number | boolean | undefined;
        2?: string | number | boolean | undefined;
        3?: string | number | boolean | undefined;
        4?: string | number | boolean | undefined;
        5?: string | number | boolean | undefined;
        6?: string | number | boolean | undefined;
        7?: string | number | boolean | undefined;
        8?: string | number | boolean | undefined;
        9?: string | number | boolean | undefined;
    } | undefined;
    radii?: {
        1?: string | number | boolean | undefined;
        2?: string | number | boolean | undefined;
        3?: string | number | boolean | undefined;
        4?: string | number | boolean | undefined;
        round?: string | number | boolean | undefined;
        pill?: string | number | boolean | undefined;
    } | undefined;
    zIndices?: {
        1?: string | number | boolean | undefined;
        2?: string | number | boolean | undefined;
        3?: string | number | boolean | undefined;
        4?: string | number | boolean | undefined;
        max?: string | number | boolean | undefined;
    } | undefined;
} & {
    [x: string]: {
        [x: string]: string | number | boolean;
        [x: number]: string | number | boolean;
    };
}), Argument1 extends string | ({
    colors?: {
        white?: string | number | boolean | undefined;
        red?: string | number | boolean | undefined;
        gold?: string | number | boolean | undefined;
        yellow?: string | number | boolean | undefined;
        blue?: string | number | boolean | undefined;
        blueDark?: string | number | boolean | undefined;
        green?: string | number | boolean | undefined;
        greenDark?: string | number | boolean | undefined;
        mediumGrey?: string | number | boolean | undefined;
        lightGrey?: string | number | boolean | undefined;
        lightGrey2?: string | number | boolean | undefined;
        richBlack80?: string | number | boolean | undefined;
        richBlack50?: string | number | boolean | undefined;
        richBlack20?: string | number | boolean | undefined;
        richBlack10?: string | number | boolean | undefined;
        nuPurple120?: string | number | boolean | undefined;
        nuPurple?: string | number | boolean | undefined;
        nuPurple70?: string | number | boolean | undefined;
        nuPurple60?: string | number | boolean | undefined;
        nuPurple30?: string | number | boolean | undefined;
        nuPurple10?: string | number | boolean | undefined;
    } | undefined;
    fonts?: {
        sans?: string | number | boolean | undefined;
        sansLight?: string | number | boolean | undefined;
        sansBold?: string | number | boolean | undefined;
        display?: string | number | boolean | undefined;
        headline?: string | number | boolean | undefined;
        headlineBold?: string | number | boolean | undefined;
    } | undefined;
    fontSizes?: {
        1?: string | number | boolean | undefined;
        2?: string | number | boolean | undefined;
        3?: string | number | boolean | undefined;
        4?: string | number | boolean | undefined;
        5?: string | number | boolean | undefined;
        6?: string | number | boolean | undefined;
        7?: string | number | boolean | undefined;
        8?: string | number | boolean | undefined;
        9?: string | number | boolean | undefined;
    } | undefined;
    lineHeights?: {
        1?: string | number | boolean | undefined;
        2?: string | number | boolean | undefined;
        3?: string | number | boolean | undefined;
        4?: string | number | boolean | undefined;
        5?: string | number | boolean | undefined;
        6?: string | number | boolean | undefined;
        7?: string | number | boolean | undefined;
        8?: string | number | boolean | undefined;
        9?: string | number | boolean | undefined;
    } | undefined;
    sizes?: {
        1?: string | number | boolean | undefined;
        2?: string | number | boolean | undefined;
        3?: string | number | boolean | undefined;
        4?: string | number | boolean | undefined;
        5?: string | number | boolean | undefined;
        6?: string | number | boolean | undefined;
        7?: string | number | boolean | undefined;
        8?: string | number | boolean | undefined;
        9?: string | number | boolean | undefined;
    } | undefined;
    space?: {
        1?: string | number | boolean | undefined;
        2?: string | number | boolean | undefined;
        3?: string | number | boolean | undefined;
        4?: string | number | boolean | undefined;
        5?: string | number | boolean | undefined;
        6?: string | number | boolean | undefined;
        7?: string | number | boolean | undefined;
        8?: string | number | boolean | undefined;
        9?: string | number | boolean | undefined;
    } | undefined;
    radii?: {
        1?: string | number | boolean | undefined;
        2?: string | number | boolean | undefined;
        3?: string | number | boolean | undefined;
        4?: string | number | boolean | undefined;
        round?: string | number | boolean | undefined;
        pill?: string | number | boolean | undefined;
    } | undefined;
    zIndices?: {
        1?: string | number | boolean | undefined;
        2?: string | number | boolean | undefined;
        3?: string | number | boolean | undefined;
        4?: string | number | boolean | undefined;
        max?: string | number | boolean | undefined;
    } | undefined;
} & {
    [x: string]: {
        [x: string]: string | number | boolean;
        [x: number]: string | number | boolean;
    };
})>(nameOrScalesArg0: Argument0, nameOrScalesArg1?: Argument1 | undefined) => string & {
    className: string;
    selector: string;
} & (Argument0 extends string ? import("@stitches/react/types/stitches").ThemeTokens<Argument1, ""> : import("@stitches/react/types/stitches").ThemeTokens<Argument0, "">), config: {
    prefix: "";
    media: {
        bp1: "(min-width: 520px)";
        bp2: "(min-width: 900px)";
        bp3: "(min-width: 1200px)";
        bp4: "(min-width: 1800px)";
        motion: "(prefers-reduced-motion)";
        hover: "(any-hover: hover)";
        dark: "(prefers-color-scheme: dark)";
        light: "(prefers-color-scheme: light)";
    };
    theme: {
        colors: {
            white: string;
            red: string;
            gold: string;
            yellow: string;
            blue: string;
            blueDark: string;
            green: string;
            greenDark: string;
            mediumGrey: string;
            lightGrey: string;
            lightGrey2: string;
            richBlack80: string;
            richBlack50: string;
            richBlack20: string;
            richBlack10: string;
            nuPurple120: string;
            nuPurple: string;
            nuPurple70: string;
            nuPurple60: string;
            nuPurple30: string;
            nuPurple10: string;
        };
        fonts: {
            sans: string;
            sansLight: string;
            sansBold: string;
            display: string;
            headline: string;
            headlineBold: string;
        };
        fontSizes: {
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            6: string;
            7: string;
            8: string;
            9: string;
        };
        lineHeights: {
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            6: string;
            7: string;
            8: string;
            9: string;
        };
        sizes: {
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            6: string;
            7: string;
            8: string;
            9: string;
        };
        space: {
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            6: string;
            7: string;
            8: string;
            9: string;
        };
        radii: {
            1: string;
            2: string;
            3: string;
            4: string;
            round: string;
            pill: string;
        };
        zIndices: {
            1: string;
            2: string;
            3: string;
            4: string;
            max: string;
        };
    };
    themeMap: import("@stitches/react/types/config").DefaultThemeMap;
    utils: {
        p: (value: Stitches.PropertyValue<"padding">) => {
            padding: {
                readonly [Stitches.$$PropertyValue]: "padding";
            };
        };
        pt: (value: Stitches.PropertyValue<"paddingTop">) => {
            paddingTop: {
                readonly [Stitches.$$PropertyValue]: "paddingTop";
            };
        };
        pr: (value: Stitches.PropertyValue<"paddingRight">) => {
            paddingRight: {
                readonly [Stitches.$$PropertyValue]: "paddingRight";
            };
        };
        pb: (value: Stitches.PropertyValue<"paddingBottom">) => {
            paddingBottom: {
                readonly [Stitches.$$PropertyValue]: "paddingBottom";
            };
        };
        pl: (value: Stitches.PropertyValue<"paddingLeft">) => {
            paddingLeft: {
                readonly [Stitches.$$PropertyValue]: "paddingLeft";
            };
        };
        px: (value: Stitches.PropertyValue<"paddingLeft">) => {
            paddingLeft: {
                readonly [Stitches.$$PropertyValue]: "paddingLeft";
            };
            paddingRight: {
                readonly [Stitches.$$PropertyValue]: "paddingLeft";
            };
        };
        py: (value: Stitches.PropertyValue<"paddingTop">) => {
            paddingTop: {
                readonly [Stitches.$$PropertyValue]: "paddingTop";
            };
            paddingBottom: {
                readonly [Stitches.$$PropertyValue]: "paddingTop";
            };
        };
        m: (value: Stitches.PropertyValue<"margin">) => {
            margin: {
                readonly [Stitches.$$PropertyValue]: "margin";
            };
        };
        mt: (value: Stitches.PropertyValue<"marginTop">) => {
            marginTop: {
                readonly [Stitches.$$PropertyValue]: "marginTop";
            };
        };
        mr: (value: Stitches.PropertyValue<"marginRight">) => {
            marginRight: {
                readonly [Stitches.$$PropertyValue]: "marginRight";
            };
        };
        mb: (value: Stitches.PropertyValue<"marginBottom">) => {
            marginBottom: {
                readonly [Stitches.$$PropertyValue]: "marginBottom";
            };
        };
        ml: (value: Stitches.PropertyValue<"marginLeft">) => {
            marginLeft: {
                readonly [Stitches.$$PropertyValue]: "marginLeft";
            };
        };
        mx: (value: Stitches.PropertyValue<"marginLeft">) => {
            marginLeft: {
                readonly [Stitches.$$PropertyValue]: "marginLeft";
            };
            marginRight: {
                readonly [Stitches.$$PropertyValue]: "marginLeft";
            };
        };
        my: (value: Stitches.PropertyValue<"marginTop">) => {
            marginTop: {
                readonly [Stitches.$$PropertyValue]: "marginTop";
            };
            marginBottom: {
                readonly [Stitches.$$PropertyValue]: "marginTop";
            };
        };
        ta: (value: Stitches.PropertyValue<"textAlign">) => {
            textAlign: {
                readonly [Stitches.$$PropertyValue]: "textAlign";
            };
        };
        fd: (value: Stitches.PropertyValue<"flexDirection">) => {
            flexDirection: {
                readonly [Stitches.$$PropertyValue]: "flexDirection";
            };
        };
        fw: (value: Stitches.PropertyValue<"flexWrap">) => {
            flexWrap: {
                readonly [Stitches.$$PropertyValue]: "flexWrap";
            };
        };
        ai: (value: Stitches.PropertyValue<"alignItems">) => {
            alignItems: {
                readonly [Stitches.$$PropertyValue]: "alignItems";
            };
        };
        ac: (value: Stitches.PropertyValue<"alignContent">) => {
            alignContent: {
                readonly [Stitches.$$PropertyValue]: "alignContent";
            };
        };
        jc: (value: Stitches.PropertyValue<"justifyContent">) => {
            justifyContent: {
                readonly [Stitches.$$PropertyValue]: "justifyContent";
            };
        };
        as: (value: Stitches.PropertyValue<"alignSelf">) => {
            alignSelf: {
                readonly [Stitches.$$PropertyValue]: "alignSelf";
            };
        };
        fg: (value: Stitches.PropertyValue<"flexGrow">) => {
            flexGrow: {
                readonly [Stitches.$$PropertyValue]: "flexGrow";
            };
        };
        fs: (value: Stitches.PropertyValue<"flexShrink">) => {
            flexShrink: {
                readonly [Stitches.$$PropertyValue]: "flexShrink";
            };
        };
        fb: (value: Stitches.PropertyValue<"flexBasis">) => {
            flexBasis: {
                readonly [Stitches.$$PropertyValue]: "flexBasis";
            };
        };
        bc: (value: Stitches.PropertyValue<"backgroundColor">) => {
            backgroundColor: {
                readonly [Stitches.$$PropertyValue]: "backgroundColor";
            };
        };
        br: (value: Stitches.PropertyValue<"borderRadius">) => {
            borderRadius: {
                readonly [Stitches.$$PropertyValue]: "borderRadius";
            };
        };
        btrr: (value: Stitches.PropertyValue<"borderTopRightRadius">) => {
            borderTopRightRadius: {
                readonly [Stitches.$$PropertyValue]: "borderTopRightRadius";
            };
        };
        bbrr: (value: Stitches.PropertyValue<"borderBottomRightRadius">) => {
            borderBottomRightRadius: {
                readonly [Stitches.$$PropertyValue]: "borderBottomRightRadius";
            };
        };
        bblr: (value: Stitches.PropertyValue<"borderBottomLeftRadius">) => {
            borderBottomLeftRadius: {
                readonly [Stitches.$$PropertyValue]: "borderBottomLeftRadius";
            };
        };
        btlr: (value: Stitches.PropertyValue<"borderTopLeftRadius">) => {
            borderTopLeftRadius: {
                readonly [Stitches.$$PropertyValue]: "borderTopLeftRadius";
            };
        };
        bs: (value: Stitches.PropertyValue<"boxShadow">) => {
            boxShadow: {
                readonly [Stitches.$$PropertyValue]: "boxShadow";
            };
        };
        lh: (value: Stitches.PropertyValue<"lineHeight">) => {
            lineHeight: {
                readonly [Stitches.$$PropertyValue]: "lineHeight";
            };
        };
        ox: (value: Stitches.PropertyValue<"overflowX">) => {
            overflowX: {
                readonly [Stitches.$$PropertyValue]: "overflowX";
            };
        };
        oy: (value: Stitches.PropertyValue<"overflowY">) => {
            overflowY: {
                readonly [Stitches.$$PropertyValue]: "overflowY";
            };
        };
        pe: (value: Stitches.PropertyValue<"pointerEvents">) => {
            pointerEvents: {
                readonly [Stitches.$$PropertyValue]: "pointerEvents";
            };
        };
        us: (value: Stitches.PropertyValue<"userSelect">) => {
            WebkitUserSelect: {
                readonly [Stitches.$$PropertyValue]: "userSelect";
            };
            userSelect: {
                readonly [Stitches.$$PropertyValue]: "userSelect";
            };
        };
        userSelect: (value: Stitches.PropertyValue<"userSelect">) => {
            WebkitUserSelect: {
                readonly [Stitches.$$PropertyValue]: "userSelect";
            };
            userSelect: {
                readonly [Stitches.$$PropertyValue]: "userSelect";
            };
        };
        size: (value: Stitches.PropertyValue<"width">) => {
            width: {
                readonly [Stitches.$$PropertyValue]: "width";
            };
            height: {
                readonly [Stitches.$$PropertyValue]: "width";
            };
        };
        appearance: (value: Stitches.PropertyValue<"appearance">) => {
            WebkitAppearance: {
                readonly [Stitches.$$PropertyValue]: "appearance";
            };
            appearance: {
                readonly [Stitches.$$PropertyValue]: "appearance";
            };
        };
        backgroundClip: (value: Stitches.PropertyValue<"backgroundClip">) => {
            WebkitBackgroundClip: {
                readonly [Stitches.$$PropertyValue]: "backgroundClip";
            };
            backgroundClip: {
                readonly [Stitches.$$PropertyValue]: "backgroundClip";
            };
        };
    };
};
export declare const globalStyles: () => string;
export declare type CSS = Stitches.CSS<typeof config>;
export declare const colorHelpers: {
    isDanger: {
        color: string;
        backgroundColor: string;
        fill: string;
    };
    isLight: {
        color: string;
        backgroundColor: string;
        fill: string;
    };
    isInfo: {
        color: string;
        backgroundColor: string;
        fill: string;
    };
    isPrimary: {
        color: string;
        backgroundColor: string;
        fill: string;
    };
    isSuccess: {
        color: string;
        backgroundColor: string;
        fill: string;
    };
    isWarning: {
        color: string;
        backgroundColor: string;
        fill: string;
    };
};
