/// <reference types="react" />
import * as Popover from "@radix-ui/react-popover";
declare const StyledArrow: import("@stitches/react/types/styled-component").StyledComponent<import("react").ForwardRefExoticComponent<Popover.PopoverArrowProps & import("react").RefAttributes<SVGSVGElement>>, {}, {
    bp1: "(min-width: 520px)";
    bp2: "(min-width: 900px)";
    bp3: "(min-width: 1200px)";
    bp4: "(min-width: 1800px)";
    motion: "(prefers-reduced-motion)";
    hover: "(any-hover: hover)";
    dark: "(prefers-color-scheme: dark)";
    light: "(prefers-color-scheme: light)";
}, import("@stitches/react/types/css-util").CSS<{
    bp1: "(min-width: 520px)";
    bp2: "(min-width: 900px)";
    bp3: "(min-width: 1200px)";
    bp4: "(min-width: 1800px)";
    motion: "(prefers-reduced-motion)";
    hover: "(any-hover: hover)";
    dark: "(prefers-color-scheme: dark)";
    light: "(prefers-color-scheme: light)";
}, {
    colors: {
        white: string;
        red: string;
        gold: string;
        yellow: string;
        blue: string;
        blueDark: string;
        green: string;
        greenDark: string;
        mediumGrey: string;
        lightGrey: string;
        lightGrey2: string;
        richBlack80: string;
        richBlack50: string;
        richBlack20: string;
        richBlack10: string;
        nuPurple120: string;
        nuPurple: string;
        nuPurple70: string;
        nuPurple60: string;
        nuPurple30: string;
        nuPurple10: string;
    };
    space: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
    };
    sizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
    };
    fontSizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
    };
    radii: {
        1: string;
        2: string;
        3: string;
        4: string;
        round: string;
        pill: string;
    };
    zIndices: {
        1: string;
        2: string;
        3: string;
        4: string;
        max: string;
    };
}, import("@stitches/react/types/config").DefaultThemeMap, {
    p: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        padding: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    pt: (value: {
        readonly [$$PropertyValue]: "paddingTop";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "paddingTop";
        };
    };
    pr: (value: {
        readonly [$$PropertyValue]: "paddingRight";
    }) => {
        paddingRight: {
            readonly [$$PropertyValue]: "paddingRight";
        };
    };
    pb: (value: {
        readonly [$$PropertyValue]: "paddingBottom";
    }) => {
        paddingBottom: {
            readonly [$$PropertyValue]: "paddingBottom";
        };
    };
    pl: (value: {
        readonly [$$PropertyValue]: "paddingLeft";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "paddingLeft";
        };
    };
    px: (value: {
        readonly [$$PropertyValue]: "paddingLeft";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "paddingLeft";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "paddingLeft";
        };
    };
    py: (value: {
        readonly [$$PropertyValue]: "paddingTop";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "paddingTop";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "paddingTop";
        };
    };
    m: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        margin: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    mt: (value: {
        readonly [$$PropertyValue]: "marginTop";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "marginTop";
        };
    };
    mr: (value: {
        readonly [$$PropertyValue]: "marginRight";
    }) => {
        marginRight: {
            readonly [$$PropertyValue]: "marginRight";
        };
    };
    mb: (value: {
        readonly [$$PropertyValue]: "marginBottom";
    }) => {
        marginBottom: {
            readonly [$$PropertyValue]: "marginBottom";
        };
    };
    ml: (value: {
        readonly [$$PropertyValue]: "marginLeft";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "marginLeft";
        };
    };
    mx: (value: {
        readonly [$$PropertyValue]: "marginLeft";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "marginLeft";
        };
        marginRight: {
            readonly [$$PropertyValue]: "marginLeft";
        };
    };
    my: (value: {
        readonly [$$PropertyValue]: "marginTop";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "marginTop";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "marginTop";
        };
    };
    ta: (value: {
        readonly [$$PropertyValue]: "textAlign";
    }) => {
        textAlign: {
            readonly [$$PropertyValue]: "textAlign";
        };
    };
    fd: (value: {
        readonly [$$PropertyValue]: "flexDirection";
    }) => {
        flexDirection: {
            readonly [$$PropertyValue]: "flexDirection";
        };
    };
    fw: (value: {
        readonly [$$PropertyValue]: "flexWrap";
    }) => {
        flexWrap: {
            readonly [$$PropertyValue]: "flexWrap";
        };
    };
    ai: (value: {
        readonly [$$PropertyValue]: "alignItems";
    }) => {
        alignItems: {
            readonly [$$PropertyValue]: "alignItems";
        };
    };
    ac: (value: {
        readonly [$$PropertyValue]: "alignContent";
    }) => {
        alignContent: {
            readonly [$$PropertyValue]: "alignContent";
        };
    };
    jc: (value: {
        readonly [$$PropertyValue]: "justifyContent";
    }) => {
        justifyContent: {
            readonly [$$PropertyValue]: "justifyContent";
        };
    };
    as: (value: {
        readonly [$$PropertyValue]: "alignSelf";
    }) => {
        alignSelf: {
            readonly [$$PropertyValue]: "alignSelf";
        };
    };
    fg: (value: {
        readonly [$$PropertyValue]: "flexGrow";
    }) => {
        flexGrow: {
            readonly [$$PropertyValue]: "flexGrow";
        };
    };
    fs: (value: {
        readonly [$$PropertyValue]: "flexShrink";
    }) => {
        flexShrink: {
            readonly [$$PropertyValue]: "flexShrink";
        };
    };
    fb: (value: {
        readonly [$$PropertyValue]: "flexBasis";
    }) => {
        flexBasis: {
            readonly [$$PropertyValue]: "flexBasis";
        };
    };
    bc: (value: {
        readonly [$$PropertyValue]: "backgroundColor";
    }) => {
        backgroundColor: {
            readonly [$$PropertyValue]: "backgroundColor";
        };
    };
    br: (value: {
        readonly [$$PropertyValue]: "borderRadius";
    }) => {
        borderRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
    };
    btrr: (value: {
        readonly [$$PropertyValue]: "borderTopRightRadius";
    }) => {
        borderTopRightRadius: {
            readonly [$$PropertyValue]: "borderTopRightRadius";
        };
    };
    bbrr: (value: {
        readonly [$$PropertyValue]: "borderBottomRightRadius";
    }) => {
        borderBottomRightRadius: {
            readonly [$$PropertyValue]: "borderBottomRightRadius";
        };
    };
    bblr: (value: {
        readonly [$$PropertyValue]: "borderBottomLeftRadius";
    }) => {
        borderBottomLeftRadius: {
            readonly [$$PropertyValue]: "borderBottomLeftRadius";
        };
    };
    btlr: (value: {
        readonly [$$PropertyValue]: "borderTopLeftRadius";
    }) => {
        borderTopLeftRadius: {
            readonly [$$PropertyValue]: "borderTopLeftRadius";
        };
    };
    bs: (value: {
        readonly [$$PropertyValue]: "boxShadow";
    }) => {
        boxShadow: {
            readonly [$$PropertyValue]: "boxShadow";
        };
    };
    lh: (value: {
        readonly [$$PropertyValue]: "lineHeight";
    }) => {
        lineHeight: {
            readonly [$$PropertyValue]: "lineHeight";
        };
    };
    ox: (value: {
        readonly [$$PropertyValue]: "overflowX";
    }) => {
        overflowX: {
            readonly [$$PropertyValue]: "overflowX";
        };
    };
    oy: (value: {
        readonly [$$PropertyValue]: "overflowY";
    }) => {
        overflowY: {
            readonly [$$PropertyValue]: "overflowY";
        };
    };
    pe: (value: {
        readonly [$$PropertyValue]: "pointerEvents";
    }) => {
        pointerEvents: {
            readonly [$$PropertyValue]: "pointerEvents";
        };
    };
    us: (value: {
        readonly [$$PropertyValue]: "userSelect";
    }) => {
        WebkitUserSelect: {
            readonly [$$PropertyValue]: "userSelect";
        };
        userSelect: {
            readonly [$$PropertyValue]: "userSelect";
        };
    };
    userSelect: (value: {
        readonly [$$PropertyValue]: "userSelect";
    }) => {
        WebkitUserSelect: {
            readonly [$$PropertyValue]: "userSelect";
        };
        userSelect: {
            readonly [$$PropertyValue]: "userSelect";
        };
    };
    size: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    appearance: (value: {
        readonly [$$PropertyValue]: "appearance";
    }) => {
        WebkitAppearance: {
            readonly [$$PropertyValue]: "appearance";
        };
        appearance: {
            readonly [$$PropertyValue]: "appearance";
        };
    };
    backgroundClip: (value: {
        readonly [$$PropertyValue]: "backgroundClip";
    }) => {
        WebkitBackgroundClip: {
            readonly [$$PropertyValue]: "backgroundClip";
        };
        backgroundClip: {
            readonly [$$PropertyValue]: "backgroundClip";
        };
    };
}>>;
declare const StyledClose: import("@stitches/react/types/styled-component").StyledComponent<import("react").ForwardRefExoticComponent<Popover.PopoverCloseProps & import("react").RefAttributes<HTMLButtonElement>>, {}, {
    bp1: "(min-width: 520px)";
    bp2: "(min-width: 900px)";
    bp3: "(min-width: 1200px)";
    bp4: "(min-width: 1800px)";
    motion: "(prefers-reduced-motion)";
    hover: "(any-hover: hover)";
    dark: "(prefers-color-scheme: dark)";
    light: "(prefers-color-scheme: light)";
}, import("@stitches/react/types/css-util").CSS<{
    bp1: "(min-width: 520px)";
    bp2: "(min-width: 900px)";
    bp3: "(min-width: 1200px)";
    bp4: "(min-width: 1800px)";
    motion: "(prefers-reduced-motion)";
    hover: "(any-hover: hover)";
    dark: "(prefers-color-scheme: dark)";
    light: "(prefers-color-scheme: light)";
}, {
    colors: {
        white: string;
        red: string;
        gold: string;
        yellow: string;
        blue: string;
        blueDark: string;
        green: string;
        greenDark: string;
        mediumGrey: string;
        lightGrey: string;
        lightGrey2: string;
        richBlack80: string;
        richBlack50: string;
        richBlack20: string;
        richBlack10: string;
        nuPurple120: string;
        nuPurple: string;
        nuPurple70: string;
        nuPurple60: string;
        nuPurple30: string;
        nuPurple10: string;
    };
    space: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
    };
    sizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
    };
    fontSizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
    };
    radii: {
        1: string;
        2: string;
        3: string;
        4: string;
        round: string;
        pill: string;
    };
    zIndices: {
        1: string;
        2: string;
        3: string;
        4: string;
        max: string;
    };
}, import("@stitches/react/types/config").DefaultThemeMap, {
    p: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        padding: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    pt: (value: {
        readonly [$$PropertyValue]: "paddingTop";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "paddingTop";
        };
    };
    pr: (value: {
        readonly [$$PropertyValue]: "paddingRight";
    }) => {
        paddingRight: {
            readonly [$$PropertyValue]: "paddingRight";
        };
    };
    pb: (value: {
        readonly [$$PropertyValue]: "paddingBottom";
    }) => {
        paddingBottom: {
            readonly [$$PropertyValue]: "paddingBottom";
        };
    };
    pl: (value: {
        readonly [$$PropertyValue]: "paddingLeft";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "paddingLeft";
        };
    };
    px: (value: {
        readonly [$$PropertyValue]: "paddingLeft";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "paddingLeft";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "paddingLeft";
        };
    };
    py: (value: {
        readonly [$$PropertyValue]: "paddingTop";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "paddingTop";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "paddingTop";
        };
    };
    m: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        margin: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    mt: (value: {
        readonly [$$PropertyValue]: "marginTop";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "marginTop";
        };
    };
    mr: (value: {
        readonly [$$PropertyValue]: "marginRight";
    }) => {
        marginRight: {
            readonly [$$PropertyValue]: "marginRight";
        };
    };
    mb: (value: {
        readonly [$$PropertyValue]: "marginBottom";
    }) => {
        marginBottom: {
            readonly [$$PropertyValue]: "marginBottom";
        };
    };
    ml: (value: {
        readonly [$$PropertyValue]: "marginLeft";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "marginLeft";
        };
    };
    mx: (value: {
        readonly [$$PropertyValue]: "marginLeft";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "marginLeft";
        };
        marginRight: {
            readonly [$$PropertyValue]: "marginLeft";
        };
    };
    my: (value: {
        readonly [$$PropertyValue]: "marginTop";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "marginTop";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "marginTop";
        };
    };
    ta: (value: {
        readonly [$$PropertyValue]: "textAlign";
    }) => {
        textAlign: {
            readonly [$$PropertyValue]: "textAlign";
        };
    };
    fd: (value: {
        readonly [$$PropertyValue]: "flexDirection";
    }) => {
        flexDirection: {
            readonly [$$PropertyValue]: "flexDirection";
        };
    };
    fw: (value: {
        readonly [$$PropertyValue]: "flexWrap";
    }) => {
        flexWrap: {
            readonly [$$PropertyValue]: "flexWrap";
        };
    };
    ai: (value: {
        readonly [$$PropertyValue]: "alignItems";
    }) => {
        alignItems: {
            readonly [$$PropertyValue]: "alignItems";
        };
    };
    ac: (value: {
        readonly [$$PropertyValue]: "alignContent";
    }) => {
        alignContent: {
            readonly [$$PropertyValue]: "alignContent";
        };
    };
    jc: (value: {
        readonly [$$PropertyValue]: "justifyContent";
    }) => {
        justifyContent: {
            readonly [$$PropertyValue]: "justifyContent";
        };
    };
    as: (value: {
        readonly [$$PropertyValue]: "alignSelf";
    }) => {
        alignSelf: {
            readonly [$$PropertyValue]: "alignSelf";
        };
    };
    fg: (value: {
        readonly [$$PropertyValue]: "flexGrow";
    }) => {
        flexGrow: {
            readonly [$$PropertyValue]: "flexGrow";
        };
    };
    fs: (value: {
        readonly [$$PropertyValue]: "flexShrink";
    }) => {
        flexShrink: {
            readonly [$$PropertyValue]: "flexShrink";
        };
    };
    fb: (value: {
        readonly [$$PropertyValue]: "flexBasis";
    }) => {
        flexBasis: {
            readonly [$$PropertyValue]: "flexBasis";
        };
    };
    bc: (value: {
        readonly [$$PropertyValue]: "backgroundColor";
    }) => {
        backgroundColor: {
            readonly [$$PropertyValue]: "backgroundColor";
        };
    };
    br: (value: {
        readonly [$$PropertyValue]: "borderRadius";
    }) => {
        borderRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
    };
    btrr: (value: {
        readonly [$$PropertyValue]: "borderTopRightRadius";
    }) => {
        borderTopRightRadius: {
            readonly [$$PropertyValue]: "borderTopRightRadius";
        };
    };
    bbrr: (value: {
        readonly [$$PropertyValue]: "borderBottomRightRadius";
    }) => {
        borderBottomRightRadius: {
            readonly [$$PropertyValue]: "borderBottomRightRadius";
        };
    };
    bblr: (value: {
        readonly [$$PropertyValue]: "borderBottomLeftRadius";
    }) => {
        borderBottomLeftRadius: {
            readonly [$$PropertyValue]: "borderBottomLeftRadius";
        };
    };
    btlr: (value: {
        readonly [$$PropertyValue]: "borderTopLeftRadius";
    }) => {
        borderTopLeftRadius: {
            readonly [$$PropertyValue]: "borderTopLeftRadius";
        };
    };
    bs: (value: {
        readonly [$$PropertyValue]: "boxShadow";
    }) => {
        boxShadow: {
            readonly [$$PropertyValue]: "boxShadow";
        };
    };
    lh: (value: {
        readonly [$$PropertyValue]: "lineHeight";
    }) => {
        lineHeight: {
            readonly [$$PropertyValue]: "lineHeight";
        };
    };
    ox: (value: {
        readonly [$$PropertyValue]: "overflowX";
    }) => {
        overflowX: {
            readonly [$$PropertyValue]: "overflowX";
        };
    };
    oy: (value: {
        readonly [$$PropertyValue]: "overflowY";
    }) => {
        overflowY: {
            readonly [$$PropertyValue]: "overflowY";
        };
    };
    pe: (value: {
        readonly [$$PropertyValue]: "pointerEvents";
    }) => {
        pointerEvents: {
            readonly [$$PropertyValue]: "pointerEvents";
        };
    };
    us: (value: {
        readonly [$$PropertyValue]: "userSelect";
    }) => {
        WebkitUserSelect: {
            readonly [$$PropertyValue]: "userSelect";
        };
        userSelect: {
            readonly [$$PropertyValue]: "userSelect";
        };
    };
    userSelect: (value: {
        readonly [$$PropertyValue]: "userSelect";
    }) => {
        WebkitUserSelect: {
            readonly [$$PropertyValue]: "userSelect";
        };
        userSelect: {
            readonly [$$PropertyValue]: "userSelect";
        };
    };
    size: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    appearance: (value: {
        readonly [$$PropertyValue]: "appearance";
    }) => {
        WebkitAppearance: {
            readonly [$$PropertyValue]: "appearance";
        };
        appearance: {
            readonly [$$PropertyValue]: "appearance";
        };
    };
    backgroundClip: (value: {
        readonly [$$PropertyValue]: "backgroundClip";
    }) => {
        WebkitBackgroundClip: {
            readonly [$$PropertyValue]: "backgroundClip";
        };
        backgroundClip: {
            readonly [$$PropertyValue]: "backgroundClip";
        };
    };
}>>;
declare const StyledContent: import("@stitches/react/types/styled-component").StyledComponent<import("react").ForwardRefExoticComponent<Popover.PopoverContentProps & import("react").RefAttributes<HTMLDivElement>>, {
    isLight?: boolean | "true" | undefined;
    isPrimary?: boolean | "true" | undefined;
}, {
    bp1: "(min-width: 520px)";
    bp2: "(min-width: 900px)";
    bp3: "(min-width: 1200px)";
    bp4: "(min-width: 1800px)";
    motion: "(prefers-reduced-motion)";
    hover: "(any-hover: hover)";
    dark: "(prefers-color-scheme: dark)";
    light: "(prefers-color-scheme: light)";
}, import("@stitches/react/types/css-util").CSS<{
    bp1: "(min-width: 520px)";
    bp2: "(min-width: 900px)";
    bp3: "(min-width: 1200px)";
    bp4: "(min-width: 1800px)";
    motion: "(prefers-reduced-motion)";
    hover: "(any-hover: hover)";
    dark: "(prefers-color-scheme: dark)";
    light: "(prefers-color-scheme: light)";
}, {
    colors: {
        white: string;
        red: string;
        gold: string;
        yellow: string;
        blue: string;
        blueDark: string;
        green: string;
        greenDark: string;
        mediumGrey: string;
        lightGrey: string;
        lightGrey2: string;
        richBlack80: string;
        richBlack50: string;
        richBlack20: string;
        richBlack10: string;
        nuPurple120: string;
        nuPurple: string;
        nuPurple70: string;
        nuPurple60: string;
        nuPurple30: string;
        nuPurple10: string;
    };
    space: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
    };
    sizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
    };
    fontSizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
    };
    radii: {
        1: string;
        2: string;
        3: string;
        4: string;
        round: string;
        pill: string;
    };
    zIndices: {
        1: string;
        2: string;
        3: string;
        4: string;
        max: string;
    };
}, import("@stitches/react/types/config").DefaultThemeMap, {
    p: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        padding: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    pt: (value: {
        readonly [$$PropertyValue]: "paddingTop";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "paddingTop";
        };
    };
    pr: (value: {
        readonly [$$PropertyValue]: "paddingRight";
    }) => {
        paddingRight: {
            readonly [$$PropertyValue]: "paddingRight";
        };
    };
    pb: (value: {
        readonly [$$PropertyValue]: "paddingBottom";
    }) => {
        paddingBottom: {
            readonly [$$PropertyValue]: "paddingBottom";
        };
    };
    pl: (value: {
        readonly [$$PropertyValue]: "paddingLeft";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "paddingLeft";
        };
    };
    px: (value: {
        readonly [$$PropertyValue]: "paddingLeft";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "paddingLeft";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "paddingLeft";
        };
    };
    py: (value: {
        readonly [$$PropertyValue]: "paddingTop";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "paddingTop";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "paddingTop";
        };
    };
    m: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        margin: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    mt: (value: {
        readonly [$$PropertyValue]: "marginTop";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "marginTop";
        };
    };
    mr: (value: {
        readonly [$$PropertyValue]: "marginRight";
    }) => {
        marginRight: {
            readonly [$$PropertyValue]: "marginRight";
        };
    };
    mb: (value: {
        readonly [$$PropertyValue]: "marginBottom";
    }) => {
        marginBottom: {
            readonly [$$PropertyValue]: "marginBottom";
        };
    };
    ml: (value: {
        readonly [$$PropertyValue]: "marginLeft";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "marginLeft";
        };
    };
    mx: (value: {
        readonly [$$PropertyValue]: "marginLeft";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "marginLeft";
        };
        marginRight: {
            readonly [$$PropertyValue]: "marginLeft";
        };
    };
    my: (value: {
        readonly [$$PropertyValue]: "marginTop";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "marginTop";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "marginTop";
        };
    };
    ta: (value: {
        readonly [$$PropertyValue]: "textAlign";
    }) => {
        textAlign: {
            readonly [$$PropertyValue]: "textAlign";
        };
    };
    fd: (value: {
        readonly [$$PropertyValue]: "flexDirection";
    }) => {
        flexDirection: {
            readonly [$$PropertyValue]: "flexDirection";
        };
    };
    fw: (value: {
        readonly [$$PropertyValue]: "flexWrap";
    }) => {
        flexWrap: {
            readonly [$$PropertyValue]: "flexWrap";
        };
    };
    ai: (value: {
        readonly [$$PropertyValue]: "alignItems";
    }) => {
        alignItems: {
            readonly [$$PropertyValue]: "alignItems";
        };
    };
    ac: (value: {
        readonly [$$PropertyValue]: "alignContent";
    }) => {
        alignContent: {
            readonly [$$PropertyValue]: "alignContent";
        };
    };
    jc: (value: {
        readonly [$$PropertyValue]: "justifyContent";
    }) => {
        justifyContent: {
            readonly [$$PropertyValue]: "justifyContent";
        };
    };
    as: (value: {
        readonly [$$PropertyValue]: "alignSelf";
    }) => {
        alignSelf: {
            readonly [$$PropertyValue]: "alignSelf";
        };
    };
    fg: (value: {
        readonly [$$PropertyValue]: "flexGrow";
    }) => {
        flexGrow: {
            readonly [$$PropertyValue]: "flexGrow";
        };
    };
    fs: (value: {
        readonly [$$PropertyValue]: "flexShrink";
    }) => {
        flexShrink: {
            readonly [$$PropertyValue]: "flexShrink";
        };
    };
    fb: (value: {
        readonly [$$PropertyValue]: "flexBasis";
    }) => {
        flexBasis: {
            readonly [$$PropertyValue]: "flexBasis";
        };
    };
    bc: (value: {
        readonly [$$PropertyValue]: "backgroundColor";
    }) => {
        backgroundColor: {
            readonly [$$PropertyValue]: "backgroundColor";
        };
    };
    br: (value: {
        readonly [$$PropertyValue]: "borderRadius";
    }) => {
        borderRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
    };
    btrr: (value: {
        readonly [$$PropertyValue]: "borderTopRightRadius";
    }) => {
        borderTopRightRadius: {
            readonly [$$PropertyValue]: "borderTopRightRadius";
        };
    };
    bbrr: (value: {
        readonly [$$PropertyValue]: "borderBottomRightRadius";
    }) => {
        borderBottomRightRadius: {
            readonly [$$PropertyValue]: "borderBottomRightRadius";
        };
    };
    bblr: (value: {
        readonly [$$PropertyValue]: "borderBottomLeftRadius";
    }) => {
        borderBottomLeftRadius: {
            readonly [$$PropertyValue]: "borderBottomLeftRadius";
        };
    };
    btlr: (value: {
        readonly [$$PropertyValue]: "borderTopLeftRadius";
    }) => {
        borderTopLeftRadius: {
            readonly [$$PropertyValue]: "borderTopLeftRadius";
        };
    };
    bs: (value: {
        readonly [$$PropertyValue]: "boxShadow";
    }) => {
        boxShadow: {
            readonly [$$PropertyValue]: "boxShadow";
        };
    };
    lh: (value: {
        readonly [$$PropertyValue]: "lineHeight";
    }) => {
        lineHeight: {
            readonly [$$PropertyValue]: "lineHeight";
        };
    };
    ox: (value: {
        readonly [$$PropertyValue]: "overflowX";
    }) => {
        overflowX: {
            readonly [$$PropertyValue]: "overflowX";
        };
    };
    oy: (value: {
        readonly [$$PropertyValue]: "overflowY";
    }) => {
        overflowY: {
            readonly [$$PropertyValue]: "overflowY";
        };
    };
    pe: (value: {
        readonly [$$PropertyValue]: "pointerEvents";
    }) => {
        pointerEvents: {
            readonly [$$PropertyValue]: "pointerEvents";
        };
    };
    us: (value: {
        readonly [$$PropertyValue]: "userSelect";
    }) => {
        WebkitUserSelect: {
            readonly [$$PropertyValue]: "userSelect";
        };
        userSelect: {
            readonly [$$PropertyValue]: "userSelect";
        };
    };
    userSelect: (value: {
        readonly [$$PropertyValue]: "userSelect";
    }) => {
        WebkitUserSelect: {
            readonly [$$PropertyValue]: "userSelect";
        };
        userSelect: {
            readonly [$$PropertyValue]: "userSelect";
        };
    };
    size: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    appearance: (value: {
        readonly [$$PropertyValue]: "appearance";
    }) => {
        WebkitAppearance: {
            readonly [$$PropertyValue]: "appearance";
        };
        appearance: {
            readonly [$$PropertyValue]: "appearance";
        };
    };
    backgroundClip: (value: {
        readonly [$$PropertyValue]: "backgroundClip";
    }) => {
        WebkitBackgroundClip: {
            readonly [$$PropertyValue]: "backgroundClip";
        };
        backgroundClip: {
            readonly [$$PropertyValue]: "backgroundClip";
        };
    };
}>>;
declare const StyledTrigger: import("@stitches/react/types/styled-component").StyledComponent<import("react").ForwardRefExoticComponent<Popover.PopoverTriggerProps & import("react").RefAttributes<HTMLButtonElement>>, {}, {
    bp1: "(min-width: 520px)";
    bp2: "(min-width: 900px)";
    bp3: "(min-width: 1200px)";
    bp4: "(min-width: 1800px)";
    motion: "(prefers-reduced-motion)";
    hover: "(any-hover: hover)";
    dark: "(prefers-color-scheme: dark)";
    light: "(prefers-color-scheme: light)";
}, import("@stitches/react/types/css-util").CSS<{
    bp1: "(min-width: 520px)";
    bp2: "(min-width: 900px)";
    bp3: "(min-width: 1200px)";
    bp4: "(min-width: 1800px)";
    motion: "(prefers-reduced-motion)";
    hover: "(any-hover: hover)";
    dark: "(prefers-color-scheme: dark)";
    light: "(prefers-color-scheme: light)";
}, {
    colors: {
        white: string;
        red: string;
        gold: string;
        yellow: string;
        blue: string;
        blueDark: string;
        green: string;
        greenDark: string;
        mediumGrey: string;
        lightGrey: string;
        lightGrey2: string;
        richBlack80: string;
        richBlack50: string;
        richBlack20: string;
        richBlack10: string;
        nuPurple120: string;
        nuPurple: string;
        nuPurple70: string;
        nuPurple60: string;
        nuPurple30: string;
        nuPurple10: string;
    };
    space: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
    };
    sizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
    };
    fontSizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
    };
    radii: {
        1: string;
        2: string;
        3: string;
        4: string;
        round: string;
        pill: string;
    };
    zIndices: {
        1: string;
        2: string;
        3: string;
        4: string;
        max: string;
    };
}, import("@stitches/react/types/config").DefaultThemeMap, {
    p: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        padding: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    pt: (value: {
        readonly [$$PropertyValue]: "paddingTop";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "paddingTop";
        };
    };
    pr: (value: {
        readonly [$$PropertyValue]: "paddingRight";
    }) => {
        paddingRight: {
            readonly [$$PropertyValue]: "paddingRight";
        };
    };
    pb: (value: {
        readonly [$$PropertyValue]: "paddingBottom";
    }) => {
        paddingBottom: {
            readonly [$$PropertyValue]: "paddingBottom";
        };
    };
    pl: (value: {
        readonly [$$PropertyValue]: "paddingLeft";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "paddingLeft";
        };
    };
    px: (value: {
        readonly [$$PropertyValue]: "paddingLeft";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "paddingLeft";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "paddingLeft";
        };
    };
    py: (value: {
        readonly [$$PropertyValue]: "paddingTop";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "paddingTop";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "paddingTop";
        };
    };
    m: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        margin: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    mt: (value: {
        readonly [$$PropertyValue]: "marginTop";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "marginTop";
        };
    };
    mr: (value: {
        readonly [$$PropertyValue]: "marginRight";
    }) => {
        marginRight: {
            readonly [$$PropertyValue]: "marginRight";
        };
    };
    mb: (value: {
        readonly [$$PropertyValue]: "marginBottom";
    }) => {
        marginBottom: {
            readonly [$$PropertyValue]: "marginBottom";
        };
    };
    ml: (value: {
        readonly [$$PropertyValue]: "marginLeft";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "marginLeft";
        };
    };
    mx: (value: {
        readonly [$$PropertyValue]: "marginLeft";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "marginLeft";
        };
        marginRight: {
            readonly [$$PropertyValue]: "marginLeft";
        };
    };
    my: (value: {
        readonly [$$PropertyValue]: "marginTop";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "marginTop";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "marginTop";
        };
    };
    ta: (value: {
        readonly [$$PropertyValue]: "textAlign";
    }) => {
        textAlign: {
            readonly [$$PropertyValue]: "textAlign";
        };
    };
    fd: (value: {
        readonly [$$PropertyValue]: "flexDirection";
    }) => {
        flexDirection: {
            readonly [$$PropertyValue]: "flexDirection";
        };
    };
    fw: (value: {
        readonly [$$PropertyValue]: "flexWrap";
    }) => {
        flexWrap: {
            readonly [$$PropertyValue]: "flexWrap";
        };
    };
    ai: (value: {
        readonly [$$PropertyValue]: "alignItems";
    }) => {
        alignItems: {
            readonly [$$PropertyValue]: "alignItems";
        };
    };
    ac: (value: {
        readonly [$$PropertyValue]: "alignContent";
    }) => {
        alignContent: {
            readonly [$$PropertyValue]: "alignContent";
        };
    };
    jc: (value: {
        readonly [$$PropertyValue]: "justifyContent";
    }) => {
        justifyContent: {
            readonly [$$PropertyValue]: "justifyContent";
        };
    };
    as: (value: {
        readonly [$$PropertyValue]: "alignSelf";
    }) => {
        alignSelf: {
            readonly [$$PropertyValue]: "alignSelf";
        };
    };
    fg: (value: {
        readonly [$$PropertyValue]: "flexGrow";
    }) => {
        flexGrow: {
            readonly [$$PropertyValue]: "flexGrow";
        };
    };
    fs: (value: {
        readonly [$$PropertyValue]: "flexShrink";
    }) => {
        flexShrink: {
            readonly [$$PropertyValue]: "flexShrink";
        };
    };
    fb: (value: {
        readonly [$$PropertyValue]: "flexBasis";
    }) => {
        flexBasis: {
            readonly [$$PropertyValue]: "flexBasis";
        };
    };
    bc: (value: {
        readonly [$$PropertyValue]: "backgroundColor";
    }) => {
        backgroundColor: {
            readonly [$$PropertyValue]: "backgroundColor";
        };
    };
    br: (value: {
        readonly [$$PropertyValue]: "borderRadius";
    }) => {
        borderRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
    };
    btrr: (value: {
        readonly [$$PropertyValue]: "borderTopRightRadius";
    }) => {
        borderTopRightRadius: {
            readonly [$$PropertyValue]: "borderTopRightRadius";
        };
    };
    bbrr: (value: {
        readonly [$$PropertyValue]: "borderBottomRightRadius";
    }) => {
        borderBottomRightRadius: {
            readonly [$$PropertyValue]: "borderBottomRightRadius";
        };
    };
    bblr: (value: {
        readonly [$$PropertyValue]: "borderBottomLeftRadius";
    }) => {
        borderBottomLeftRadius: {
            readonly [$$PropertyValue]: "borderBottomLeftRadius";
        };
    };
    btlr: (value: {
        readonly [$$PropertyValue]: "borderTopLeftRadius";
    }) => {
        borderTopLeftRadius: {
            readonly [$$PropertyValue]: "borderTopLeftRadius";
        };
    };
    bs: (value: {
        readonly [$$PropertyValue]: "boxShadow";
    }) => {
        boxShadow: {
            readonly [$$PropertyValue]: "boxShadow";
        };
    };
    lh: (value: {
        readonly [$$PropertyValue]: "lineHeight";
    }) => {
        lineHeight: {
            readonly [$$PropertyValue]: "lineHeight";
        };
    };
    ox: (value: {
        readonly [$$PropertyValue]: "overflowX";
    }) => {
        overflowX: {
            readonly [$$PropertyValue]: "overflowX";
        };
    };
    oy: (value: {
        readonly [$$PropertyValue]: "overflowY";
    }) => {
        overflowY: {
            readonly [$$PropertyValue]: "overflowY";
        };
    };
    pe: (value: {
        readonly [$$PropertyValue]: "pointerEvents";
    }) => {
        pointerEvents: {
            readonly [$$PropertyValue]: "pointerEvents";
        };
    };
    us: (value: {
        readonly [$$PropertyValue]: "userSelect";
    }) => {
        WebkitUserSelect: {
            readonly [$$PropertyValue]: "userSelect";
        };
        userSelect: {
            readonly [$$PropertyValue]: "userSelect";
        };
    };
    userSelect: (value: {
        readonly [$$PropertyValue]: "userSelect";
    }) => {
        WebkitUserSelect: {
            readonly [$$PropertyValue]: "userSelect";
        };
        userSelect: {
            readonly [$$PropertyValue]: "userSelect";
        };
    };
    size: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    appearance: (value: {
        readonly [$$PropertyValue]: "appearance";
    }) => {
        WebkitAppearance: {
            readonly [$$PropertyValue]: "appearance";
        };
        appearance: {
            readonly [$$PropertyValue]: "appearance";
        };
    };
    backgroundClip: (value: {
        readonly [$$PropertyValue]: "backgroundClip";
    }) => {
        WebkitBackgroundClip: {
            readonly [$$PropertyValue]: "backgroundClip";
        };
        backgroundClip: {
            readonly [$$PropertyValue]: "backgroundClip";
        };
    };
}>>;
declare const StyledPopover: import("@stitches/react/types/styled-component").StyledComponent<import("react").FC<Popover.PopoverProps>, {}, {
    bp1: "(min-width: 520px)";
    bp2: "(min-width: 900px)";
    bp3: "(min-width: 1200px)";
    bp4: "(min-width: 1800px)";
    motion: "(prefers-reduced-motion)";
    hover: "(any-hover: hover)";
    dark: "(prefers-color-scheme: dark)";
    light: "(prefers-color-scheme: light)";
}, import("@stitches/react/types/css-util").CSS<{
    bp1: "(min-width: 520px)";
    bp2: "(min-width: 900px)";
    bp3: "(min-width: 1200px)";
    bp4: "(min-width: 1800px)";
    motion: "(prefers-reduced-motion)";
    hover: "(any-hover: hover)";
    dark: "(prefers-color-scheme: dark)";
    light: "(prefers-color-scheme: light)";
}, {
    colors: {
        white: string;
        red: string;
        gold: string;
        yellow: string;
        blue: string;
        blueDark: string;
        green: string;
        greenDark: string;
        mediumGrey: string;
        lightGrey: string;
        lightGrey2: string;
        richBlack80: string;
        richBlack50: string;
        richBlack20: string;
        richBlack10: string;
        nuPurple120: string;
        nuPurple: string;
        nuPurple70: string;
        nuPurple60: string;
        nuPurple30: string;
        nuPurple10: string;
    };
    space: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
    };
    sizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
    };
    fontSizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
    };
    radii: {
        1: string;
        2: string;
        3: string;
        4: string;
        round: string;
        pill: string;
    };
    zIndices: {
        1: string;
        2: string;
        3: string;
        4: string;
        max: string;
    };
}, import("@stitches/react/types/config").DefaultThemeMap, {
    p: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        padding: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    pt: (value: {
        readonly [$$PropertyValue]: "paddingTop";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "paddingTop";
        };
    };
    pr: (value: {
        readonly [$$PropertyValue]: "paddingRight";
    }) => {
        paddingRight: {
            readonly [$$PropertyValue]: "paddingRight";
        };
    };
    pb: (value: {
        readonly [$$PropertyValue]: "paddingBottom";
    }) => {
        paddingBottom: {
            readonly [$$PropertyValue]: "paddingBottom";
        };
    };
    pl: (value: {
        readonly [$$PropertyValue]: "paddingLeft";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "paddingLeft";
        };
    };
    px: (value: {
        readonly [$$PropertyValue]: "paddingLeft";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "paddingLeft";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "paddingLeft";
        };
    };
    py: (value: {
        readonly [$$PropertyValue]: "paddingTop";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "paddingTop";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "paddingTop";
        };
    };
    m: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        margin: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    mt: (value: {
        readonly [$$PropertyValue]: "marginTop";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "marginTop";
        };
    };
    mr: (value: {
        readonly [$$PropertyValue]: "marginRight";
    }) => {
        marginRight: {
            readonly [$$PropertyValue]: "marginRight";
        };
    };
    mb: (value: {
        readonly [$$PropertyValue]: "marginBottom";
    }) => {
        marginBottom: {
            readonly [$$PropertyValue]: "marginBottom";
        };
    };
    ml: (value: {
        readonly [$$PropertyValue]: "marginLeft";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "marginLeft";
        };
    };
    mx: (value: {
        readonly [$$PropertyValue]: "marginLeft";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "marginLeft";
        };
        marginRight: {
            readonly [$$PropertyValue]: "marginLeft";
        };
    };
    my: (value: {
        readonly [$$PropertyValue]: "marginTop";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "marginTop";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "marginTop";
        };
    };
    ta: (value: {
        readonly [$$PropertyValue]: "textAlign";
    }) => {
        textAlign: {
            readonly [$$PropertyValue]: "textAlign";
        };
    };
    fd: (value: {
        readonly [$$PropertyValue]: "flexDirection";
    }) => {
        flexDirection: {
            readonly [$$PropertyValue]: "flexDirection";
        };
    };
    fw: (value: {
        readonly [$$PropertyValue]: "flexWrap";
    }) => {
        flexWrap: {
            readonly [$$PropertyValue]: "flexWrap";
        };
    };
    ai: (value: {
        readonly [$$PropertyValue]: "alignItems";
    }) => {
        alignItems: {
            readonly [$$PropertyValue]: "alignItems";
        };
    };
    ac: (value: {
        readonly [$$PropertyValue]: "alignContent";
    }) => {
        alignContent: {
            readonly [$$PropertyValue]: "alignContent";
        };
    };
    jc: (value: {
        readonly [$$PropertyValue]: "justifyContent";
    }) => {
        justifyContent: {
            readonly [$$PropertyValue]: "justifyContent";
        };
    };
    as: (value: {
        readonly [$$PropertyValue]: "alignSelf";
    }) => {
        alignSelf: {
            readonly [$$PropertyValue]: "alignSelf";
        };
    };
    fg: (value: {
        readonly [$$PropertyValue]: "flexGrow";
    }) => {
        flexGrow: {
            readonly [$$PropertyValue]: "flexGrow";
        };
    };
    fs: (value: {
        readonly [$$PropertyValue]: "flexShrink";
    }) => {
        flexShrink: {
            readonly [$$PropertyValue]: "flexShrink";
        };
    };
    fb: (value: {
        readonly [$$PropertyValue]: "flexBasis";
    }) => {
        flexBasis: {
            readonly [$$PropertyValue]: "flexBasis";
        };
    };
    bc: (value: {
        readonly [$$PropertyValue]: "backgroundColor";
    }) => {
        backgroundColor: {
            readonly [$$PropertyValue]: "backgroundColor";
        };
    };
    br: (value: {
        readonly [$$PropertyValue]: "borderRadius";
    }) => {
        borderRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
    };
    btrr: (value: {
        readonly [$$PropertyValue]: "borderTopRightRadius";
    }) => {
        borderTopRightRadius: {
            readonly [$$PropertyValue]: "borderTopRightRadius";
        };
    };
    bbrr: (value: {
        readonly [$$PropertyValue]: "borderBottomRightRadius";
    }) => {
        borderBottomRightRadius: {
            readonly [$$PropertyValue]: "borderBottomRightRadius";
        };
    };
    bblr: (value: {
        readonly [$$PropertyValue]: "borderBottomLeftRadius";
    }) => {
        borderBottomLeftRadius: {
            readonly [$$PropertyValue]: "borderBottomLeftRadius";
        };
    };
    btlr: (value: {
        readonly [$$PropertyValue]: "borderTopLeftRadius";
    }) => {
        borderTopLeftRadius: {
            readonly [$$PropertyValue]: "borderTopLeftRadius";
        };
    };
    bs: (value: {
        readonly [$$PropertyValue]: "boxShadow";
    }) => {
        boxShadow: {
            readonly [$$PropertyValue]: "boxShadow";
        };
    };
    lh: (value: {
        readonly [$$PropertyValue]: "lineHeight";
    }) => {
        lineHeight: {
            readonly [$$PropertyValue]: "lineHeight";
        };
    };
    ox: (value: {
        readonly [$$PropertyValue]: "overflowX";
    }) => {
        overflowX: {
            readonly [$$PropertyValue]: "overflowX";
        };
    };
    oy: (value: {
        readonly [$$PropertyValue]: "overflowY";
    }) => {
        overflowY: {
            readonly [$$PropertyValue]: "overflowY";
        };
    };
    pe: (value: {
        readonly [$$PropertyValue]: "pointerEvents";
    }) => {
        pointerEvents: {
            readonly [$$PropertyValue]: "pointerEvents";
        };
    };
    us: (value: {
        readonly [$$PropertyValue]: "userSelect";
    }) => {
        WebkitUserSelect: {
            readonly [$$PropertyValue]: "userSelect";
        };
        userSelect: {
            readonly [$$PropertyValue]: "userSelect";
        };
    };
    userSelect: (value: {
        readonly [$$PropertyValue]: "userSelect";
    }) => {
        WebkitUserSelect: {
            readonly [$$PropertyValue]: "userSelect";
        };
        userSelect: {
            readonly [$$PropertyValue]: "userSelect";
        };
    };
    size: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    appearance: (value: {
        readonly [$$PropertyValue]: "appearance";
    }) => {
        WebkitAppearance: {
            readonly [$$PropertyValue]: "appearance";
        };
        appearance: {
            readonly [$$PropertyValue]: "appearance";
        };
    };
    backgroundClip: (value: {
        readonly [$$PropertyValue]: "backgroundClip";
    }) => {
        WebkitBackgroundClip: {
            readonly [$$PropertyValue]: "backgroundClip";
        };
        backgroundClip: {
            readonly [$$PropertyValue]: "backgroundClip";
        };
    };
}>>;
export { StyledArrow, StyledClose, StyledContent, StyledPopover, StyledTrigger, };
