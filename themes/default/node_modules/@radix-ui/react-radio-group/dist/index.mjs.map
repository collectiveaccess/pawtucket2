{"mappings":"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","sources":["packages/react/radio-group/src/index.ts","packages/react/radio-group/src/RadioGroup.tsx","packages/react/radio-group/src/Radio.tsx"],"sourcesContent":["export {\n  createRadioGroupScope,\n  //\n  RadioGroup,\n  RadioGroupItem,\n  RadioGroupIndicator,\n  //\n  Root,\n  Item,\n  Indicator,\n} from './RadioGroup';\nexport type { RadioGroupProps, RadioGroupItemProps, RadioGroupIndicatorProps } from './RadioGroup';\n","import * as React from 'react';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport * as RovingFocusGroup from '@radix-ui/react-roving-focus';\nimport { createRovingFocusGroupScope } from '@radix-ui/react-roving-focus';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { useDirection } from '@radix-ui/react-direction';\nimport { Radio, RadioIndicator, createRadioScope } from './Radio';\n\nimport type * as Radix from '@radix-ui/react-primitive';\nimport type { Scope } from '@radix-ui/react-context';\n\nconst ARROW_KEYS = ['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'];\n\n/* -------------------------------------------------------------------------------------------------\n * RadioGroup\n * -----------------------------------------------------------------------------------------------*/\nconst RADIO_GROUP_NAME = 'RadioGroup';\n\ntype ScopedProps<P> = P & { __scopeRadioGroup?: Scope };\nconst [createRadioGroupContext, createRadioGroupScope] = createContextScope(RADIO_GROUP_NAME, [\n  createRovingFocusGroupScope,\n  createRadioScope,\n]);\nconst useRovingFocusGroupScope = createRovingFocusGroupScope();\nconst useRadioScope = createRadioScope();\n\ntype RadioGroupContextValue = {\n  name?: string;\n  required: boolean;\n  disabled: boolean;\n  value?: string;\n  onValueChange(value: string): void;\n};\n\nconst [RadioGroupProvider, useRadioGroupContext] =\n  createRadioGroupContext<RadioGroupContextValue>(RADIO_GROUP_NAME);\n\ntype RadioGroupElement = React.ElementRef<typeof Primitive.div>;\ntype RovingFocusGroupProps = Radix.ComponentPropsWithoutRef<typeof RovingFocusGroup.Root>;\ntype PrimitiveDivProps = Radix.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface RadioGroupProps extends PrimitiveDivProps {\n  name?: RadioGroupContextValue['name'];\n  required?: Radix.ComponentPropsWithoutRef<typeof Radio>['required'];\n  disabled?: Radix.ComponentPropsWithoutRef<typeof Radio>['disabled'];\n  dir?: RovingFocusGroupProps['dir'];\n  orientation?: RovingFocusGroupProps['orientation'];\n  loop?: RovingFocusGroupProps['loop'];\n  defaultValue?: string;\n  value?: RadioGroupContextValue['value'];\n  onValueChange?: RadioGroupContextValue['onValueChange'];\n}\n\nconst RadioGroup = React.forwardRef<RadioGroupElement, RadioGroupProps>(\n  (props: ScopedProps<RadioGroupProps>, forwardedRef) => {\n    const {\n      __scopeRadioGroup,\n      name,\n      defaultValue,\n      value: valueProp,\n      required = false,\n      disabled = false,\n      orientation,\n      dir,\n      loop = true,\n      onValueChange,\n      ...groupProps\n    } = props;\n    const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeRadioGroup);\n    const direction = useDirection(dir);\n    const [value, setValue] = useControllableState({\n      prop: valueProp,\n      defaultProp: defaultValue,\n      onChange: onValueChange,\n    });\n\n    return (\n      <RadioGroupProvider\n        scope={__scopeRadioGroup}\n        name={name}\n        required={required}\n        disabled={disabled}\n        value={value}\n        onValueChange={setValue}\n      >\n        <RovingFocusGroup.Root\n          asChild\n          {...rovingFocusGroupScope}\n          orientation={orientation}\n          dir={direction}\n          loop={loop}\n        >\n          <Primitive.div\n            role=\"radiogroup\"\n            aria-required={required}\n            aria-orientation={orientation}\n            data-disabled={disabled ? '' : undefined}\n            dir={direction}\n            {...groupProps}\n            ref={forwardedRef}\n          />\n        </RovingFocusGroup.Root>\n      </RadioGroupProvider>\n    );\n  }\n);\n\nRadioGroup.displayName = RADIO_GROUP_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * RadioGroupItem\n * -----------------------------------------------------------------------------------------------*/\n\nconst ITEM_NAME = 'RadioGroupItem';\n\ntype RadioGroupItemElement = React.ElementRef<typeof Radio>;\ntype RadioProps = Radix.ComponentPropsWithoutRef<typeof Radio>;\ninterface RadioGroupItemProps extends Omit<RadioProps, 'onCheck' | 'name'> {\n  value: string;\n}\n\nconst RadioGroupItem = React.forwardRef<RadioGroupItemElement, RadioGroupItemProps>(\n  (props: ScopedProps<RadioGroupItemProps>, forwardedRef) => {\n    const { __scopeRadioGroup, disabled, ...itemProps } = props;\n    const context = useRadioGroupContext(ITEM_NAME, __scopeRadioGroup);\n    const isDisabled = context.disabled || disabled;\n    const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeRadioGroup);\n    const radioScope = useRadioScope(__scopeRadioGroup);\n    const ref = React.useRef<React.ElementRef<typeof Radio>>(null);\n    const composedRefs = useComposedRefs(forwardedRef, ref);\n    const checked = context.value === itemProps.value;\n    const isArrowKeyPressedRef = React.useRef(false);\n\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (ARROW_KEYS.includes(event.key)) {\n          isArrowKeyPressedRef.current = true;\n        }\n      };\n      const handleKeyUp = () => (isArrowKeyPressedRef.current = false);\n      document.addEventListener('keydown', handleKeyDown);\n      document.addEventListener('keyup', handleKeyUp);\n      return () => {\n        document.removeEventListener('keydown', handleKeyDown);\n        document.removeEventListener('keyup', handleKeyUp);\n      };\n    }, []);\n\n    return (\n      <RovingFocusGroup.Item\n        asChild\n        {...rovingFocusGroupScope}\n        focusable={!isDisabled}\n        active={checked}\n      >\n        <Radio\n          disabled={isDisabled}\n          required={context.required}\n          checked={checked}\n          {...radioScope}\n          {...itemProps}\n          name={context.name}\n          ref={composedRefs}\n          onCheck={() => context.onValueChange(itemProps.value)}\n          onKeyDown={composeEventHandlers((event) => {\n            // According to WAI ARIA, radio groups don't activate items on enter keypress\n            if (event.key === 'Enter') event.preventDefault();\n          })}\n          onFocus={composeEventHandlers(itemProps.onFocus, () => {\n            /**\n             * Our `RovingFocusGroup` will focus the radio when navigating with arrow keys\n             * and we need to \"check\" it in that case. We click it to \"check\" it (instead\n             * of updating `context.value`) so that the radio change event fires.\n             */\n            if (isArrowKeyPressedRef.current) ref.current?.click();\n          })}\n        />\n      </RovingFocusGroup.Item>\n    );\n  }\n);\n\nRadioGroupItem.displayName = ITEM_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * RadioGroupIndicator\n * -----------------------------------------------------------------------------------------------*/\n\nconst INDICATOR_NAME = 'RadioGroupIndicator';\n\ntype RadioGroupIndicatorElement = React.ElementRef<typeof RadioIndicator>;\ntype RadioIndicatorProps = Radix.ComponentPropsWithoutRef<typeof RadioIndicator>;\ninterface RadioGroupIndicatorProps extends RadioIndicatorProps {}\n\nconst RadioGroupIndicator = React.forwardRef<RadioGroupIndicatorElement, RadioGroupIndicatorProps>(\n  (props: ScopedProps<RadioGroupIndicatorProps>, forwardedRef) => {\n    const { __scopeRadioGroup, ...indicatorProps } = props;\n    const radioScope = useRadioScope(__scopeRadioGroup);\n    return <RadioIndicator {...radioScope} {...indicatorProps} ref={forwardedRef} />;\n  }\n);\n\nRadioGroupIndicator.displayName = INDICATOR_NAME;\n\n/* ---------------------------------------------------------------------------------------------- */\n\nconst Root = RadioGroup;\nconst Item = RadioGroupItem;\nconst Indicator = RadioGroupIndicator;\n\nexport {\n  createRadioGroupScope,\n  //\n  RadioGroup,\n  RadioGroupItem,\n  RadioGroupIndicator,\n  //\n  Root,\n  Item,\n  Indicator,\n};\nexport type { RadioGroupProps, RadioGroupItemProps, RadioGroupIndicatorProps };\n","import * as React from 'react';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { useSize } from '@radix-ui/react-use-size';\nimport { usePrevious } from '@radix-ui/react-use-previous';\nimport { Presence } from '@radix-ui/react-presence';\nimport { Primitive } from '@radix-ui/react-primitive';\n\nimport type * as Radix from '@radix-ui/react-primitive';\nimport type { Scope } from '@radix-ui/react-context';\n\n/* -------------------------------------------------------------------------------------------------\n * Radio\n * -----------------------------------------------------------------------------------------------*/\n\nconst RADIO_NAME = 'Radio';\n\ntype ScopedProps<P> = P & { __scopeRadio?: Scope };\nconst [createRadioContext, createRadioScope] = createContextScope(RADIO_NAME);\n\ntype RadioContextValue = { checked: boolean; disabled?: boolean };\nconst [RadioProvider, useRadioContext] = createRadioContext<RadioContextValue>(RADIO_NAME);\n\ntype RadioElement = React.ElementRef<typeof Primitive.button>;\ntype PrimitiveButtonProps = Radix.ComponentPropsWithoutRef<typeof Primitive.button>;\ninterface RadioProps extends PrimitiveButtonProps {\n  checked?: boolean;\n  required?: boolean;\n  onCheck?(): void;\n}\n\nconst Radio = React.forwardRef<RadioElement, RadioProps>(\n  (props: ScopedProps<RadioProps>, forwardedRef) => {\n    const {\n      __scopeRadio,\n      name,\n      checked = false,\n      required,\n      disabled,\n      value = 'on',\n      onCheck,\n      ...radioProps\n    } = props;\n    const [button, setButton] = React.useState<HTMLButtonElement | null>(null);\n    const composedRefs = useComposedRefs(forwardedRef, (node) => setButton(node));\n    const hasConsumerStoppedPropagationRef = React.useRef(false);\n    // We set this to true by default so that events bubble to forms without JS (SSR)\n    const isFormControl = button ? Boolean(button.closest('form')) : true;\n\n    return (\n      <RadioProvider scope={__scopeRadio} checked={checked} disabled={disabled}>\n        <Primitive.button\n          type=\"button\"\n          role=\"radio\"\n          aria-checked={checked}\n          data-state={getState(checked)}\n          data-disabled={disabled ? '' : undefined}\n          disabled={disabled}\n          value={value}\n          {...radioProps}\n          ref={composedRefs}\n          onClick={composeEventHandlers(props.onClick, (event) => {\n            // radios cannot be unchecked so we only communicate a checked state\n            if (!checked) onCheck?.();\n            if (isFormControl) {\n              hasConsumerStoppedPropagationRef.current = event.isPropagationStopped();\n              // if radio is in a form, stop propagation from the button so that we only propagate\n              // one click event (from the input). We propagate changes from an input so that native\n              // form validation works and form events reflect radio updates.\n              if (!hasConsumerStoppedPropagationRef.current) event.stopPropagation();\n            }\n          })}\n        />\n        {isFormControl && (\n          <BubbleInput\n            control={button}\n            bubbles={!hasConsumerStoppedPropagationRef.current}\n            name={name}\n            value={value}\n            checked={checked}\n            required={required}\n            disabled={disabled}\n            // We transform because the input is absolutely positioned but we have\n            // rendered it **after** the button. This pulls it back to sit on top\n            // of the button.\n            style={{ transform: 'translateX(-100%)' }}\n          />\n        )}\n      </RadioProvider>\n    );\n  }\n);\n\nRadio.displayName = RADIO_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * RadioIndicator\n * -----------------------------------------------------------------------------------------------*/\n\nconst INDICATOR_NAME = 'RadioIndicator';\n\ntype RadioIndicatorElement = React.ElementRef<typeof Primitive.span>;\ntype PrimitiveSpanProps = Radix.ComponentPropsWithoutRef<typeof Primitive.span>;\nexport interface RadioIndicatorProps extends PrimitiveSpanProps {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst RadioIndicator = React.forwardRef<RadioIndicatorElement, RadioIndicatorProps>(\n  (props: ScopedProps<RadioIndicatorProps>, forwardedRef) => {\n    const { __scopeRadio, forceMount, ...indicatorProps } = props;\n    const context = useRadioContext(INDICATOR_NAME, __scopeRadio);\n    return (\n      <Presence present={forceMount || context.checked}>\n        <Primitive.span\n          data-state={getState(context.checked)}\n          data-disabled={context.disabled ? '' : undefined}\n          {...indicatorProps}\n          ref={forwardedRef}\n        />\n      </Presence>\n    );\n  }\n);\n\nRadioIndicator.displayName = INDICATOR_NAME;\n\n/* ---------------------------------------------------------------------------------------------- */\n\ntype InputProps = Radix.ComponentPropsWithoutRef<'input'>;\ninterface BubbleInputProps extends Omit<InputProps, 'checked'> {\n  checked: boolean;\n  control: HTMLElement | null;\n  bubbles: boolean;\n}\n\nconst BubbleInput = (props: BubbleInputProps) => {\n  const { control, checked, bubbles = true, ...inputProps } = props;\n  const ref = React.useRef<HTMLInputElement>(null);\n  const prevChecked = usePrevious(checked);\n  const controlSize = useSize(control);\n\n  // Bubble checked change to parents (e.g form change event)\n  React.useEffect(() => {\n    const input = ref.current!;\n    const inputProto = window.HTMLInputElement.prototype;\n    const descriptor = Object.getOwnPropertyDescriptor(inputProto, 'checked') as PropertyDescriptor;\n    const setChecked = descriptor.set;\n    if (prevChecked !== checked && setChecked) {\n      const event = new Event('click', { bubbles });\n      setChecked.call(input, checked);\n      input.dispatchEvent(event);\n    }\n  }, [prevChecked, checked, bubbles]);\n\n  return (\n    <input\n      type=\"radio\"\n      aria-hidden\n      defaultChecked={checked}\n      {...inputProps}\n      tabIndex={-1}\n      ref={ref}\n      style={{\n        ...props.style,\n        ...controlSize,\n        position: 'absolute',\n        pointerEvents: 'none',\n        opacity: 0,\n        margin: 0,\n      }}\n    />\n  );\n};\n\nfunction getState(checked: boolean) {\n  return checked ? 'checked' : 'unchecked';\n}\n\nexport {\n  createRadioScope,\n  //\n  Radio,\n  RadioIndicator,\n};\nexport type { RadioProps };\n"],"names":["createRadioGroupScope","RadioGroup","RadioGroupItem","RadioGroupIndicator","Root","Item","Indicator","React","composeEventHandlers","useComposedRefs","createContextScope","Primitive","RovingFocusGroup","createRovingFocusGroupScope","useControllableState","useDirection","Radio","RadioIndicator","createRadioScope","ARROW_KEYS","RADIO_GROUP_NAME","createRadioGroupContext","useRovingFocusGroupScope","useRadioScope","RadioGroupProvider","useRadioGroupContext","forwardRef","props","forwardedRef","__scopeRadioGroup","name","defaultValue","value","valueProp","required","disabled","orientation","dir","loop","onValueChange","groupProps","rovingFocusGroupScope","direction","setValue","prop","defaultProp","onChange","undefined","ITEM_NAME","itemProps","context","isDisabled","radioScope","ref","useRef","composedRefs","checked","isArrowKeyPressedRef","useEffect","handleKeyDown","event","includes","key","current","handleKeyUp","document","addEventListener","removeEventListener","preventDefault","onFocus","click","INDICATOR_NAME","indicatorProps","useSize","usePrevious","Presence","RADIO_NAME","createRadioContext","RadioProvider","useRadioContext","__scopeRadio","onCheck","radioProps","button","setButton","useState","node","hasConsumerStoppedPropagationRef","isFormControl","Boolean","closest","getState","onClick","isPropagationStopped","stopPropagation","transform","forceMount","BubbleInput","control","bubbles","inputProps","prevChecked","controlSize","input","inputProto","window","HTMLInputElement","prototype","descriptor","Object","getOwnPropertyDescriptor","setChecked","set","Event","call","dispatchEvent","style","position","pointerEvents","opacity","margin"],"version":3,"file":"index.mjs.map"}