/**
 * Loads a PDF document. Passes it to all children.
 */
import React from 'react';
import type { EventProps } from 'make-event-props';
import type { ClassName, DocumentCallback, ExternalLinkRel, ExternalLinkTarget, File, ImageResourcesPath, NodeOrRenderer, OnDocumentLoadError, OnDocumentLoadProgress, OnDocumentLoadSuccess, OnError, OnItemClickArgs, OnPasswordCallback, Options, PasswordResponse, RenderMode } from './shared/types.js';
type OnItemClick = (args: OnItemClickArgs) => void;
type OnPassword = (callback: OnPasswordCallback, reason: PasswordResponse) => void;
type OnSourceError = OnError;
type OnSourceSuccess = () => void;
export type DocumentProps = {
    children?: React.ReactNode;
    className?: ClassName;
    error?: NodeOrRenderer;
    externalLinkRel?: ExternalLinkRel;
    externalLinkTarget?: ExternalLinkTarget;
    file?: File;
    imageResourcesPath?: ImageResourcesPath;
    inputRef?: React.Ref<HTMLDivElement>;
    loading?: NodeOrRenderer;
    noData?: NodeOrRenderer;
    onItemClick?: OnItemClick;
    onLoadError?: OnDocumentLoadError;
    onLoadProgress?: OnDocumentLoadProgress;
    onLoadSuccess?: OnDocumentLoadSuccess;
    onPassword?: OnPassword;
    onSourceError?: OnSourceError;
    onSourceSuccess?: OnSourceSuccess;
    options?: Options;
    renderMode?: RenderMode;
    rotate?: number | null;
} & EventProps<DocumentCallback | false | undefined>;
declare const Document: React.ForwardRefExoticComponent<{
    children?: React.ReactNode;
    className?: ClassName;
    error?: NodeOrRenderer;
    externalLinkRel?: string | undefined;
    externalLinkTarget?: ExternalLinkTarget | undefined;
    file?: File | undefined;
    imageResourcesPath?: string | undefined;
    inputRef?: React.Ref<HTMLDivElement> | undefined;
    loading?: NodeOrRenderer;
    noData?: NodeOrRenderer;
    onItemClick?: OnItemClick | undefined;
    onLoadError?: OnError | undefined;
    onLoadProgress?: OnDocumentLoadProgress | undefined;
    onLoadSuccess?: OnDocumentLoadSuccess | undefined;
    onPassword?: OnPassword | undefined;
    onSourceError?: OnError | undefined;
    onSourceSuccess?: OnSourceSuccess | undefined;
    options?: {
        length?: number | null | undefined;
        worker?: import("pdfjs-dist").PDFWorker | null | undefined;
        ownerDocument?: HTMLDocument | null | undefined;
        password?: string | null | undefined;
        verbosity?: number | null | undefined;
        isOffscreenCanvasSupported?: boolean | null | undefined;
        httpHeaders?: Object | null | undefined;
        withCredentials?: boolean | null | undefined;
        rangeChunkSize?: number | null | undefined;
        docBaseUrl?: string | null | undefined;
        cMapUrl?: string | null | undefined;
        cMapPacked?: boolean | null | undefined;
        CMapReaderFactory?: Object | null | undefined;
        useSystemFonts?: boolean | null | undefined;
        standardFontDataUrl?: string | null | undefined;
        StandardFontDataFactory?: Object | null | undefined;
        useWorkerFetch?: boolean | null | undefined;
        stopAtErrors?: boolean | null | undefined;
        maxImageSize?: number | null | undefined;
        isEvalSupported?: boolean | null | undefined;
        canvasMaxAreaInBytes?: number | null | undefined;
        disableFontFace?: boolean | null | undefined;
        fontExtraProperties?: boolean | null | undefined;
        enableXfa?: boolean | null | undefined;
        disableRange?: boolean | null | undefined;
        disableStream?: boolean | null | undefined;
        disableAutoFetch?: boolean | null | undefined;
        pdfBug?: boolean | null | undefined;
        canvasFactory?: Object | null | undefined;
        filterFactory?: Object | null | undefined;
    } | undefined;
    renderMode?: RenderMode | undefined;
    rotate?: number | null | undefined;
} & EventProps<false | import("pdfjs-dist/types/src/display/api.js").PDFDocumentProxy | undefined> & React.RefAttributes<unknown>>;
export default Document;
