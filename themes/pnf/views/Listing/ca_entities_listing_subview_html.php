<?php
/** ---------------------------------------------------------------------
 * themes/default/Listings/listing_html : 
 * ----------------------------------------------------------------------
 * CollectiveAccess
 * Open-source collections management software
 * ----------------------------------------------------------------------
 *
 * Software by Whirl-i-Gig (http://www.whirl-i-gig.com)
 * Copyright 2014 Whirl-i-Gig
 *
 * For more information visit http://www.CollectiveAccess.org
 *
 * This program is free software; you may redistribute it and/or modify it under
 * the terms of the provided license as published by Whirl-i-Gig
 *
 * CollectiveAccess is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTIES whatsoever, including any implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
 *
 * This source code is free and modifiable under the terms of 
 * GNU General Public License. (http://www.gnu.org/copyleft/gpl.html). See
 * the "license.txt" file for details, or visit the CollectiveAccess web site at
 * http://www.CollectiveAccess.org
 *
 * @package CollectiveAccess
 * @subpackage Core
 * @license http://www.gnu.org/copyleft/gpl.html GNU Public License version 3
 *
 * ----------------------------------------------------------------------
 */
 
 	$va_lists = $this->getVar('lists');
 	$va_type_info = $this->getVar('typeInfo');
 	$va_listing_info = $this->getVar('listingInfo');
 	$vs_action = strToLower($this->request->getAction());
?>
	<div class="listing-content single-lists">
<?php 
	$va_links_array = array();
	$va_letter_array = array();
	foreach($va_lists as $vn_type_id => $qr_list) {
		if(!$qr_list) { continue; }
		
		print "<h2>{$va_listing_info['displayName']}</h2>\n";
		
		switch($vs_action){
			case "playwrights":
				print "<p>This growing authority file of <b>playwrights, translators, and adaptors</b> is being automatically generated by Collective/Access as we add each new entity into our database. Because we hope to be of assistance to some U.S. and Canadian libraries who may wish to copy our records, we have adopted the U.S. authorized version of names within Virtual International Authority File (VIAF).  We are adding other forms of names, pseudonyms, anagrams that are associated with the official form of the name, at the very least, spelling and diacritics have been adapted in accordance with modern usage, and we have added birth and death dates when available.  By restricting ourselves to U.S. authorized versions, we have at times given researchers less than what they hoped for.</p>";
			break;
			# -------------------------------
			case "printers":
				print "<p>This growing authority file of <b>printers, publishers, and booksellers</b> is being automatically generated by Collective/Access as we add each new entity into our database. Some attempt has been made to differentiate among printers, publishers, booksellers, or bookstores and bookstands, when these roles are clearly defined in the colophons. We use the form of name most frequently as appears printed on the sueltas. In some cases, diacritics have been adapted according to modern practice.</p>";
			break;
			# -------------------------------
		}
		
		
		while($qr_list->nextHit()) {
			$vn_id = $qr_list->get('ca_entities.entity_id');
			$vs_sort = strToLower(strip_tags(str_replace(array(",", ".", "\"", "“", "”", "La ", "El ", "Los ", "Las ", "À", "Á", "á", "à", "â", "ã", "Ç", "ç", "È", "É", "Ê", "è", "ê", "é", "Ì", "Í", "Î", "ì", "í", "î", "è", "Ò", "Ó", "ò", "ó", "ô", "õ", "Ü", "ù", "ú", "ü", "Ñ", "ñ", "Š", "š"), array("", "", "", "", "", "", "", "", "", "A", "A", "a", "a", "a", "a", "C", "c", "E", "E", "E", "e", "e", "e", "I", "I", "I", "i", "i", "i", "e", "O", "O", "o", "o", "o", "o", "U", "u", "u", "u", "N", "n", "S", "s"), trim(strip_tags($qr_list->get('ca_entities.preferred_labels.displayname'))))));
			$vs_first_letter = ucfirst(substr($vs_sort, 0, 1));
			$va_letter_array[$vs_first_letter] = $vs_first_letter;
			$va_links_array[$vs_first_letter][$vs_sort] = "<div class='listLink listEntry listEntryIndentSecondLine'>".$qr_list->getWithTemplate('<b><l>^ca_entities.preferred_labels.displayname</l></b>').(($vs_tmp = $qr_list->get("ca_entities.variant_names.display_name", array("delimiter" => "; ", "sort" => "ca_entities.variant_names.surname"))) ? "<br/>".$vs_tmp : "")."</div>\n";	
		}
		ksort($va_links_array);
		ksort($va_letter_array);
		foreach ($va_links_array as $va_first_letter => $va_links) {
			ksort($va_links);
			print "<p class='separator'><a name='".$vs_first_letter."'></a><br></p>";			
			print "<h2 id='".$va_first_letter."' class='mw-headline'>".$va_first_letter."</h2>";
			foreach ($va_links as $vn_i => $va_link) {
				print $va_link;
			}
		}
		
#		while($qr_list->nextHit()) {
#			$vs_first_letter = ucfirst(substr($qr_list->get('ca_entities.preferred_labels.surname'), 0, 1));
#			$va_letter_array[$vs_first_letter] = $vs_first_letter;
#			$vn_id = $qr_list->get('ca_entities.entity_id');
#			$va_links_array[$vs_first_letter][$vn_id] = "<div class='listLink'>".$qr_list->getWithTemplate('<l>^ca_entities.preferred_labels.displayname</l>')."</div>\n";	
#		}
#		foreach ($va_links_array as $va_first_letter => $va_links) {
#			print "<p class='separator'><a name='".$vs_first_letter."'></a><br></p>";			
#			print "<h2 id='".$va_first_letter."' class='mw-headline'>".$va_first_letter."</h2>";
#			foreach ($va_links as $va_entity_id => $va_link) {
#				print $va_link;
#			}
#		}
	}
?>
	<div id='toc_container'>
		<div id='toc_content' class='arrow-scroll'>
			<ul id='tocList'>
<?php
	foreach ($va_letter_array as $va_key => $va_letter) {
		print "<li class='tocLevel2'><a class='tocLink' href='#".$va_letter."'>".$va_letter."</a></li>";
	}
?>
			</ul><!-- end tocList -->
			<div class="tocListArrow topArrow"></div>
			<div class="tocListArrow bottomArrow"></div>
		</div><!-- end toc_content -->
	</div><!-- end toc_container -->


	</div>