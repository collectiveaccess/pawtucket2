cache_timeout = 0

#
# 
#
browseTypes = {
	objects = {
		displayName = _(Comedias Sueltas),
		labelSingular = _("comedia suelta"),
 		labelPlural = _("comedias sueltas"),
		table = ca_objects,
		
		restrictToTypes = [book],
		#dontExpandTypesHierarchically = true,
		availableFacets = [],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			list = {},
			images = {},
			map = {
				data = ca_places.georeference,
				display = {
					title_template = <l>^ca_objects.CCSSUSA_Uniform</l>,
					description_template = <p>^ca_objects.description</p>,
					icon = <div style='float:left; margin:0px 10px 10px 0px;'>^ca_object_representations.media.icon</div>	
				}
			},
			timeline = {
				data = ca_objects.260_date,
				display = {
					title_template = <l>^ca_objects.CCSSUSA_Uniform</l>,
					description_template = <p>^ca_objects.publication_description</p>,
					credit_template = ^ca_objects.rightsStatement.rightsStatement_text,
					caption_template = <em>^ca_objects.caption</em>,
					image = ^ca_object_representations.media.small,
					icon = ^ca_object_representations.media.icon
				}
			}
		},
		sortBy = {
			Author = ca_entity_labels.surname/author;ca_entity_labels.forename/author;ca_objects.260_date,
			Title = ca_objects.CCSSUSA_Uniform;ca_objects.260_date,
			Date = ca_objects.260_date,
			Collection = ca_collections.preferred_labels.name;ca_entity_labels.surname/author;ca_entity_labels.forename/author;ca_objects.260_date,
		},
		# --- default sort direction for the sortBy options
		sortDirection = {
			Author = asc,
			Title = asc,
			Date = asc,
			Collection = asc
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown
	},
	ornaments = {
		displayName = _(Ornaments),
		labelSingular = _("ornament"),
 		labelPlural = _("ornaments"),
		table = ca_objects,
		
		restrictToTypes = [ornament],
		#dontExpandTypesHierarchically = true,
		availableFacets = [],
		
		baseCriteria = {
			primary_ornament = [yes],
		},
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			images = {},
		},
		sortBy = {
			Title = ca_objects.preferred_labels.name,
		},
		# --- default sort direction for the sortBy options
		sortDirection = {
			Title = asc
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown,
		facetGroup = ornament
	},
	collections = {
		displayName = _(Institutions),
		labelSingular = _("institution"),
 		labelPlural = _("institutions"),
		table = ca_collections,
		omitChildRecords = 1,
		#dontExpandTypesHierarchically = true,
		availableFacets = [],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			map = {
				data = ca_collections.georeference,
				display = {
					labelTemplate = <div><l><b>^ca_collections.preferred_labels.name</b></l></div>,
					contentTemplate = <div><ifdef code='ca_collections.collection_address'><p style='font-size:12px;line-height:1.6em;'><ifdef code='ca_collections.collection_address.collection_address_data1'>^ca_collections.collection_address.collection_address_data1<br/></ifdef><ifdef code='ca_collections.collection_address.collection_address_data2'>^ca_collections.collection_address.collection_address_data2<br/></ifdef><ifdef code='ca_collections.collection_address.collection_city'>^ca_collections.collection_address.collection_city, </ifdef><ifdef code='ca_collections.collection_address.collection_stateprovince'>^ca_collections.collection_address.collection_stateprovince </ifdef><ifdef code='ca_collections.collection_address.collection_postalcode'>^ca_collections.collection_address.collection_postalcode </ifdef></p></ifdef></div>,
					icon = <div>^ca_object_representations.media.icon</div>	
				}
			},
		},
		sortBy = {
			Title = ca_collection_labels.name_sort
		},
		# --- default sort direction for the sortBy options
		sortDirection = {
			Title = asc,
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown
	},
	glossary = {
		displayName = _(Glossary),
		labelSingular = _("term"),
 		labelPlural = _("terms"),
		table = ca_occurrences,
		restrictToTypes = [glossary],
		#dontExpandTypesHierarchically = true,
		availableFacets = [],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			list = {},
		},
		sortBy = {
			Title = ca_occurrences_labels.name_sort
		},
		# --- default sort direction for the sortBy options
		sortDirection = {
			Title = asc,
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown
	},
	miscellanies = {
		displayName = _(Miscellanies),
		labelSingular = _("term"),
 		labelPlural = _("terms"),
		table = ca_occurrences,
		restrictToTypes = [miscellanies],
		#dontExpandTypesHierarchically = true,
		availableFacets = [],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			list = {},
		},
		sortBy = {
			Title = ca_occurrences_labels.name_sort
		},
		# --- default sort direction for the sortBy options
		sortDirection = {
			Title = asc,
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown
	}
}
ca_occurrences = {

}
ca_collections = {

}
ca_objects = {
	name = _("Objects"),
	facets = {			
		author_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_entities,
			relationship_table = ca_objects_x_entities,
			restrict_to_types = [],
			restrict_to_relationship_types = [author],
			
			individual_group_display = 1,
			
			groupings = {
				label = _("Name"), 
				relationship_types = _("Role"),
				type = _("Type")
			},
			group_mode = alphabetical,
			order_by_label_fields = [surname, forename, middlename],
			indefinite_article = an,
			label_singular = _("author"),
			label_plural = _("authors"),
			description = _("Find objects according to the people associated with your records.  You can browse by name&#44; role&#44; or entity type according to your configuration."),
		},
		label_facet = {
			type = attribute,
			element_code = CCSSUSA_Uniform,
			preferred_labels_only = 1,
			group_mode = alphabetical,
			
			label_singular = _("title"),
			label_plural = _("titles"),
			description = _("Find objects according to associated dates.  You can normalize these dates by year&#44; decade or century."),
		},		
		printer_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_entities,
			relationship_table = ca_objects_x_entities,
			restrict_to_types = [],
			restrict_to_relationship_types = [printer],
			
			individual_group_display = 1,
			
			groupings = {
				label = _("Name"), 
				relationship_types = _("Role"),
				type = _("Type")
			},
			group_mode = alphabetical,
			order_by_label_fields = [surname, forename, middlename],
			
			indefinite_article = an,
			label_singular = _("printer"),
			label_plural = _("printers"),
			description = _("Find objects according to the people associated with your records.  You can browse by name&#44; role&#44; or entity type according to your configuration."),
		},
		publisher_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_entities,
			relationship_table = ca_objects_x_entities,
			restrict_to_types = [],
			restrict_to_relationship_types = [publisher],
			
			individual_group_display = 1,
			
			groupings = {
				label = _("Name"), 
				relationship_types = _("Role"),
				type = _("Type")
			},
			group_mode = alphabetical,
			order_by_label_fields = [surname, forename, middlename],
			
			indefinite_article = an,
			label_singular = _("publisher"),
			label_plural = _("publishers"),
			description = _("Find objects according to the people associated with your records.  You can browse by name&#44; role&#44; or entity type according to your configuration."),
		},
		bookseller_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_entities,
			relationship_table = ca_objects_x_entities,
			restrict_to_types = [],
			restrict_to_relationship_types = [bookseller],
			
			individual_group_display = 1,
			
			groupings = {
				label = _("Name"), 
				relationship_types = _("Role"),
				type = _("Type")
			},
			group_mode = alphabetical,
			order_by_label_fields = [surname, forename, middlename],
			
			indefinite_article = an,
			label_singular = _("bookseller"),
			label_plural = _("booksellers"),
			description = _("Find objects according to the people associated with your records.  You can browse by name&#44; role&#44; or entity type according to your configuration."),
		},						
		place_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_places,
			relationship_table = ca_objects_x_places,
			restrict_to_types = [],
			
			individual_group_display = 0,
			
			group_mode = alphabetical,
			order_by_label_fields = [name],
			
			# Set to non-zero value to display hierarchy on items in this facet
			show_hierarchy = 0,
			
			# Character(s) to place between elements of the hierarchy
			hierarchical_delimiter = &nbsp;â¬…&nbsp;,
			
			# Number of items to trim off the top (leave blank or set to 0 to trim nothing)
			remove_first_items = 0,
			
			# Maximum length of hierarchy to display (leave blank to return hierarchy unabridged)
			hierarchy_limit = 3,
			
			# can be ASC or DESC (default is DESC)
			hierarchy_order  = DESC,
			
			indefinite_article = a,
			label_singular = _("place"),
			label_plural = _("places"),
			description = _("Find objects according to the place relationships in your collection.  You can choose to view the available places as a list or heirarchy of place names.")
		},
		from_printers = {
			type = attribute,
			element_code = from_printers,
			
			group_mode = none,
			multiple = true,
			
			label_singular = _("Printers' Evidence"),
			label_plural = _("Printers' Evidence")
		},
		item_specific_info = {
			type = attribute,
			element_code = item_specific_info,
			
			group_mode = none,
			multiple = true,
			
			label_singular = _("Item Specific Information"),
			label_plural = _("Item Specific Information")
		},
		term_facet = {
			type = authority,
			table = ca_list_items,
			relationship_table = ca_objects_x_vocabulary_terms,
			restrict_to_types = [],
			
			individual_group_display = 0,
			
			group_mode = hierarchical,
			
			# Set to non-zero value to display hierarchy on items in this facet
			show_hierarchy = 1,
			
			# Character(s) to place between elements of the hierarchy
			hierarchical_delimiter =  &nbsp;â¬…&nbsp;,
			
			# Number of items to trim off the top (leave blank or set to 0 to trim nothing)
			remove_first_items = ,
			
			# Maximum length of hierarchy to display (leave blank to return hierarchy unabridged)
			hierarchy_limit = 3,
			
			# can be ASC or DESC (default is DESC)
			hierarchy_order  = DESC,
			
			label_singular = _("term"),
			label_plural = _("terms"),
			description = _("Browse keywords and vocabulary terms you have associated with your records.  You can displays your keywords as a list or hierarchy of terms.")
		},
		century_facet = {
			type = normalizedDates,
			element_code = creation_date,
			normalization = centuries,
			
			group_mode = none,
			
			label_singular = _("century"),
			label_plural = _("centuries"),
			description = _("Find objects according to associated dates.  You can normalize these dates by year&#44; decade or century."),
		},
		decade_facet = {
			type = normalizedDates,
			element_code = 260_date,
			normalization = decades,
			
			group_mode = none,
			
			label_singular = _("date"),
			label_plural = _("dates"),
			description = _("Find objects according to associated dates.  You can normalize these dates by year&#44; decade or century."),			
		},
		year_facet = {
			type = normalizedDates,
			element_code = creation_date,
			normalization = years,
			
			group_mode = none,
			
			label_singular = _("year"),
			label_plural = _("years"),
			description = _("Find objects according to associated dates.  You can normalize these dates by year&#44; decade or century."),			
		},
		occurrence_facet = {
			type = authority,
			table = ca_occurrences,
			generate_facets_for_types = 1,
			relationship_table = ca_objects_x_occurrences,
			restrict_to_types = [],
			
			individual_group_display = 1,
			
			show_all_when_first_facet = 0,
			
			groupings = {
				label = _("Name"), 
				ca_attribute_dates_value:years = _("Years")
			},
			
			group_mode = alphabetical,
			
			label_singular = _("occurrence"),
			label_plural = _("occurrences"),
			description = _("Find objects by Occurrences associated with your records&#44; such as historical events&#44; productions&#44; and other record types in your collection."),
		},		
		#institution = {
		#	type = attribute,
		#	element_code = institution,
			
		#	group_mode = none,
			
		#	label_singular = _("institution"),
		#	label_plural = _("institutions")
		#},
		institution_facet = {
			type = authority,
			table = ca_collections,
			relationship_table = ca_objects_x_collections,
			restrict_to_types = [institution],
			order_by_label_fields = [name],
			group_mode = none,

			label_singular = _("institution"),
			label_plural = _("institutios"),
			description = _("Find objects according to the Collections they belong to."),
		},
		has_media_facet = {
			type = has,
			
			table = ca_object_representations,
			relationship_table = ca_objects_x_object_representations,
			restrict_to_types = [],
			restrict_to_relationship_types = [],
			
			label_yes = _("Has media"),
			label_no = _("Does not have media"),
			
			single_value = 1,
			
			label_singular = _("has image(s)"),
			label_plural = _("has image(s)"),
			description = _("Find objects that have associated media."),
		},
		playwrights_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_entities,
			relationship_table = ca_objects_x_entities,
			restrict_to_types = [ind],
			restrict_to_relationship_types = [attributedname, author, added_author, contributor, dubiousauthor, translator],
			
			
			groupings = {
				label = _("Name"), 
				relationship_types = _("Role"),
				type = _("Type")
			},
			group_mode = alphabetical,
			order_by_label_fields = [surname, forename, middlename],
			indefinite_article = an,
			label_singular = _("playwrights"),
			label_plural = _("playwrights"),
			group = x
		},
		printer_seller_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_entities,
			relationship_table = ca_objects_x_entities,
			restrict_to_types = [],
			restrict_to_relationship_types = [bookseller, printer, printers, publisher],
			
			group_mode = alphabetical,
			order_by_label_fields = [surname, forename, middlename],
			indefinite_article = an,
			label_singular = _("printer/seller"),
			label_plural = _("printer/seller"),
			group = x
		},
		ornament_category = {
			type = attribute,
			element_code = category,
			
			group_mode = alphabetcial,
			display = ca_list_item_labels.name_singular,
			label_singular = _("Ornament name"),
			label_plural = _("Ornament names"),
			facet_groups = [ornament],
			multiple = 1
		},
		use = {
			type = attribute,
			element_code = use,
			
			group_mode = alphabetcial,
			
			label_singular = _("Use"),
			label_plural = _("Uses"),
			facet_groups = [ornament]
		},
		primary_ornament = {
			type = attribute,
			element_code = primary,
			
			group_mode = alphabetcial,
			
			label_singular = _("Primary"),
			label_plural = _("Primary"),
			facet_groups = [ornament],
			requires = x
		},
		entity_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_entities,
			relationship_table = ca_objects_x_entities,
			restrict_to_types = [],
			restrict_to_relationship_types = [],
			
			group_mode = alphabetical,
			order_by_label_fields = [surname, forename, middlename],
			indefinite_article = an,
			label_singular = _("entity"),
			label_plural = _("entities"),
			requires = x
		},
		collection_facet = {
			type = authority,
			table = ca_collections,
			relationship_table = ca_objects_x_collections,
			restrict_to_types = [institution],
			order_by_label_fields = [name],
			group_mode = none,

			label_singular = _("institution"),
			label_plural = _("institutios"),
			requires = x,
		}
		
		
		
	}
}

views = {
	images = {
		icon = glyphicon-th
	},
	list = {
		icon = glyphicon-list
	},
	timeline = {
		icon = glyphicon-time
	},
	map = {
		icon = glyphicon-globe
	}
}

# --- text for Browse menu item, default is "Browse" 
browse_menu_button_text = 

# --- default number of results per page/ajax load
defaultHitsPerBlock = 36

# --- set to list to show dropdown with links to each configured browse or a single Browse nav link when one browse is configured
browseMenuFormat =

# --- set if you don't want the browse menu to be preloaded with facets for the first browse type on open
dontPreloadBrowseMenu = 1

# --- refine_col_class -> boostrap col class to assign to refine col - defaults to: col-sm-8 col-md-8 col-lg-8
result_col_class =

# --- refine_col_class -> boostrap col class to assign to refine col - defaults to: col-sm-4 col-md-3 col-md-offset-1 col-lg-3 col-lg-offset-1
refine_col_class =
