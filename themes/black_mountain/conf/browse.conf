cache_timeout = 0

#
# 
#
browseTypes = {
	objects = {
		displayName = _(Objects),
		labelSingular = _("object"),
 		labelPlural = _("objects"),
		table = ca_objects,
		
		restrictToTypes = [artwork, oral_history, archival_object, publication],
		#dontExpandTypesHierarchically = true,
		availableFacets = [],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			images = {
				#result_caption = "<small><l>^ca_objects.idno</l></small><br/><l>^ca_objects.preferred_labels<ifcount code='ca_entities' restrictToRelationshipTypes='creator' min='1'><unit relativeTo='ca_entities' restrictToRelationshipTypes='creator' delimiter=', '>, ^ca_entities.preferred_labels</unit></ifcount><ifdef code='ca_objects.artwork_date'><unit relativeTo='ca_objects.artwork_date'><if rule='^ca_objects.artwork_date.artwork_date_types =~ /Creation/'>, ^ca_objects.artwork_date.artwork_date_value</if></unit></ifdef><ifdef code='ca_objects.archival_object_date'><unit relativeTo='ca_objects.archival_object_date'><if rule='^ca_objects.archival_object_date.archival_object_date_types =~ /Creation/'>, ^ca_objects.archival_object_date.archival_object_date_value</if></unit></ifdef><ifcount code='ca_entities' restrictToRelationshipTypes='author' min='1'><unit relativeTo='ca_entities' restrictToRelationshipTypes='author' delimiter=', '>, ^ca_entities.preferred_labels</unit></ifcount><ifdef code='ca_objects.publication_date'><unit relativeTo='ca_objects.publication_date'><if rule='^ca_objects.publication_date.publication_date_types =~ /Publication/'>, ^ca_objects.publication_date.publication_date_value</if></unit></ifdef><ifdef code='ca_objects.interview.oral_history_dates_value'><unit relativeTo='ca_objects.interview'><if rule='^ca_objects.interview.oral_history_dates_types =~ /Interview/'>, ^ca_objects.interview.oral_history_dates_value</if></unit></ifdef></l>",
				result_caption = "<small><l>^ca_objects.idno</l></small><br/><l>^ca_objects.preferred_labels<ifcount code='ca_entities' restrictToRelationshipTypes='creator,author' min='1'><unit relativeTo='ca_entities' restrictToRelationshipTypes='creator,author' delimiter=', '>, ^ca_entities.preferred_labels</unit></ifcount><ifdef code='ca_objects.display_date'>, ^ca_objects.display_date</ifdef><ifnotdef code='ca_objects.display_date'><ifdef code='ca_objects.index_date'>, ^ca_objects.index_date</ifdef></ifnotdef></l>"
			}
		},
		sortBy = {
			Identifier = ca_objects.idno,
			Title = ca_object_labels.name,
			Date = ca_objects.index_date
		},
		# --- default sort direction for the sortBy options
		sortDirection = {
			Identifier = asc,
			Title = desc,
			Date = desc
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown,
#		options = {
#			selectMediaUsingRelationshipTypes = [relationshipType],
#			selectMediaUsingTypes = [objectType],
#			extendedInformationTemplate = ^ca_objects.description
#		}
	},
	people = {
		displayName = _("People & Organizations"),
		labelSingular = _("person / organization"),
 		labelPlural = _("people & oraganizations"),
		table = ca_entities,
		restrictToTypes = [],
		showLetterBarFrom = ca_entity_labels.surname,
		showLetterBarSorts = [ca_entity_labels.surname;ca_entity_labels.forename],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			images = {
				result_caption = "<small><l>^ca_entities.idno</l></small><br/><l>^ca_entities.preferred_labels</l>",
			}
		},
		
		sortBy = {
			Name = ca_entity_labels.surname;ca_entity_labels.forename,
			Date = ca_entities.index_date
		},
		# --- default sort direction for the sortBy options
		sortDirection = {
			Name = asc,
			Date = desc
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown,
#		options = {
#			selectMediaUsingRelationshipTypes = [relationshipType],
#			selectMediaUsingTypes = [objectType]
#		}
	},
	programs = {
		displayName = _(Programs),
		labelSingular = _("program"),
 		labelPlural = _("programs"),
		table = ca_occurrences,
		restrictToTypes = [bmcm_ac_programs],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			images = {
				result_caption = "<small><l>^ca_occurrences.idno</l></small><br/><l>^ca_occurrences.preferred_labels<ifdef code='ca_occurrences.display_date'>, ^ca_occurrences.display_date</ifdef><ifnotdef code='ca_occurrences.display_date'><ifdef code='ca_occurrences.index_date'>, ^ca_occurrences.index_date</ifdef></ifnotdef></l>",
			}
		},
		
		sortBy = {
			Identifier = ca_occurrences.idno,
			Name = ca_occurrence_labels.name_sort,
			Date = ca_occurrence_labels.index_date
		},
		# --- default sort direction for the sortBy options
		sortDirection = {
			Identifier = asc,
			Name = asc,
			Date = desc
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown,
#		options = {
#			selectMediaUsingRelationshipTypes = [relationshipType],
#			selectMediaUsingTypes = [objectType]
#		}
	},
	collections = {
		displayName = _(Collections),
		labelSingular = _("collection"),
 		labelPlural = _("collections"),
		table = ca_collections,
		restrictToTypes = [],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			images = {
				result_caption = "<small><l>^ca_collection.idno</l></small><br/><l>^ca_collections.preferred_labels</l>",
			}
		},
		
		sortBy = {
			Identifier = ca_collections.idno,
			Name = ca_collections.name_sort
		},
		# --- default sort direction for the sortBy options
		sortDirection = {
			Identifier = asc,
			Name = asc
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown,
#		options = {
#			selectMediaUsingRelationshipTypes = [relationshipType],
#			selectMediaUsingTypes = [objectType]
#		}
	}
}

views = {
	images = {
		icon = glyphicon-th
	},
	list = {
		icon = glyphicon-list
	},
	timeline = {
		icon = glyphicon-time
	},
	map = {
		icon = glyphicon-globe
	}
}

# --- text for Browse menu item, default is "Browse" 
browse_menu_button_text = 

# --- default number of results per page/ajax load
defaultHitsPerBlock = 36

# --- set to list to show dropdown with links to each configured browse or a single Browse nav link when one browse is configured
browseMenuFormat = list

# --- set if you don't want the browse menu to be preloaded with facets for the first browse type on open
dontPreloadBrowseMenu = 1

# --- refine_col_class -> boostrap col class to assign to refine col - defaults to: col-sm-8 col-md-8 col-lg-8
result_col_class = col-sm-8 col-md-9 col-lg-9

# --- refine_col_class -> boostrap col class to assign to refine col - defaults to: col-sm-4 col-md-3 col-md-offset-1 col-lg-3 col-lg-offset-1
refine_col_class = col-sm-4 col-md-3



ca_objects = {
	name = _("Objects"),
	facets = {
		type_facet = {
			type = fieldList,
			field = type_id,
			
			group_mode = none,

			label_singular = _("Category"),
			label_plural = _("Categories")
		},
		object_type_facet = {
			type = attribute,
			element_code = primary_type,
			
			group_mode = alphabetical,
			
			label_singular = _("Object type"),
			label_plural = _("Object types")
		},
		decade_facet = {
			type = normalizedDates,
			element_code = index_date,
			normalization = decades,
			
			group_mode = none,
			include_unknown = 1,
			
			label_singular = _("date"),
			label_plural = _("dates")			
		},
		year_facet = {
			type = normalizedDates,
			element_code = index_date,
			normalization = years,
			
			group_mode = none,
			include_unknown = 1,
			requires = decade_facet,
			
			label_singular = _("date"),
			label_plural = _("dates")			
		},
		collection_facet = {
			type = authority,
			table = ca_collections,
			relationship_table = ca_objects_x_collections,
			restrict_to_types = [],
			restrict_to_relationship_types = [],
			
			group_mode = alphabetical,
			
			label_singular = _("collection"),
			label_plural = _("collections")
		},	
		person_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_entities,
			relationship_table = ca_objects_x_entities,
			restrict_to_types = [ind],
			
			group_mode = alphabetical,
			order_by_label_fields = [name_sort],
			natural_sort = 0,
			
			indefinite_article = an,
			label_singular = _("person"),
			label_plural = _("people"),
		},	
		org_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_entities,
			relationship_table = ca_objects_x_entities,
			restrict_to_types = [org],
			
			natural_sort = 0,
			order_by_label_fields = [name_sort],
			
			indefinite_article = an,
			label_singular = _("organization"),
			label_plural = _("organizations"),
		},
		occ_all_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_occurrences,
			relationship_table = ca_objects_x_occurrences,
			
			indefinite_article = an,
			label_singular = _("occ for detail page results"),
			label_plural = _("occ for detail page results"),
			requires = x
		},
		has_media_facet = {
			type = has,
			
			table = ca_object_representations,
			relationship_table = ca_objects_x_object_representations,
			restrict_to_types = [],
			restrict_to_relationship_types = [],
			
			#single_value = 1,
			group_mode = none,
			
			label_yes = _("Has media"),
			label_no = _("Has no media"),
			
			label_singular = _("has media"),
			label_plural = _("has media")
		}
	}
}

ca_entities = {
	name = _("People/Org"),
	facets = {
		type_facet = {
			type = fieldList,
			field = type_id,
			
			group_mode = none,

			label_singular = _("Type"),
			label_plural = _("Types")
		},
		bmc_role = {
			type = attribute,
			element_code = bmc_role_value,
			group_mode = alphabetical,
			
			label_singular = _("Role at BMC"),
			label_plural = _("Role at BMC")
		},
#		has_active_BMC = {
#			type = has,
			
#			table = ca_entities,
#			element_code = bmc_role,
			
			#single_value = 1,
#			group_mode = none,
			
#			label_yes = _("Yes"),
#			label_no = _("No"),
			
#			label_singular = _("Active At BMC"),
#			label_plural = _("Active At BMC")
#		},
		decade_facet = {
			type = normalizedDates,
			element_code = bmc_role_dates,
			normalization = decades,
			
			group_mode = none,
			
			label_singular = _("Date at BMC"),
			label_plural = _("Dates at BMC")			
		},
		year_facet = {
			type = normalizedDates,
			element_code = bmc_role_dates,
			normalization = years,
			requires = decade_facet,
			
			group_mode = none,
			
			label_singular = _("Date at BMC"),
			label_plural = _("Dates at BMC")			
		}
	}
}
ca_occurrences = {
	name = _("programs"),
	facets = {
		type_facet = {
			type = fieldList,
			field = type_id,
			
			group_mode = none,

			label_singular = _("Type"),
			label_plural = _("Types")
		},
		event_type_facet = {
			type = attribute,
			element_code = event_type,
			
			group_mode = alphabetical,
			
			label_singular = _("Event type"),
			label_plural = _("Event types")
		},
		decade_facet = {
			type = normalizedDates,
			element_code = index_date,
			normalization = decade,
			
			group_mode = none,
			
			label_singular = _("Date"),
			label_plural = _("Dates")			
		},
		year_facet = {
			type = normalizedDates,
			element_code = index_date,
			normalization = years,
			requires = decade_facet,
			group_mode = none,
			
			label_singular = _("Date"),
			label_plural = _("Dates")			
		},	
		recurring_event_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_occurrences,
			relationship_table = ca_occurrences_x_occurrences,
			restrict_to_types = [series],
			
			group_mode = alphabetical,
			natural_sort = 0,
			order_by_label_fields = [name],
			
			indefinite_article = a,
			label_singular = _("series"),
			label_plural = _("series"),
		},	
		people_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_entities,
			relationship_table = ca_entities_x_occurrences,
			exclude_relationship_types = [organizer, institutional_partner, presenter],
			
			group_mode = alphabetical,
			natural_sort = 0,
			order_by_label_fields = [surname, forename, middlename],
			
			indefinite_article = an,
			label_singular = _("person"),
			label_plural = _("people"),
		},	
		org_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_entities,
			relationship_table = ca_entities_x_occurrences,
			restrict_to_types = [org],
			
			group_mode = alphabetical,
			natural_sort = 0,
			order_by_label_fields = [surname, forename, middlename],
			
			indefinite_article = an,
			label_singular = _("organization"),
			label_plural = _("organizations"),
		},
		has_media_facet = {
			type = has,
			
			table = ca_object_representations,
			relationship_table = ca_occurrences_x_object_representations,
			restrict_to_types = [],
			restrict_to_relationship_types = [],
			
			#single_value = 1,
			group_mode = none,
			
			label_yes = _("Has media"),
			label_no = _("Has no media"),
			
			label_singular = _("has media"),
			label_plural = _("has media")
		}
	}
}
ca_collections = {
	name = _("collection"),
	facets = {
		type_facet = {
			type = fieldList,
			field = type_id,
			
			group_mode = none,

			label_singular = _("Type"),
			label_plural = _("Types")
		}
	}
}