cache_timeout = 3600

#
# 
#
browseTypes = {

	objects = {
		displayName = _(Objects),
		labelSingular = _("object"),
 		labelPlural = _("objects"),
		table = ca_objects,
		
		restrictToTypes = [],
		#dontExpandTypesHierarchically = true,
		availableFacets = [],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			images = {
				result_caption = "
				<unit relativeTo='ca_collections' restrictToRelationshipTypes='part_of'>
					<unit relativeTo='ca_collections.hierarchy' maxLevelsFromTop ='1' restrictToRelationshipTypes='part_of'>
						<div class='browse-img-caption-coll'><l>^ca_collections.preferred_labels</l></div>
					</unit>
				</unit
				<br>
				<div class='browse-img-caption-label line-clamp-3'><l>^ca_objects.preferred_labels</l></div>",
			},
			list = {
				result_caption = "
				<unit relativeTo='ca_collections' restrictToRelationshipTypes='part_of'>
					<unit relativeTo='ca_collections.hierarchy' maxLevelsFromTop ='1' restrictToRelationshipTypes='part_of'>
						<div class='browse-list-caption-coll'><l>^ca_collections.preferred_labels</l></div>
					</unit>
				</unit
				<br>
				<div class='browse-list-caption-label line-clamp-3'><l>^ca_objects.preferred_labels</l></div>
				<br/>
				<div class='browse-list-caption-abs'>^ca_occurrences.cfaAbstract%truncate=150%ellipsis</div>
				",
			},
		},
		sortBy = {
			Identifier = ca_objects.idno,
			Title = ca_object_labels.name
		},
		# --- default sort direction for the sortBy options
		sortDirection = {
			Identifier = asc,
			Title = desc
		},`
		# --- sortControlType = dropdown or list
		sortControlType = dropdown,
#		options = {
#			selectMediaUsingRelationshipTypes = [relationshipType],
#			selectMediaUsingTypes = [objectType],
#			extendedInformationTemplate = ^ca_objects.description
#		}
	},

	collections = {
		displayName = _(Collections),
		labelSingular = _("collection"),
 		labelPlural = _("collections"),
		table = ca_collections,
		restrictToTypes = [],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = { 
			images = {
				result_caption = "<small style='color:gray;' >^ca_collections.idno</small>
				<br/>
				<l>^ca_collections.preferred_labels</l>",
			}, 
			list = {
				result_caption = "<small style='color:gray;'>^ca_collections.idno</small>
				<br/>
				<l>^ca_collections.preferred_labels</l>
				<br/>
				<small>^ca_collections.cfaAbstract%truncate=70%ellipsis<small>",
			}
		},
		
		sortBy = {
			Relevance = _natural,
			Identifier = ca_collections.idno,
			Name = ca_collection_labels.name
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown
	},


	entities = {
		displayName = _(People/Orgs),
		labelSingular = _("person"),
 		labelPlural = _("people"),
		table = ca_entities,
		restrictToTypes = [],
		showLetterBarFrom = ca_entity_labels.surname,
		showLetterBarSorts = [ca_entity_labels.surname;ca_entity_labels.forename],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			images = {
				result_caption = "<small><l>^ca_entities.idno</l></small><br/><l>^ca_entities.preferred_labels</l>",
			}, 
			list = {
				result_caption = "<small><l>^ca_entities.idno</l></small><br/><l>^ca_entities.preferred_labels</l>",
			}
		},
		
		sortBy = {
			Relevance = _natural,
			Identifier = ca_entities.idno,
			Name = ca_entity_labels.surname;ca_entity_labels.forename
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown,
#		options = {
#			selectMediaUsingRelationshipTypes = [relationshipType],
#			selectMediaUsingTypes = [objectType]
#		}
	}
}

views = {
	images = {
		icon = glyphicon-th
	},
	list = {
		icon = glyphicon-list
	},
	timeline = {
		icon = glyphicon-time
	},
	map = {
		icon = glyphicon-globe
	}
}

# --- text for Browse menu item, default is "Browse" 
browse_menu_button_text = 

# --- default number of results per page/ajax load
defaultHitsPerBlock = 16

# --- set to list to show dropdown with links to each configured browse or a single Browse nav link when one browse is configured
browseMenuFormat = list

# --- set if you don't want the browse menu to be preloaded with facets for the first browse type on open
dontPreloadBrowseMenu = 1

# --- refine_col_class -> boostrap col class to assign to refine col - defaults to: col-sm-8 col-md-8 col-lg-8
result_col_class =

# --- refine_col_class -> boostrap col class to assign to refine col - defaults to: col-sm-4 col-md-3 col-md-offset-1 col-lg-3 col-lg-offset-1
refine_col_class =

ca_objects = {
	name = _("Object"),
	facets = {

		has_media = {
			type = has,
			
			table = ca_object_representations,
			relationship_table = ca_objects_x_object_representations,
			restrict_to_types = [],
			restrict_to_relationship_types = [],
			
			label_yes = _("Yes"),
			label_no = _("No"),
			
			force_access = [1],
			
			single_value = 1,
			
			label_singular = _("Viewable Media?"),
			label_plural = _("Viewable Media?"),
			description = _("Find objects that have associated media."),
		},

		access = {
			type = fieldList,
			field = access,
			group_mode = none,
			label_singular = _("Access"),
			label_plural = _("Access")
		},

		media_class = {
			type = field,
			field = media_class,
			group_mode = none,
			relative_to = ca_object_representations,
			label_singular = _("media type"),
			label_plural = _("media types")
		},

		type = {
			type = fieldList,
			field = type_id,
			
			group_mode = none,
			multiple = 1,

			label_singular = _("Object Type"),
			label_plural = _("Object Type"),
			description = _("Find objects according to the types defined in your collection profile."),
		},

		entity = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_entities,
			relationship_table = ca_objects_x_entities,
			restrict_to_types = [],
			relative_to = ca_occurrences,
			
			# individual_group_display = 1,
			# multiple = 1,
			
			group_mode = alphabetical,
			order_by_label_fields = [surname, forename, middlename],
			
			# indefinite_article = an,
			label_singular = _("People / Org"),
			label_plural = _("People / Org"),
			description = _("Find objects according to the people associated with your records."),
		},	

		places = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_places,
			relationship_table = ca_objects_x_places,
			restrict_to_types = [],
			relative_to = ca_occurrences,

			group_mode = alphabetical,

			label_singular = _("Places"),
			label_plural = _("Places"),
			description = _("Find collections according to the people associated with your records."),
		},	

		collection = {
			type = authority,
			table = ca_collections,
			relationship_table = ca_objects_x_collections,
			restrict_to_types = [collection],
			multiple = 1,

			group_mode = none,

			label_singular = _("Collections"),
			label_plural = _("Collections"),
			description = _("Find objects according to the Collections they belong to."),
		},

		date = {
			type = normalizedDates,
			relationship_table = ca_objects_x_occurrences,
			element_code = ca_occurrences.cfaDateProduced,
			normalization = decades,
			relative_to = ca_occurrences,
	
			restrictToTypes = [],
			group_mode = none,
			
			description = _("Find collection by date"),
			
			label_singular = _("Decade"),
			label_plural = _("Decades"),
		},

		has_color = {
			type = attribute,
			element_code = ca_objects.cfaColor,
			group_mode = none,
			label_singular = _("Color"),
			label_plural = _("Color")
		},

		film_media_format = {
			type = attribute,
			element_code = ca_objects.cfaFormat,

			multiple = 1,
			group_mode = none,

			label_singular = _("Film Format"),
			label_plural = _("Film Format"),
			description = _("Find objects by Media Format."),
		},

		audio_media_format = {
			type = attribute,
			element_code = ca_objects.cfaAudioFormatHierachical,

			multiple = 1,
			group_mode = none,

			label_singular = _("Audio Format"),
			label_plural = _("Audio Format"),
			description = _("Find objects by Media Format."),
		},

		video_media_format = {
			type = attribute,
			element_code = ca_objects.cfaVideoFormatHierachical,

			multiple = 1,
			group_mode = none,

			label_singular = _("Video Format"),
			label_plural = _("Video Format"),
			description = _("Find objects by Media Format."),
		},

		subject = {
			type = authority,
			table = ca_list_items,
			relationship_table = ca_objects_x_vocabulary_terms,
			restrict_to_lists = [subject],
			
			group_mode = alphabetical,
			
			relative_to = ca_occurrences,
			
			label_singular = _("Subject"),
			label_plural = _("Subjects")
		},

		form = {
			type = authority,
			table = ca_list_items,
			relationship_table = ca_objects_x_vocabulary_terms,
			restrict_to_lists = [form],
			
			group_mode = alphabetical,
			
			relative_to = ca_occurrences,
			
			label_singular = _("Form"),
			label_plural = _("Forms")
		},

		genre = {
			type = authority,
			table = ca_list_items,
			relationship_table = ca_objects_x_vocabulary_terms,
			restrict_to_lists = [genre],
			
			group_mode = alphabetical,
			
			relative_to = ca_occurrences,
			
			label_singular = _("Genre"),
			label_plural = _("Genres")
		},

		has_been_digitized = {
			type = attribute,
			element_code = cfaYNTransferred,
			group_mode = none,
			label_yes = _("Yes"),
			label_no = _("No"),		
			label_singular = _("Has Been Digitized?"),
			label_plural = _("Has Been Digitized?"),
		},

	}
}

ca_collections = {
	name = _("Collection"),
	facets = {

		type = {
			type = fieldList,
			field = type_id,
			
			group_mode = none,
			multiple = 1,

			label_singular = _("Collection Type"),
			label_plural = _("Collection Type"),
			description = _("Find collections according to the types defined in your collection profile."),
		},

		has_media = {
			type = has,
			table = ca_collections,
			relationship_table = ca_collections_x_object_representations,
			restrict_to_types = [],
			restrict_to_relationship_types = [],
			
			label_yes = _("Yes"),
			label_no = _("No"),
			
			single_value = 1,
			
			label_singular = _("Has Media"),
			label_plural = _("Has Media"),
			description = _("Find collections that have associated media."),
			# facet_groups = [people, org]
		},	

		access = {
			type = fieldList,
			field = access,
			group_mode = none,
			label_singular = _("Access"),
			label_plural = _("Access")
		},

		entity = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_entities,
			relationship_table = ca_collections_x_entities,
			restrict_to_types = [ind],
			
			# individual_group_display = 1,
			# multiple = 1,
			
			group_mode = alphabetical,
			order_by_label_fields = [surname, forename, middlename],
			
			# indefinite_article = an,
			label_singular = _("Person"),
			label_plural = _("People"),
			description = _("Find collections according to the people associated with your records."),
		},	

		places = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_places,
			relationship_table = ca_collections_x_places,
			restrict_to_types = [],
			
			# individual_group_display = 1,
			# multiple = 1,
			
			group_mode = alphabetical,
			
			label_singular = _("Place"),
			label_plural = _("Places"),
			description = _("Find collections according to the people associated with your records."),
		},	

		inclusive_dates = {
			type = normalizedDates,
			element_code = ca_collections.cfaInclusiveDates,
			normalization = decades,
	
			restrictToTypes = [],
			group_mode = none,
			
			description = _("Find collection by date"),
			
			label_singular = _("Decade"),
			label_plural = _("Decades"),
		},

		subject = {
			type = authority,
			table = ca_list_items,
			relationship_table = ca_collections_x_vocabulary_terms,
			restrict_to_lists = [subject],
			
			group_mode = alphabetical,
			
			label_singular = _("Subject"),
			label_plural = _("Subjects")
		},

		form = {
			type = authority,
			table = ca_list_items,
			relationship_table = ca_collections_x_vocabulary_terms,
			restrict_to_lists = [form],
			
			group_mode = alphabetical,
			
			label_singular = _("Form"),
			label_plural = _("Forms")
		},

		genre = {
			type = authority,
			table = ca_list_items,
			relationship_table = ca_collections_x_vocabulary_terms,
			restrict_to_lists = [genre],
			
			group_mode = alphabetical,
			
			label_singular = _("Genre"),
			label_plural = _("Genres")
		},

	}
}
