cache_timeout = 0

#
# 
#
browseTypes = {
	objects = {
		displayName = _(Objects),
		labelSingular = _("object"),
 		labelPlural = _("objects"),
		table = ca_objects,
		
		#restrictToTypes = [artifact,document,photograph,art_architecture,library],
		#dontExpandTypesHierarchically = true,
		availableFacets = [],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			images = {},
			list = {}
		},
		sortBy = {
			Identifier = ca_objects.idno,
			Title = ca_object_labels.name,
			Date = ca_objects.date_value
		},
		# --- default sort direction for the sortBy options
		sortDirection = {
			Identifier = asc,
			Title = asc,
			Date = desc
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown,
		options = {
			imageResultTextTemplate = "<small>^ca_objects.idno</small><if rule='(^ca_objects.type_id =~ /audio|moving/)'><ifcount code='ca_occurrences' min='1'><br/>^ca_occurrences.preferred_labels</ifcount></if><br/>^ca_objects.preferred_labels.name",
			listResultTextTemplate = "<small>^ca_objects.idno</small><if rule='(^ca_objects.type_id =~ /audio|moving/)'><ifcount code='ca_occurrences' min='1'><br/>^ca_occurrences.preferred_labels</ifcount></if><br/>^ca_objects.preferred_labels.name",
#			selectMediaUsingRelationshipTypes = [relationshipType],
#			selectMediaUsingTypes = [objectType],
#			extendedInformationTemplate = ^ca_objects.description
		}
	},
	objects_non_audio_video = {
		displayName = _(Objects),
		labelSingular = _("object"),
 		labelPlural = _("objects"),
		table = ca_objects,
		
		restrictToTypes = [artifact,document,photograph,art_architecture,library],
		#dontExpandTypesHierarchically = true,
		availableFacets = [],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			images = {},
			list = {}
		},
		sortBy = {
			Identifier = ca_objects.idno,
			Title = ca_object_labels.name,
			Date = ca_objects.date_value
		},
		# --- default sort direction for the sortBy options
		sortDirection = {
			Identifier = asc,
			Title = asc,
			Date = desc
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown,
		options = {
			imageResultTextTemplate = "<small>^ca_objects.idno</small><if rule='(^ca_objects.type_id =~ /audio|moving/)'><ifcount code='ca_occurrences' min='1'><br/>^ca_occurrences.preferred_labels</ifcount></if><br/>^ca_objects.preferred_labels.name",
			listResultTextTemplate = "<small>^ca_objects.idno</small><if rule='(^ca_objects.type_id =~ /audio|moving/)'><ifcount code='ca_occurrences' min='1'><br/>^ca_occurrences.preferred_labels</ifcount></if><br/>^ca_objects.preferred_labels.name",
#			selectMediaUsingRelationshipTypes = [relationshipType],
#			selectMediaUsingTypes = [objectType],
#			extendedInformationTemplate = ^ca_objects.description
		}
	},
	events = {
		displayName = _("Events & Broadcasts"),
		labelSingular = _("Event & Broadcast"),
 		labelPlural = _("Events & Broadcasts"),
		table = ca_occurrences,
		restrictToTypes = [event],
		showLetterBarFrom = ,
		showLetterBarSorts = ,
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			list = {}
		},
		
		sortBy = {
			Name = ca_occurrence_labels.name,
			Date = ca_occurrence_labels.date
		},
		# --- default sort direction for the sortBy options
		sortDirection = {
			Name = asc,
			Date = desc
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown,
		options = {
			listResultTextTemplate = "^ca_occurrences.preferred_labels.name",
#			selectMediaUsingRelationshipTypes = [relationshipType],
#			selectMediaUsingTypes = [objectType]
		}
	},
	entities = {
		displayName = _(People & Organizations),
		labelSingular = _("person/organization"),
 		labelPlural = _("people & organizations"),
		table = ca_entities,
		restrictToTypes = [],
		showLetterBarFrom = ca_entity_labels.surname,
		showLetterBarSorts = [ca_entity_labels.surname;ca_entity_labels.forename;ca_entity_labels.displayname],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			list = {}
		},
		
		sortBy = {
			Name = ca_entity_labels.surname;ca_entity_labels.forename;ca_entity_labels.displayname
		},
		# --- default sort direction for the sortBy options
		sortDirection = {
			Relevance = asc,
			Name = asc
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown,
		options = {
			listResultTextTemplate = "^ca_entities.preferred_labels.displayname",
			selectMediaUsingRelationshipTypes = [Depicted],
#			selectMediaUsingTypes = [objectType]
		}
	}
}

views = {
	images = {
		icon = glyphicon-th
	},
	list = {
		icon = glyphicon-list
	},
	timeline = {
		icon = glyphicon-time
	},
	map = {
		icon = glyphicon-globe
	}
}

# --- text for Browse menu item, default is "Browse" 
browse_menu_button_text = Find

# --- default number of results per page/ajax load
defaultHitsPerBlock = 36

# --- set to list to show dropdown with links to each configured browse or a single Browse nav link when one browse is configured
browseMenuFormat = list

# --- set if you don't want the browse menu to be preloaded with facets for the first browse type on open
dontPreloadBrowseMenu = 1

# --- refine_col_class -> boostrap col class to assign to refine col - defaults to: col-sm-8 col-md-8 col-lg-8
result_col_class =

# --- refine_col_class -> boostrap col class to assign to refine col - defaults to: col-sm-4 col-md-3 col-md-offset-1 col-lg-3 col-lg-offset-1
refine_col_class =



ca_objects = {
	name = _("Objects"),
	facets = {
		type_facet = {
			type = fieldList,
			field = type_id,
			
			group_mode = none,
			
			multiple = 1,

			label_singular = _("object type"),
			label_plural = _("object types"),
			description = _("Find objects according to the Types defined in your collection profile."),
		},	
		entity_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_entities,
			relationship_table = ca_objects_x_entities,
			restrict_to_types = [],
			
			individual_group_display = 1,
			
			groupings = {
				label = _("Name"), 
				relationship_types = _("Role"),
				type = _("Type")
			},
			group_mode = alphabetical,
			order_by_label_fields = [surname, forename, middlename],
			
			indefinite_article = an,
			label_singular = _("Person/Organization"),
			label_plural = _("People & Organizations"),
		},
		decade_facet = {
			type = normalizedDates,
			element_code = date_value,
			normalization = decades,
			
			multiple = 1,
			columns = 1,
			
			group_mode = none,
			
			label_singular = _("decade"),
			label_plural = _("decades"),
			description = _("Find objects according to associated dates.  You can normalize these dates by year&#44; decade or century."),			
		},
		year_facet = {
			type = normalizedDates,
			element_code = date_value,
			normalization = years,
			
			requires = decade_facet,
			
			multiple = 1,
			columns = 1,
			
			group_mode = none,
			
			label_singular = _("year"),
			label_plural = _("years"),
			description = _("Find objects according to associated dates.  You can normalize these dates by year&#44; decade or century."),			
		},
		keyword_facet = {
			type = attribute,
			element_code = internal_keywords,
			
			group_mode = alphabetical,
			
			label_singular = _("Local Keyword"),
			label_plural = _("Local Keywords")
		},
		lcsh_terms_facet = {
			type = attribute,
			element_code = lcsh_terms,
			
			group_mode = alphabetical,
			
			label_singular = _("Subject"),
			label_plural = _("Subjects")
		},
		occurrence_facet = {
			type = authority,
			table = ca_occurrences,
			generate_facets_for_types = 1,
			relationship_table = ca_objects_x_occurrences,
			restrict_to_types = [event],
			
			group_mode = alphabetical,
			
			label_singular = _("Event"),
			label_plural = _("Events"),
		},
		collection_facet = {
			type = authority,
			table = ca_collections,
			relationship_table = ca_objects_x_collections,
			restrict_to_types = [collection],
			
			group_mode = none,
			multiple = 1,

			label_singular = _("collection"),
			label_plural = _("collections"),
			description = _("Find objects according to the Collections they belong to."),
		},
		has_media_facet = {
			type = has,
			
			table = ca_object_representations,
			relationship_table = ca_objects_x_object_representations,
			restrict_to_types = [],
			restrict_to_relationship_types = [],
			
			label_yes = _("Has media"),
			label_no = _("Does not have media"),
			
			single_value = 1,
			
			label_singular = _("has media"),
			label_plural = _("has media"),
			description = _("Find objects that have associated media."),
		},	
		related_object_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_objects,
			relationship_table = ca_objects_x_objects,
			restrict_to_types = [],
			
			individual_group_display = 1,
			
			groupings = {
				label = _("Name"), 
				relationship_types = _("Role"),
				type = _("Type")
			},
			group_mode = alphabetical,
			order_by_label_fields = [name],
			
			requires = xxx,
			
			indefinite_article = an,
			label_singular = _("Related Object"),
			label_plural = _("Related Objects"),
		}
	}
}

# Configuration for entity browse
ca_entities = {
	name = _("Entities"),
	facets = {
		type_facet = {
			type = fieldList,
			field = type_id,
			
			group_mode = alphabetical,
			
			label_singular = _("type"),
			label_plural = _("types")
		},
		role_facet = {
			type = attribute,
			element_code = church_role,
			
			group_mode = alphabetical,
			
			label_singular = _("church role"),
			label_plural = _("church roles")
		}
	}
}

# Configuration for occurrence browse
ca_occurrences = {
	name = _("Events & Broadcasts"),
	facets = {
		type_facet = {
			type = attribute,
			element_code = event_type,
			multiple = 1,
			columns = 1,
			
			group_mode = alphabetical,
			
			label_singular = _("Type"),
			label_plural = _("Types")
		},
		event_decade_facet = {
			type = normalizedDates,
			element_code = event_date,
			#element_code = date_created,
			normalization = decades,
			multiple = 1,
			columns = 1,
			
			group_mode = alphabetical,
			
			label_singular = _("event decade"),
			label_plural = _("event decades")
		},
		event_year_facet = {
			type = normalizedDates,
			element_code = event_date,
			#element_code = date_created,
			normalization = years,
			
			group_mode = alphabetical,
			
			label_singular = _("event year"),
			label_plural = _("event years"),
			requires = event_decade_facet
		},
		decade_facet = {
			type = normalizedDates,
			element_code = date_created,
			normalization = decades,
			multiple = 1,
			columns = 1,
			
			group_mode = alphabetical,
			
			label_singular = _("broadcast decade"),
			label_plural = _("broadcast decades")
		},
		year_facet = {
			type = normalizedDates,
			element_code = date_created,
			normalization = years,
			
			group_mode = alphabetical,
			
			label_singular = _("broadcast year"),
			label_plural = _("broadcast years"),
			requires = decade_facet
		},
		
		keyword_facet = {
			type = attribute,
			element_code = internal_keywords,
			
			group_mode = alphabetical,
			
			label_singular = _("Keyword"),
			label_plural = _("Keywords")
		},
		lcsh_terms_facet = {
			type = attribute,
			element_code = lcsh_terms,
			
			group_mode = alphabetical,
			
			label_singular = _("Subject"),
			label_plural = _("Subjects")
		},
		speaker_performer_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_entities,
			relationship_table = ca_entities_x_occurrences,
			#restrict_to_relationship_types = [speaker, subject, producer, performer, host, guest, filmmaker, director, creator, interviewee, panelist],
			restrict_to_relationship_types = [speaker, performer],
			
			group_mode = alphabetical,
			
			order_by_label_fields = [surname, forename, middlename],
			
			#requires = [archived_broadcast_facet, type_facet],
			
			indefinite_article = an,
			label_singular = _("Speaker/Performer"),
			label_plural = _("Speakers & Performers")
		},
		archived_broadcast_facet = {
			type = attribute,
			element_code = broadcast_archive,
			
			label_singular = _("Archived Broadcast"),
			label_plural = _("Archived Broadcasts")
		}
	}
}
