cache_timeout = 86400

#
# 
#
browseTypes = {
	objects = {
		displayName = _("Search"),
		labelSingular = _("Search"),
 		labelPlural = _("Search"),
		table = ca_objects,
		
		restrictToTypes = [item, product, component, av_item],
		#dontExpandTypesHierarchically = true,
		availableFacets = [],
		
		# only return root records (no children)
		#omitChildRecords = 1,
		omitChildRecordsForTypes = [component],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			images = {},
			list = {},
		},
		sortBy = {
			Media = ca_object_representations.access,
			Date = ca_objects.manufacture_date,
			Title = ca_object_labels.name
		},
		# --- default sort direction for the sortBy options
		sortDirection = {
			Media = desc,
			Date = desc,
			Title = asc
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown,
#		options = {
#			selectMediaUsingRelationshipTypes = [relationshipType],
#			selectMediaUsingTypes = [objectType],
#			extendedInformationTemplate = ^ca_objects.description
#		}
	},
	collection_objects = {
		displayName = _("Search"),
		labelSingular = _("Search"),
 		labelPlural = _("Search"),
		table = ca_objects,
		
		restrictToTypes = [],
		#dontExpandTypesHierarchically = true,
		availableFacets = [],
		
		# only return root records (no children)
		#omitChildRecords = 1,
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			images = {},
			list = {},
		},
		sortBy = {
			Rank = ca_objects.rank,
			Date = ca_objects.manufacture_date,
			Title = ca_object_labels.name
		},
		# --- default sort direction for the sortBy options
		sortDirection = {
			Rank = asc,
			Date = desc,
			Title = asc
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown,
#		options = {
#			selectMediaUsingRelationshipTypes = [relationshipType],
#			selectMediaUsingTypes = [objectType],
#			extendedInformationTemplate = ^ca_objects.description
#		}
	},
	products = {
		displayName = _("Search"),
		labelSingular = _("Search"),
 		labelPlural = _("Search"),
		table = ca_objects,
		
		restrictToTypes = [product,component],
		#dontExpandTypesHierarchically = true,
		availableFacets = [],
		
		omitChildRecordsForTypes = [component]
		
		# only return root records (no children)
		#omitChildRecords = 1,
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			images = {},
			list = {},
		},
		sortBy = {
			Media = ca_object_representations.access,
			Date = ca_objects.manufacture_date,
			Title = ca_object_labels.name
		},
		# --- default sort direction for the sortBy options
		sortDirection = {
			Media = desc,
			Date = desc,
			Title = asc
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown,
#		options = {
#			extendedInformationTemplate = 
#		}
	},
	archival = {
		displayName = _("Search"),
		labelSingular = _("Search"),
 		labelPlural = _("Search"),
		table = ca_objects,
		
		restrictToTypes = [item,av_item],
		#dontExpandTypesHierarchically = true,
		availableFacets = [],
		
#		baseCriteria = {	# --- this isn't working because it returns only folders since only folders have this attribute
#			completely_digitized_facet = [367]
#		}
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			images = {},
			list = {},
		},
		sortBy = {
			Media = ca_object_representations.access,
			Date = ca_objects.manufacture_date,
			Title = ca_object_labels.name
		},
		# --- default sort direction for the sortBy options
		sortDirection = {
			Media = desc,
			Date = desc,
			Title = asc
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown,
#		options = {
#			selectMediaUsingRelationshipTypes = [relationshipType],
#			selectMediaUsingTypes = [objectType],
#			extendedInformationTemplate = ^ca_objects.description
#		}
	},
	collections = {
		displayName = _(Collections),
		labelSingular = _("collection"),
 		labelPlural = _("collections"),
		table = ca_collections,
		restrictToTypes = [],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = { 
			images = {}, 
			list = {}
		},
		
		sortBy = {
			Relevance = _natural,
			Identifier = ca_collections.idno,
			Name = ca_collection_labels.name
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown
	},
	chronology = {
		displayName = _("Collection Chronology"),
		labelSingular = _("chronology"),
 		labelPlural = _("chronologies"),
		table = ca_occurrences,
		restrictToTypes = [chronology],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			list = {}
		},
		sortBy = {
			Date = ca_occurrences.manufacture_date
		},
		# --- default sort direction for the sortBy options
		sortDirection = {
			Date = desc
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown,
		pdfExportTitle = Chronology
	},
	bulk_media = {
		displayName = _("Bulk Media"),
		labelSingular = _("Bulk Media"),
 		labelPlural = _("Bulk Media"),
		table = ca_objects,
		
		restrictToTypes = [bulk],
		#dontExpandTypesHierarchically = true,
		availableFacets = [],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			list = {}
		},
		sortBy = {
			Date = ca_objects.manufacture_date
		},
		# --- default sort direction for the sortBy options
		sortDirection = {
			Date = desc
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown,
#		options = {
#			selectMediaUsingRelationshipTypes = [relationshipType],
#			selectMediaUsingTypes = [objectType],
#			extendedInformationTemplate = ^ca_objects.description
#		}
	},
	
}

views = {
	images = {
		icon = <i class='material-icons inline'>apps</i>
	},
	list = {
		icon = <i class='material-icons inline'>view_list</i>
	},
	timeline = {
		icon = <i class='material-icons inline'>access_time</i>
	},
	map = {
		icon = <i class='material-icons inline'>map</i>
	}
}

# --- text for Browse menu item, default is "Browse" 
browse_menu_button_text = 

# --- default number of results per page/ajax load
defaultHitsPerBlock = 36

# --- set to list to show dropdown with links to each configured browse or a single Browse nav link when one browse is configured
browseMenuFormat =

# --- set if you don't want the browse menu to be preloaded with facets for the first browse type on open
dontPreloadBrowseMenu = 1

# --- refine_col_class -> boostrap col class to assign to refine col - defaults to: col-sm-8 col-md-8 col-lg-8
result_col_class = col-sm-8 col-md-9 col-lg-9

# --- refine_col_class -> boostrap col class to assign to refine col - defaults to: col-sm-4 col-md-3 col-md-offset-1 col-lg-3 col-lg-offset-1
refine_col_class = col-sm-4 col-md-3 col-lg-3

ca_objects = {
	name = _("Objects"),
	facets = {
		has_media_facet = {
			type = has,
			
			table = ca_object_representations,
			relationship_table = ca_objects_x_object_representations,
			restrict_to_types = [],
			restrict_to_relationship_types = [],
			
			label_yes = _("Has media"),
			label_no = _("Does not have media"),
			
			single_value = 1,
			
			label_singular = _("has media"),
			label_plural = _("has media"),
		},
		brand_facet = {
			type = attribute,
			element_code = brand,
			group_mode = alphabetical, 
			order_by_label_fields = [name_singular],
			label_singular = _("Brand"),
			label_plural = _("Brands")
		},
		decade_facet = {
			type = normalizedDates,
			element_code = manufacture_date,
			normalization = decades,
			
			group_mode = none,
			
			include_unknown = 1,
			
			label_singular = _("decade"),
			label_plural = _("decades"),
		},
		year_facet = {
			type = normalizedDates,
			element_code = manufacture_date,
			normalization = years,
			requires = decade_facet,
			group_mode = none,
			
			include_unknown = 1,
			
			label_singular = _("year"),
			label_plural = _("years"),
		},
		archival_type_facet = {
			type = attribute,
			element_code = archival_types,
			group_mode = alphabetical, 
			order_by_label_fields = [name_singular],
			label_singular = _("Archival Item Type"),
			label_plural = _("Archival Item Types")
		},
		application_facet = {
			type = attribute,
			element_code = application,
			group_mode = alphabetical, 
			order_by_label_fields = [name_singular],
			label_singular = _("Product Application"),
			label_plural = _("Product Applications")
		},
		packaging_facet = {
			type = attribute,
			element_code = packaging,
			group_mode = alphabetical, 
			order_by_label_fields = [name_singular],
			label_singular = _("Packaging"),
			label_plural = _("Packaging")
		},
		marketing_facet = {
			type = attribute,
			element_code = marketing,
			group_mode = alphabetical, 
			order_by_label_fields = [name_singular],
			label_singular = _("Marketing Category"),
			label_plural = _("Marketing Categories")
		},
		season_facet = {
			type = attribute,
			element_code = season_list,
			group_mode = alphabetical, 
			order_by_label_fields = [name_singular],
			label_singular = _("Season"),
			label_plural = _("Season")
		},
		author_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_entities,
			relationship_table = ca_objects_x_entities,
			restrict_to_types = [],
			restrict_to_relationship_types = [author],

			group_mode = alphabetical,
			order_by_label_fields = [surname, forename, middlename],
			
			indefinite_article = an,
			label_singular = _("Author"),
			label_plural = _("Authors"),
		},
		contributor_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_entities,
			relationship_table = ca_objects_x_entities,
			restrict_to_types = [],
			restrict_to_relationship_types = [contributor],

			group_mode = alphabetical,
			order_by_label_fields = [surname, forename, middlename],
			
			indefinite_article = an,
			label_singular = _("Contributor"),
			label_plural = _("Contributors"),
		},
		designer_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_entities,
			relationship_table = ca_objects_x_entities,
			restrict_to_types = [],
			restrict_to_relationship_types = [designer],

			group_mode = alphabetical,
			order_by_label_fields = [surname, forename, middlename],
			
			indefinite_article = an,
			label_singular = _("Designer"),
			label_plural = _("Designers"),
		},
		exclusive_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_entities,
			relationship_table = ca_objects_x_entities,
			restrict_to_types = [],
			restrict_to_relationship_types = [exclusive],

			group_mode = alphabetical,
			order_by_label_fields = [surname, forename, middlename],
			
			indefinite_article = an,
			label_singular = _("Exclusive"),
			label_plural = _("Exclusives"),
		},
		model_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_entities,
			relationship_table = ca_objects_x_entities,
			restrict_to_types = [],
			restrict_to_relationship_types = [model],

			group_mode = alphabetical,
			order_by_label_fields = [surname, forename, middlename],
			
			indefinite_article = an,
			label_singular = _("Model"),
			label_plural = _("Models"),
		},
		photographer_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_entities,
			relationship_table = ca_objects_x_entities,
			restrict_to_types = [],
			restrict_to_relationship_types = [photographer],

			group_mode = alphabetical,
			order_by_label_fields = [surname, forename, middlename],
			
			indefinite_article = an,
			label_singular = _("Photographer"),
			label_plural = _("Photographers"),
		},
		publisher_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_entities,
			relationship_table = ca_objects_x_entities,
			restrict_to_types = [],
			restrict_to_relationship_types = [publisher],

			group_mode = alphabetical,
			order_by_label_fields = [surname, forename, middlename],
			
			indefinite_article = an,
			label_singular = _("Publisher"),
			label_plural = _("Publishers"),
		},
		source_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_entities,
			relationship_table = ca_objects_x_entities,
			restrict_to_types = [],
			restrict_to_relationship_types = [source],

			group_mode = alphabetical,
			order_by_label_fields = [surname, forename, middlename],
			
			indefinite_article = an,
			label_singular = _("Source"),
			label_plural = _("Sources"),
		},
		subject_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_entities,
			relationship_table = ca_objects_x_entities,
			restrict_to_types = [],
			restrict_to_relationship_types = [subject],

			group_mode = alphabetical,
			order_by_label_fields = [surname, forename, middlename],
			
			indefinite_article = an,
			label_singular = _("Subject"),
			label_plural = _("Subjects"),
		},
		collection_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_collections,
			relationship_table = ca_objects_x_collections,
			restrict_to_types = [],
			restrict_to_relationship_types = [collection],

			group_mode = alphabetical,
			order_by_label_fields = [name],
			requires = x,
			
			indefinite_article = an,
			label_singular = _("Collection"),
			label_plural = _("Collection"),
		},
#		type_facet = {
#			type = fieldList,
#			field = type_id,
			
#			group_mode = none,

#			label_singular = _("Type"),
#			label_plural = _("Types"),
#		}
	}
}

ca_occurrences = {
	name = _("Chronology"),
	facets = {
		collection_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_collections,
			relationship_table = ca_occurrences_x_collections,
			restrict_to_types = [collection]

			group_mode = alphabetical,
			order_by_label_fields = [name]
			
			indefinite_article = an,
			label_singular = _("Collection"),
			label_plural = _("Collection"),
		},
		chronology_type_facet = {
			type = attribute,
			element_code = chronology_types,
			group_mode = alphabetical, 
			multiple = 1,
			order_by_label_fields = [name_singular],
			label_singular = _("Archival Item Type"),
			label_plural = _("Archival Item Types")
		}
	}
}