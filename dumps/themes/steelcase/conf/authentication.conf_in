# ---------------------------------------------------
# Optional authentication configuration options
# ---------------------------------------------------

# ---------------------------------------------------
# Authentication adapter to use
# ---------------------------------------------------
# Available options are:
#	CaUsers : Database-powered authentication with secure password hashing. No additional setup required.
#	OpenLDAP : Authentication via OpenLDAP/slapd-based directory service
#	ActiveDirectory : Authentication via Microsoft Active Directory service
#	ExternalDB : Authentication using an external database
auth_adapter = ActiveDirectory

# Set this to 1 to enable the CollectiveAccess password reset feature.
# Note that a working email configuration is required for this to work.
auth_allow_password_reset = 0

# Uncomment to display a 'manage account' link on the login page
# manage_account_url = http://www.mysite.org/auth/manage

# ---------------------------------------------------
# Configuration for OpenLDAP / ADS Adapters
# ---------------------------------------------------

directories = {
	main = {
		# Authentication via Lightweight Directory Access Protocol (LDAP)
		# Note that this feature requires the "ldap" PHP module which is not checked
		# in the standard CollectiveAccess configuration checks.

		# Server location
		ldap_host = grrinidc03.na.steelcase.net,
		ldap_port = 3268,

		# Record structure
		ldap_base_dn = "dc=steelcase,dc=net",
		#ldap_user_ou = "dc=na",

		# Distinguished name to use for binding/authenticating users. The following optional replacements are available:
		# 	{username} = user name entered in login form. Is technically optional but should obviously be used.
		# 	{user_ou} = ldap_user_ou setting from above
		#	{base_dn} =  ldap_base_dn setting from above
		ldap_bind_rdn_format = "cn={username},{user_ou},{base_dn}",

		# We have seen directories where it's not possible to specify a generic DN for binding
		# all CollectiveAccess users because they're scattered over multiple organizational units.
		# In those cases you can use the following setting to search for the user records. CollectiveAccess
		# will then try to get the distinguished name for binding from the first result record. If this
		# is set to a non-zero value, ldap_bind_rdn_format will be ignored. OpenLDAP implementation only!
		 ldap_bind_rdn_filter = "sAMAccountName={username}",
		# 
		# ldap_bind_rdn_filter_rdn = ,
		# ldap_bind_rdn_filter_password = ,

		# Map CollectiveAccess user record attributes to the corresponding fields in your directory
		# These are used when new CollectiveAccess user records are created with information from the
		# directory service. Note that a unique email address is mandatory for CollectiveAccess user records,
		# i.e. you should map this to a field that actually contains an email address for each user!
		ldap_attribute_email = mail,
		ldap_attribute_fname = givenName,
		ldap_attribute_lname = sn,

		# How do we find user records when a user doesn't exist in CollectiveAccess yet?
		# See http://php.net/manual/en/function.ldap-search.php
		# These two settings refer to the second and third parameter of ldap_search()
		ldap_user_search_dn_format = "cn={username},{base_dn}",
		ldap_user_search_filter_format = "sAMAccountName={username}",

		# Unless the user is member of one of these LDAP groups, they can't log in.
		# ldap_group_cn_list = [CollectiveAccessUsers],

		# How do we find group records to check for group membership?
		# These settings are for the OpenLDAP adapter only. See ldap_attribute_member_of
		# below for the Active Directory group membership check. Also see
		# http://php.net/manual/en/function.ldap-search.php
		# These two settings refer to the second and third parameter of ldap_search()
		ldap_group_search_dn_format = "ou=Groups,ou=SCNA,ou=People,dc=na,dc=steelcase,dc=net",
		ldap_group_search_filter_format = "cn={groupname}",

		# Lists of roles and groups that are *always* added to automatically created new users
		ldap_users_default_roles = [],
		ldap_users_default_groups = [],

		# Automatically activate new users? (otherwise they can't log in and you have to activate by hand)
		ldap_users_auto_active = 1,

		# The following setting is specific to the Active Directory authentication adapter.
		# It defines the name of the user record attribute that contains a list of
		# groups the user belongs to. It is used to check for group membership if the above
		# ldap_group_cn_list is set and not empty.
		ldap_attribute_member_of = memberOf,

		# ---------------------------------------------------
		# The following features are OpenLDAP only!
		# ---------------------------------------------------
		# Note that the LDAP groups here are searched using the
		# ldap_group_search_dn_format and ldap_group_search_filter_format settings from above.

		# Roles granted to newly created user from LDAP directory
		# Map LDAP group names to lists of CollectiveAccess role codes here.
		ldap_roles_group_map = {
			#Admins = { admin, moderator, researcher }
		},

		# Groups granted to newly created user from LDAP directory
		# Map LDAP group names to lists of CollectiveAccess group codes here.
		ldap_groups_group_map = {
			#Admins = { admin, cataloguer }
		},

		# If the following settings are set to non-zero values, a user's CollectiveAccess roles and/or groups
		# are synced with the OpenLDAP directory on every login attempt. Note that this overrides any changes
		# to role or group membership you may have done by hand using the "Access Control" menu.
		# A user's CollectiveAccess roles and groups are determined by the combination of
		# ldap_roles_group_map + ldap_users_default_roles and ldap_groups_group_map + ldap_users_default_groups
		ldap_sync_user_roles = 0,
		ldap_sync_user_groups = 0,
	}
}

# ---------------------------------------------------
# End configuration for OpenLDAP / ADS Adapters
# ---------------------------------------------------

# ---------------------------------------------------
# Authentication using an external database: ExternalDB adapter
# ---------------------------------------------------
# Note: the values below are defaults. They MUST be changed
# to work with your own external authentication database
#

# Login for external auth database
extdb_host = localhost
extdb_username = your_auth_database_login
extdb_password = your_auth_database_password
extdb_database = your_auth_database_name
extdb_db_type = mysql

# The table and fields in the external database to use for authentication
extdb_table = users
extdb_username_field = email
extdb_password_field = password

# How the external database hashes passwords
# 	For plain-text passwords use "none"
# Possible values are: md5, sha1, none
extdb_password_hash_type = md5

# How to determine from the external database if the user is active
#	If all users in the external database are active set extdb_default_active = 1
extdb_default_active = 0
extdb_active_field = status
extdb_active_field_map = {
	Active = 1,
	active = 1,
	Disabled = 0,
	none = 0
}

# How to determine from the external database what the class of user is
# 	possible CA values are none, public and full
#	"public" means Pawtucket (front-end) login only, "full" means both Pawtucket and Providence (back-end)
extdb_access_field = access
extdb_access_field_map = {
	Member = public,
	Staff = full
}
extdb_default_access = none

# Roles granted to login from external database
extdb_roles_field = access
# extdb value = assoc list of CA roles
extdb_roles_field_map = {
	Member = { cataloguer }
}
extdb_default_roles = { }

# Groups granted to login from external database
extdb_groups_field = access
# extdb value = assoc list of CA groups
extdb_groups_field_map = {
	Member = { cataloguers }
}
extdb_default_groups = { cataloguers }

# Fields to copy from external database to newly created CA user record
# 	extdb field = ca_users field
extdb_user_field_map = {
	email = email,
	firstname = fname,
	lastname = lname
}

# Fields to copy from external database to  user preferences in newly created CA user record
# 	extdb field = ca user pref
extdb_user_pref_map = {
	cur_address1 = user_profile_address1,
	cur_address2 = user_profile_address2,
	cur_city = user_profile_city,
	cur_state = user_profile_state,
	cur_country = user_profile_country,
	cur_postal_code = user_profile_postalcode,
	primary_phone = user_profile_phone
}
